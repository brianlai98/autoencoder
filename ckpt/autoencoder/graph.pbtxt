node {
  name: "is_training"
  op: "Placeholder"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "data_loading/tensors/normalize_tensors/component_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 2
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "data_loading/TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "data_loading/tensors/normalize_tensors/component_0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "data_loading/buffer_size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 20
      }
    }
  }
}
node {
  name: "data_loading/seed"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 8964
      }
    }
  }
}
node {
  name: "data_loading/seed2/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 4
      }
    }
  }
}
node {
  name: "data_loading/seed2/Equal/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "data_loading/seed2/Equal"
  op: "Equal"
  input: "data_loading/seed"
  input: "data_loading/seed2/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "data_loading/seed2/Equal_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "data_loading/seed2/Equal_1"
  op: "Equal"
  input: "data_loading/seed2/Const"
  input: "data_loading/seed2/Equal_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "data_loading/seed2/LogicalAnd"
  op: "LogicalAnd"
  input: "data_loading/seed2/Equal"
  input: "data_loading/seed2/Equal_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "data_loading/seed2/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "data_loading/seed2"
  op: "Select"
  input: "data_loading/seed2/LogicalAnd"
  input: "data_loading/seed2/Const_1"
  input: "data_loading/seed2/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "data_loading/ShuffleDataset"
  op: "ShuffleDataset"
  input: "data_loading/TensorSliceDataset"
  input: "data_loading/buffer_size"
  input: "data_loading/seed"
  input: "data_loading/seed2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "data_loading/count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "data_loading/RepeatDataset"
  op: "RepeatDataset"
  input: "data_loading/ShuffleDataset"
  input: "data_loading/count"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "data_loading/num_parallel_calls"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "data_loading/ParallelMapDataset"
  op: "ParallelMapDataset"
  input: "data_loading/RepeatDataset"
  input: "data_loading/num_parallel_calls"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_map_Davis2016Reader.dataset_map_216"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "preserve_cardinality"
    value {
      b: false
    }
  }
  attr {
    key: "sloppy"
    value {
      b: false
    }
  }
  attr {
    key: "use_inter_op_parallelism"
    value {
      b: true
    }
  }
}
node {
  name: "data_loading/batch_size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 32
      }
    }
  }
}
node {
  name: "data_loading/drop_remainder"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "data_loading/BatchDatasetV2"
  op: "BatchDatasetV2"
  input: "data_loading/ParallelMapDataset"
  input: "data_loading/batch_size"
  input: "data_loading/drop_remainder"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "data_loading/buffer_size_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 96
      }
    }
  }
}
node {
  name: "data_loading/PrefetchDataset"
  op: "PrefetchDataset"
  input: "data_loading/BatchDatasetV2"
  input: "data_loading/buffer_size_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "slack_period"
    value {
      i: 0
    }
  }
}
node {
  name: "data_loading/optimizations"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 3
          }
        }
        string_val: "map_and_batch_fusion"
        string_val: "noop_elimination"
        string_val: "shuffle_and_repeat_fusion"
      }
    }
  }
}
node {
  name: "data_loading/OptimizeDataset"
  op: "OptimizeDataset"
  input: "data_loading/PrefetchDataset"
  input: "data_loading/optimizations"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "optimization_configs"
    value {
      list {
        s: "map_vectorization:use_choose_fastest:false"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "data_loading/ModelDataset"
  op: "ModelDataset"
  input: "data_loading/OptimizeDataset"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "cpu_budget"
    value {
      i: 0
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "data_loading/IteratorV2"
  op: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "data_loading/MakeIterator"
  op: "MakeIterator"
  input: "data_loading/ModelDataset"
  input: "data_loading/IteratorV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@data_loading/IteratorV2"
      }
    }
  }
}
node {
  name: "data_loading/IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "data_loading/IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "data_loading/IteratorGetNext"
  op: "IteratorGetNext"
  input: "data_loading/IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "data_loading/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "data_loading/tensors_1/normalize_tensors/component_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 462
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 462
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\300@\000\000\200?\000\000\000A\000\000\200?\000\000 A\000\000\200?\000\000@A\000\000\200?\000\000\270A\000\000\200?\000\000\330A\000\000\200?\000\000\340A\000\000\200?\000\000\010B\000\000\200?\000\000\014B\000\000\200?\000\000\020B\000\000\200?\000\0000B\000\000\200?\000\000TB\000\000\200?\000\000dB\000\000\200?\000\000\232B\000\000\200?\000\000\270B\000\000\200?\000\000\272B\000\000\200?\000\000\306B\000\000\200?\000\000\316B\000\000\200?\000\000\344B\000\000\200?\000\000\354B\000\000\200?\000\000\366B\000\000\200?\000\000\370B\000\000\200?\000\000\025C\000\000\200?\000\000\035C\000\000\200?\000\000 C\000\000\200?\000\0005C\000\000\200?\000\0006C\000\000\200?\000\000@C\000\000\200?\000\000JC\000\000\200?\000\000WC\000\000\200?\000\000XC\000\000\200?\000\000sC\000\000\200?\000\000yC\000\000\200?\000\000{`A\000\000\200\277\000\000p`B\000\000\200\277\000\000hB\000\000\200\277\000\000lB\000\000\200\277\000\000pB\000\000\200\277\000\000tB\000\000\200\277\000\000xB\000\000\200\277\000\000|tC\000\000\200\277\000\000\nC\000\000\200\277\000\000\013C\000\000\200\277\000\000\014C\000\000\200\277\000\000\r`C\000\000\200\277\000\000aC\000\000\200\277\000\000bC\000\000\200\277\000\000cC\000\000\200\277\000\000dC\000\000\200\277\000\000eC\000\000\200\277\000\000fC\000\000\200\277\000\000gC\000\000\200\277\000\000hC\000\000\200\277\000\000iC\000\000\200\277\000\000jC\000\000\200\277\000\000kC\000\000\200\277\000\000lC\000\000\200\277\000\000mC\000\000\200\277\000\000nC\000\000\200\277\000\000oC\000\000\200\277\000\000pC\000\000\200\277\000\000qC\000\000\200\277\000\000rC\000\000\200\277\000\000tC\000\000\200\277\000\000uC\000\000\200\277\000\000vC\000\000\200\277\000\000wC\000\000\200\277\000\000xC\000\000\200\277\000\000zC\000\000\200\277\000\000|C\000\000\200\277\000\000}C\000\000\200\277\000\000~
      }
    }
  }
}
node {
  name: "data_loading/TensorSliceDataset_1"
  op: "TensorSliceDataset"
  input: "data_loading/tensors_1/normalize_tensors/component_0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "data_loading/count_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "data_loading/RepeatDataset_1"
  op: "RepeatDataset"
  input: "data_loading/TensorSliceDataset_1"
  input: "data_loading/count_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "data_loading/num_parallel_calls_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data_loading/ParallelMapDataset_1"
  op: "ParallelMapDataset"
  input: "data_loading/RepeatDataset_1"
  input: "data_loading/num_parallel_calls_1"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_map_Davis2016Reader.test_dataset_map_325"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_STRING
      }
    }
  }
  attr {
    key: "preserve_cardinality"
    value {
      b: false
    }
  }
  attr {
    key: "sloppy"
    value {
      b: false
    }
  }
  attr {
    key: "use_inter_op_parallelism"
    value {
      b: true
    }
  }
}
node {
  name: "data_loading/batch_size_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 32
      }
    }
  }
}
node {
  name: "data_loading/drop_remainder_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "data_loading/BatchDatasetV2_1"
  op: "BatchDatasetV2"
  input: "data_loading/ParallelMapDataset_1"
  input: "data_loading/batch_size_1"
  input: "data_loading/drop_remainder_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_STRING
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "data_loading/buffer_size_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 96
      }
    }
  }
}
node {
  name: "data_loading/PrefetchDataset_1"
  op: "PrefetchDataset"
  input: "data_loading/BatchDatasetV2_1"
  input: "data_loading/buffer_size_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_STRING
      }
    }
  }
  attr {
    key: "slack_period"
    value {
      i: 0
    }
  }
}
node {
  name: "data_loading/optimizations_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 3
          }
        }
        string_val: "map_and_batch_fusion"
        string_val: "noop_elimination"
        string_val: "shuffle_and_repeat_fusion"
      }
    }
  }
}
node {
  name: "data_loading/OptimizeDataset_1"
  op: "OptimizeDataset"
  input: "data_loading/PrefetchDataset_1"
  input: "data_loading/optimizations_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "optimization_configs"
    value {
      list {
        s: "map_vectorization:use_choose_fastest:false"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_STRING
      }
    }
  }
}
node {
  name: "data_loading/ModelDataset_1"
  op: "ModelDataset"
  input: "data_loading/OptimizeDataset_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "cpu_budget"
    value {
      i: 0
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_STRING
      }
    }
  }
}
node {
  name: "data_loading/IteratorV2_1"
  op: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_STRING
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "data_loading/MakeIterator_1"
  op: "MakeIterator"
  input: "data_loading/ModelDataset_1"
  input: "data_loading/IteratorV2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@data_loading/IteratorV2_1"
      }
    }
  }
}
node {
  name: "data_loading/IteratorToStringHandle_1"
  op: "IteratorToStringHandle"
  input: "data_loading/IteratorV2_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "data_loading/IteratorGetNext_1"
  op: "IteratorGetNext"
  input: "data_loading/IteratorV2_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_STRING
      }
    }
  }
}
node {
  name: "cond/Switch"
  op: "Switch"
  input: "is_training"
  input: "is_training"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/switch_t"
  op: "Identity"
  input: "cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/switch_f"
  op: "Identity"
  input: "cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/pred_id"
  op: "Identity"
  input: "is_training"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/Switch_1"
  op: "Switch"
  input: "data_loading/IteratorGetNext"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@data_loading/IteratorGetNext"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "cond/Switch_2"
  op: "Switch"
  input: "data_loading/IteratorGetNext:1"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@data_loading/IteratorGetNext"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "cond/Switch_3"
  op: "Switch"
  input: "data_loading/Const"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@data_loading/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/Switch_4"
  op: "Switch"
  input: "data_loading/IteratorGetNext_1"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@data_loading/IteratorGetNext_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "cond/Switch_5"
  op: "Switch"
  input: "data_loading/IteratorGetNext_1:1"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@data_loading/IteratorGetNext_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "cond/Switch_6"
  op: "Switch"
  input: "data_loading/IteratorGetNext_1:2"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@data_loading/IteratorGetNext_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "cond/Merge"
  op: "Merge"
  input: "cond/Switch_4"
  input: "cond/Switch_1:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/Merge_1"
  op: "Merge"
  input: "cond/Switch_5"
  input: "cond/Switch_2:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 384
          }
          dim {
            size: 640
          }
          dim {
            size: 3
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/Merge_2"
  op: "Merge"
  input: "cond/Switch_6"
  input: "cond/Switch_3:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "resize/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\300\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "resize/ResizeBilinear"
  op: "ResizeBilinear"
  input: "cond/Merge"
  input: "resize/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
  attr {
    key: "half_pixel_centers"
    value {
      b: false
    }
  }
}
node {
  name: "MaskNet//conv1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\003\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08280786871910095
      }
    }
  }
}
node {
  name: "MaskNet//conv1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08280786871910095
      }
    }
  }
}
node {
  name: "MaskNet//conv1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "MaskNet//conv1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 67
    }
  }
}
node {
  name: "MaskNet//conv1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "MaskNet//conv1/kernel/Initializer/random_uniform/max"
  input: "MaskNet//conv1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "MaskNet//conv1/kernel/Initializer/random_uniform/RandomUniform"
  input: "MaskNet//conv1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "MaskNet//conv1/kernel/Initializer/random_uniform/mul"
  input: "MaskNet//conv1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv1/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv1/kernel/Assign"
  op: "Assign"
  input: "MaskNet//conv1/kernel"
  input: "MaskNet//conv1/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv1/kernel/read"
  op: "Identity"
  input: "MaskNet//conv1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv1/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv1/bias/Assign"
  op: "Assign"
  input: "MaskNet//conv1/bias"
  input: "MaskNet//conv1/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv1/bias/read"
  op: "Identity"
  input: "MaskNet//conv1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv1/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv1/Conv2D"
  op: "Conv2D"
  input: "resize/ResizeBilinear"
  input: "MaskNet//conv1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet/conv1/BiasAdd"
  op: "BiasAdd"
  input: "MaskNet/conv1/Conv2D"
  input: "MaskNet//conv1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MaskNet//batch_normalization/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization/gamma/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization/gamma"
  input: "MaskNet//batch_normalization/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization/gamma/read"
  op: "Identity"
  input: "MaskNet//batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization/beta/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization/beta"
  input: "MaskNet//batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization/beta/read"
  op: "Identity"
  input: "MaskNet//batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization/moving_mean"
  input: "MaskNet//batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization/moving_mean/read"
  op: "Identity"
  input: "MaskNet//batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization/moving_variance"
  input: "MaskNet//batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization/moving_variance/read"
  op: "Identity"
  input: "MaskNet//batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/batch_normalization/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MaskNet/conv1/BiasAdd"
  input: "MaskNet//batch_normalization/gamma/read"
  input: "MaskNet//batch_normalization/beta/read"
  input: "MaskNet//batch_normalization/moving_mean/read"
  input: "MaskNet//batch_normalization/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MaskNet/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "MaskNet/Elu"
  op: "Elu"
  input: "MaskNet/batch_normalization/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0833333358168602
      }
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0833333358168602
      }
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "MaskNet//conv2_downsample/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 103
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "MaskNet//conv2_downsample/kernel/Initializer/random_uniform/max"
  input: "MaskNet//conv2_downsample/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "MaskNet//conv2_downsample/kernel/Initializer/random_uniform/RandomUniform"
  input: "MaskNet//conv2_downsample/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/kernel/Initializer/random_uniform"
  op: "Add"
  input: "MaskNet//conv2_downsample/kernel/Initializer/random_uniform/mul"
  input: "MaskNet//conv2_downsample/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/kernel/Assign"
  op: "Assign"
  input: "MaskNet//conv2_downsample/kernel"
  input: "MaskNet//conv2_downsample/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/kernel/read"
  op: "Identity"
  input: "MaskNet//conv2_downsample/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/bias/Assign"
  op: "Assign"
  input: "MaskNet//conv2_downsample/bias"
  input: "MaskNet//conv2_downsample/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/bias/read"
  op: "Identity"
  input: "MaskNet//conv2_downsample/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv2_downsample/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv2_downsample/Conv2D"
  op: "Conv2D"
  input: "MaskNet/Elu"
  input: "MaskNet//conv2_downsample/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet/conv2_downsample/BiasAdd"
  op: "BiasAdd"
  input: "MaskNet/conv2_downsample/Conv2D"
  input: "MaskNet//conv2_downsample/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/gamma/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_1/gamma"
  input: "MaskNet//batch_normalization_1/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/gamma/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/beta/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_1/beta"
  input: "MaskNet//batch_normalization_1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/beta/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/moving_mean/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_1/moving_mean"
  input: "MaskNet//batch_normalization_1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/moving_mean/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/moving_variance/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_1/moving_variance"
  input: "MaskNet//batch_normalization_1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/moving_variance/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/batch_normalization_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MaskNet/conv2_downsample/BiasAdd"
  input: "MaskNet//batch_normalization_1/gamma/read"
  input: "MaskNet//batch_normalization_1/beta/read"
  input: "MaskNet//batch_normalization_1/moving_mean/read"
  input: "MaskNet//batch_normalization_1/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MaskNet/batch_normalization_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "MaskNet/Elu_1"
  op: "Elu"
  input: "MaskNet/batch_normalization_1/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv3/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv3/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.07216878235340118
      }
    }
  }
}
node {
  name: "MaskNet//conv3/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.07216878235340118
      }
    }
  }
}
node {
  name: "MaskNet//conv3/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "MaskNet//conv3/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 139
    }
  }
}
node {
  name: "MaskNet//conv3/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "MaskNet//conv3/kernel/Initializer/random_uniform/max"
  input: "MaskNet//conv3/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv3/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "MaskNet//conv3/kernel/Initializer/random_uniform/RandomUniform"
  input: "MaskNet//conv3/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv3/kernel/Initializer/random_uniform"
  op: "Add"
  input: "MaskNet//conv3/kernel/Initializer/random_uniform/mul"
  input: "MaskNet//conv3/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv3/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv3/kernel/Assign"
  op: "Assign"
  input: "MaskNet//conv3/kernel"
  input: "MaskNet//conv3/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv3/kernel/read"
  op: "Identity"
  input: "MaskNet//conv3/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv3/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv3/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv3/bias/Assign"
  op: "Assign"
  input: "MaskNet//conv3/bias"
  input: "MaskNet//conv3/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv3/bias/read"
  op: "Identity"
  input: "MaskNet//conv3/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv3/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv3/Conv2D"
  op: "Conv2D"
  input: "MaskNet/Elu_1"
  input: "MaskNet//conv3/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet/conv3/BiasAdd"
  op: "BiasAdd"
  input: "MaskNet/conv3/Conv2D"
  input: "MaskNet//conv3/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/gamma/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_2/gamma"
  input: "MaskNet//batch_normalization_2/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/gamma/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_2/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/beta/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_2/beta"
  input: "MaskNet//batch_normalization_2/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/beta/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_2/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/moving_mean/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_2/moving_mean"
  input: "MaskNet//batch_normalization_2/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/moving_mean/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_2/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/moving_variance/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_2/moving_variance"
  input: "MaskNet//batch_normalization_2/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/moving_variance/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_2/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/batch_normalization_2/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MaskNet/conv3/BiasAdd"
  input: "MaskNet//batch_normalization_2/gamma/read"
  input: "MaskNet//batch_normalization_2/beta/read"
  input: "MaskNet//batch_normalization_2/moving_mean/read"
  input: "MaskNet//batch_normalization_2/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MaskNet/batch_normalization_2/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "MaskNet/Elu_2"
  op: "Elu"
  input: "MaskNet/batch_normalization_2/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0589255653321743
      }
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0589255653321743
      }
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "MaskNet//conv4_downsample/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 175
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "MaskNet//conv4_downsample/kernel/Initializer/random_uniform/max"
  input: "MaskNet//conv4_downsample/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "MaskNet//conv4_downsample/kernel/Initializer/random_uniform/RandomUniform"
  input: "MaskNet//conv4_downsample/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/kernel/Initializer/random_uniform"
  op: "Add"
  input: "MaskNet//conv4_downsample/kernel/Initializer/random_uniform/mul"
  input: "MaskNet//conv4_downsample/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/kernel/Assign"
  op: "Assign"
  input: "MaskNet//conv4_downsample/kernel"
  input: "MaskNet//conv4_downsample/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/kernel/read"
  op: "Identity"
  input: "MaskNet//conv4_downsample/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/bias/Assign"
  op: "Assign"
  input: "MaskNet//conv4_downsample/bias"
  input: "MaskNet//conv4_downsample/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/bias/read"
  op: "Identity"
  input: "MaskNet//conv4_downsample/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv4_downsample/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv4_downsample/Conv2D"
  op: "Conv2D"
  input: "MaskNet/Elu_2"
  input: "MaskNet//conv4_downsample/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet/conv4_downsample/BiasAdd"
  op: "BiasAdd"
  input: "MaskNet/conv4_downsample/Conv2D"
  input: "MaskNet//conv4_downsample/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/gamma/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_3/gamma"
  input: "MaskNet//batch_normalization_3/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/gamma/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_3/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/beta/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_3/beta"
  input: "MaskNet//batch_normalization_3/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/beta/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_3/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/moving_mean/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_3/moving_mean"
  input: "MaskNet//batch_normalization_3/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/moving_mean/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_3/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/moving_variance/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_3/moving_variance"
  input: "MaskNet//batch_normalization_3/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/moving_variance/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_3/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/batch_normalization_3/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MaskNet/conv4_downsample/BiasAdd"
  input: "MaskNet//batch_normalization_3/gamma/read"
  input: "MaskNet//batch_normalization_3/beta/read"
  input: "MaskNet//batch_normalization_3/moving_mean/read"
  input: "MaskNet//batch_normalization_3/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MaskNet/batch_normalization_3/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "MaskNet/Elu_3"
  op: "Elu"
  input: "MaskNet/batch_normalization_3/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv5/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv5/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.05103103816509247
      }
    }
  }
}
node {
  name: "MaskNet//conv5/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05103103816509247
      }
    }
  }
}
node {
  name: "MaskNet//conv5/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "MaskNet//conv5/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 211
    }
  }
}
node {
  name: "MaskNet//conv5/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "MaskNet//conv5/kernel/Initializer/random_uniform/max"
  input: "MaskNet//conv5/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv5/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "MaskNet//conv5/kernel/Initializer/random_uniform/RandomUniform"
  input: "MaskNet//conv5/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv5/kernel/Initializer/random_uniform"
  op: "Add"
  input: "MaskNet//conv5/kernel/Initializer/random_uniform/mul"
  input: "MaskNet//conv5/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv5/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv5/kernel/Assign"
  op: "Assign"
  input: "MaskNet//conv5/kernel"
  input: "MaskNet//conv5/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv5/kernel/read"
  op: "Identity"
  input: "MaskNet//conv5/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv5/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv5/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv5/bias/Assign"
  op: "Assign"
  input: "MaskNet//conv5/bias"
  input: "MaskNet//conv5/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv5/bias/read"
  op: "Identity"
  input: "MaskNet//conv5/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv5/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv5/Conv2D"
  op: "Conv2D"
  input: "MaskNet/Elu_3"
  input: "MaskNet//conv5/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet/conv5/BiasAdd"
  op: "BiasAdd"
  input: "MaskNet/conv5/Conv2D"
  input: "MaskNet//conv5/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/gamma/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_4/gamma"
  input: "MaskNet//batch_normalization_4/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/gamma/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_4/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/beta/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_4/beta"
  input: "MaskNet//batch_normalization_4/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/beta/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_4/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/moving_mean/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_4/moving_mean"
  input: "MaskNet//batch_normalization_4/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/moving_mean/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_4/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/moving_variance/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_4/moving_variance"
  input: "MaskNet//batch_normalization_4/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/moving_variance/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_4/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/batch_normalization_4/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MaskNet/conv5/BiasAdd"
  input: "MaskNet//batch_normalization_4/gamma/read"
  input: "MaskNet//batch_normalization_4/beta/read"
  input: "MaskNet//batch_normalization_4/moving_mean/read"
  input: "MaskNet//batch_normalization_4/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MaskNet/batch_normalization_4/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "MaskNet/Elu_4"
  op: "Elu"
  input: "MaskNet/batch_normalization_4/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv6/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv6/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.05103103816509247
      }
    }
  }
}
node {
  name: "MaskNet//conv6/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05103103816509247
      }
    }
  }
}
node {
  name: "MaskNet//conv6/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "MaskNet//conv6/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 247
    }
  }
}
node {
  name: "MaskNet//conv6/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "MaskNet//conv6/kernel/Initializer/random_uniform/max"
  input: "MaskNet//conv6/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv6/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "MaskNet//conv6/kernel/Initializer/random_uniform/RandomUniform"
  input: "MaskNet//conv6/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv6/kernel/Initializer/random_uniform"
  op: "Add"
  input: "MaskNet//conv6/kernel/Initializer/random_uniform/mul"
  input: "MaskNet//conv6/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv6/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv6/kernel/Assign"
  op: "Assign"
  input: "MaskNet//conv6/kernel"
  input: "MaskNet//conv6/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv6/kernel/read"
  op: "Identity"
  input: "MaskNet//conv6/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv6/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv6/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv6/bias/Assign"
  op: "Assign"
  input: "MaskNet//conv6/bias"
  input: "MaskNet//conv6/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv6/bias/read"
  op: "Identity"
  input: "MaskNet//conv6/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv6/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv6/Conv2D"
  op: "Conv2D"
  input: "MaskNet/Elu_4"
  input: "MaskNet//conv6/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet/conv6/BiasAdd"
  op: "BiasAdd"
  input: "MaskNet/conv6/Conv2D"
  input: "MaskNet//conv6/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/gamma/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_5/gamma"
  input: "MaskNet//batch_normalization_5/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/gamma/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_5/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/beta/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_5/beta"
  input: "MaskNet//batch_normalization_5/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/beta/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_5/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/moving_mean/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_5/moving_mean"
  input: "MaskNet//batch_normalization_5/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/moving_mean/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_5/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/moving_variance/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_5/moving_variance"
  input: "MaskNet//batch_normalization_5/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/moving_variance/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_5/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/batch_normalization_5/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MaskNet/conv6/BiasAdd"
  input: "MaskNet//batch_normalization_5/gamma/read"
  input: "MaskNet//batch_normalization_5/beta/read"
  input: "MaskNet//batch_normalization_5/moving_mean/read"
  input: "MaskNet//batch_normalization_5/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MaskNet/batch_normalization_5/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "MaskNet/Elu_5"
  op: "Elu"
  input: "MaskNet/batch_normalization_5/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.05103103816509247
      }
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05103103816509247
      }
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "MaskNet//conv7_atrous/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 283
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "MaskNet//conv7_atrous/kernel/Initializer/random_uniform/max"
  input: "MaskNet//conv7_atrous/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "MaskNet//conv7_atrous/kernel/Initializer/random_uniform/RandomUniform"
  input: "MaskNet//conv7_atrous/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/kernel/Initializer/random_uniform"
  op: "Add"
  input: "MaskNet//conv7_atrous/kernel/Initializer/random_uniform/mul"
  input: "MaskNet//conv7_atrous/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/kernel/Assign"
  op: "Assign"
  input: "MaskNet//conv7_atrous/kernel"
  input: "MaskNet//conv7_atrous/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/kernel/read"
  op: "Identity"
  input: "MaskNet//conv7_atrous/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/bias/Assign"
  op: "Assign"
  input: "MaskNet//conv7_atrous/bias"
  input: "MaskNet//conv7_atrous/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/bias/read"
  op: "Identity"
  input: "MaskNet//conv7_atrous/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv7_atrous/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv7_atrous/filter_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv7_atrous/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\002\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv7_atrous/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "0\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv7_atrous/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\002\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv7_atrous/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv7_atrous/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv7_atrous/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\002\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv7_atrous/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "MaskNet/Elu_5"
  input: "MaskNet/conv7_atrous/SpaceToBatchND/block_shape"
  input: "MaskNet/conv7_atrous/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 26
          }
          dim {
            size: 50
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv7_atrous/Conv2D"
  op: "Conv2D"
  input: "MaskNet/conv7_atrous/SpaceToBatchND"
  input: "MaskNet//conv7_atrous/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 48
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet/conv7_atrous/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv7_atrous/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv7_atrous/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "MaskNet/conv7_atrous/Conv2D"
  input: "MaskNet/conv7_atrous/BatchToSpaceND/block_shape"
  input: "MaskNet/conv7_atrous/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv7_atrous/BiasAdd"
  op: "BiasAdd"
  input: "MaskNet/conv7_atrous/BatchToSpaceND"
  input: "MaskNet//conv7_atrous/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/gamma/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_6/gamma"
  input: "MaskNet//batch_normalization_6/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/gamma/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_6/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/beta/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_6/beta"
  input: "MaskNet//batch_normalization_6/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/beta/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_6/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/moving_mean/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_6/moving_mean"
  input: "MaskNet//batch_normalization_6/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/moving_mean/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_6/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/moving_variance/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_6/moving_variance"
  input: "MaskNet//batch_normalization_6/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/moving_variance/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_6/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/batch_normalization_6/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MaskNet/conv7_atrous/BiasAdd"
  input: "MaskNet//batch_normalization_6/gamma/read"
  input: "MaskNet//batch_normalization_6/beta/read"
  input: "MaskNet//batch_normalization_6/moving_mean/read"
  input: "MaskNet//batch_normalization_6/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MaskNet/batch_normalization_6/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "MaskNet/Elu_6"
  op: "Elu"
  input: "MaskNet/batch_normalization_6/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.05103103816509247
      }
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05103103816509247
      }
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "MaskNet//conv8_atrous/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 330
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "MaskNet//conv8_atrous/kernel/Initializer/random_uniform/max"
  input: "MaskNet//conv8_atrous/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "MaskNet//conv8_atrous/kernel/Initializer/random_uniform/RandomUniform"
  input: "MaskNet//conv8_atrous/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/kernel/Initializer/random_uniform"
  op: "Add"
  input: "MaskNet//conv8_atrous/kernel/Initializer/random_uniform/mul"
  input: "MaskNet//conv8_atrous/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/kernel/Assign"
  op: "Assign"
  input: "MaskNet//conv8_atrous/kernel"
  input: "MaskNet//conv8_atrous/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/kernel/read"
  op: "Identity"
  input: "MaskNet//conv8_atrous/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/bias/Assign"
  op: "Assign"
  input: "MaskNet//conv8_atrous/bias"
  input: "MaskNet//conv8_atrous/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/bias/read"
  op: "Identity"
  input: "MaskNet//conv8_atrous/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv8_atrous/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv8_atrous/filter_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv8_atrous/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\004\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv8_atrous/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "0\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv8_atrous/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\004\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv8_atrous/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv8_atrous/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv8_atrous/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\004\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv8_atrous/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "MaskNet/Elu_6"
  input: "MaskNet/conv8_atrous/SpaceToBatchND/block_shape"
  input: "MaskNet/conv8_atrous/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 26
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv8_atrous/Conv2D"
  op: "Conv2D"
  input: "MaskNet/conv8_atrous/SpaceToBatchND"
  input: "MaskNet//conv8_atrous/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
          dim {
            size: 24
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet/conv8_atrous/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv8_atrous/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv8_atrous/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "MaskNet/conv8_atrous/Conv2D"
  input: "MaskNet/conv8_atrous/BatchToSpaceND/block_shape"
  input: "MaskNet/conv8_atrous/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv8_atrous/BiasAdd"
  op: "BiasAdd"
  input: "MaskNet/conv8_atrous/BatchToSpaceND"
  input: "MaskNet//conv8_atrous/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/gamma/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_7/gamma"
  input: "MaskNet//batch_normalization_7/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/gamma/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_7/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/beta/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_7/beta"
  input: "MaskNet//batch_normalization_7/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/beta/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_7/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/moving_mean/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_7/moving_mean"
  input: "MaskNet//batch_normalization_7/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/moving_mean/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_7/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/moving_variance/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_7/moving_variance"
  input: "MaskNet//batch_normalization_7/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/moving_variance/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_7/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/batch_normalization_7/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MaskNet/conv8_atrous/BiasAdd"
  input: "MaskNet//batch_normalization_7/gamma/read"
  input: "MaskNet//batch_normalization_7/beta/read"
  input: "MaskNet//batch_normalization_7/moving_mean/read"
  input: "MaskNet//batch_normalization_7/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MaskNet/batch_normalization_7/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "MaskNet/Elu_7"
  op: "Elu"
  input: "MaskNet/batch_normalization_7/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.05103103816509247
      }
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05103103816509247
      }
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "MaskNet//conv9_atrous/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 377
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "MaskNet//conv9_atrous/kernel/Initializer/random_uniform/max"
  input: "MaskNet//conv9_atrous/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "MaskNet//conv9_atrous/kernel/Initializer/random_uniform/RandomUniform"
  input: "MaskNet//conv9_atrous/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/kernel/Initializer/random_uniform"
  op: "Add"
  input: "MaskNet//conv9_atrous/kernel/Initializer/random_uniform/mul"
  input: "MaskNet//conv9_atrous/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/kernel/Assign"
  op: "Assign"
  input: "MaskNet//conv9_atrous/kernel"
  input: "MaskNet//conv9_atrous/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/kernel/read"
  op: "Identity"
  input: "MaskNet//conv9_atrous/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/bias/Assign"
  op: "Assign"
  input: "MaskNet//conv9_atrous/bias"
  input: "MaskNet//conv9_atrous/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/bias/read"
  op: "Identity"
  input: "MaskNet//conv9_atrous/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv9_atrous/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv9_atrous/filter_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv9_atrous/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\010\000\000\000\010\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv9_atrous/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "0\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv9_atrous/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\010\000\000\000\010\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv9_atrous/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv9_atrous/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv9_atrous/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\010\000\000\000\010\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv9_atrous/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "MaskNet/Elu_7"
  input: "MaskNet/conv9_atrous/SpaceToBatchND/block_shape"
  input: "MaskNet/conv9_atrous/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 14
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv9_atrous/Conv2D"
  op: "Conv2D"
  input: "MaskNet/conv9_atrous/SpaceToBatchND"
  input: "MaskNet//conv9_atrous/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
          dim {
            size: 12
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet/conv9_atrous/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv9_atrous/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv9_atrous/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "MaskNet/conv9_atrous/Conv2D"
  input: "MaskNet/conv9_atrous/BatchToSpaceND/block_shape"
  input: "MaskNet/conv9_atrous/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv9_atrous/BiasAdd"
  op: "BiasAdd"
  input: "MaskNet/conv9_atrous/BatchToSpaceND"
  input: "MaskNet//conv9_atrous/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/gamma/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_8/gamma"
  input: "MaskNet//batch_normalization_8/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/gamma/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_8/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/beta/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_8/beta"
  input: "MaskNet//batch_normalization_8/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/beta/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_8/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/moving_mean/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_8/moving_mean"
  input: "MaskNet//batch_normalization_8/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/moving_mean/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_8/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/moving_variance/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_8/moving_variance"
  input: "MaskNet//batch_normalization_8/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/moving_variance/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_8/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/batch_normalization_8/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MaskNet/conv9_atrous/BiasAdd"
  input: "MaskNet//batch_normalization_8/gamma/read"
  input: "MaskNet//batch_normalization_8/beta/read"
  input: "MaskNet//batch_normalization_8/moving_mean/read"
  input: "MaskNet//batch_normalization_8/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MaskNet/batch_normalization_8/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "MaskNet/Elu_8"
  op: "Elu"
  input: "MaskNet/batch_normalization_8/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.05103103816509247
      }
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05103103816509247
      }
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "MaskNet//conv10_atrous/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 424
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "MaskNet//conv10_atrous/kernel/Initializer/random_uniform/max"
  input: "MaskNet//conv10_atrous/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "MaskNet//conv10_atrous/kernel/Initializer/random_uniform/RandomUniform"
  input: "MaskNet//conv10_atrous/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/kernel/Initializer/random_uniform"
  op: "Add"
  input: "MaskNet//conv10_atrous/kernel/Initializer/random_uniform/mul"
  input: "MaskNet//conv10_atrous/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/kernel/Assign"
  op: "Assign"
  input: "MaskNet//conv10_atrous/kernel"
  input: "MaskNet//conv10_atrous/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/kernel/read"
  op: "Identity"
  input: "MaskNet//conv10_atrous/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/bias/Assign"
  op: "Assign"
  input: "MaskNet//conv10_atrous/bias"
  input: "MaskNet//conv10_atrous/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/bias/read"
  op: "Identity"
  input: "MaskNet//conv10_atrous/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv10_atrous/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv10_atrous/filter_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv10_atrous/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000\020\000\000\000\020\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv10_atrous/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "0\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv10_atrous/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000\020\000\000\000\020\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv10_atrous/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv10_atrous/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv10_atrous/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000\020\000\000\000\020\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv10_atrous/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "MaskNet/Elu_8"
  input: "MaskNet/conv10_atrous/SpaceToBatchND/block_shape"
  input: "MaskNet/conv10_atrous/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv10_atrous/Conv2D"
  op: "Conv2D"
  input: "MaskNet/conv10_atrous/SpaceToBatchND"
  input: "MaskNet//conv10_atrous/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
          dim {
            size: 6
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet/conv10_atrous/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv10_atrous/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv10_atrous/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "MaskNet/conv10_atrous/Conv2D"
  input: "MaskNet/conv10_atrous/BatchToSpaceND/block_shape"
  input: "MaskNet/conv10_atrous/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv10_atrous/BiasAdd"
  op: "BiasAdd"
  input: "MaskNet/conv10_atrous/BatchToSpaceND"
  input: "MaskNet//conv10_atrous/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/gamma/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_9/gamma"
  input: "MaskNet//batch_normalization_9/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/gamma/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_9/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/beta/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_9/beta"
  input: "MaskNet//batch_normalization_9/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/beta/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_9/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/moving_mean/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_9/moving_mean"
  input: "MaskNet//batch_normalization_9/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/moving_mean/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_9/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/moving_variance/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_9/moving_variance"
  input: "MaskNet//batch_normalization_9/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/moving_variance/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_9/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/batch_normalization_9/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MaskNet/conv10_atrous/BiasAdd"
  input: "MaskNet//batch_normalization_9/gamma/read"
  input: "MaskNet//batch_normalization_9/beta/read"
  input: "MaskNet//batch_normalization_9/moving_mean/read"
  input: "MaskNet//batch_normalization_9/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MaskNet/batch_normalization_9/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "MaskNet/Elu_9"
  op: "Elu"
  input: "MaskNet/batch_normalization_9/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv11/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv11/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.05103103816509247
      }
    }
  }
}
node {
  name: "MaskNet//conv11/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05103103816509247
      }
    }
  }
}
node {
  name: "MaskNet//conv11/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "MaskNet//conv11/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 471
    }
  }
}
node {
  name: "MaskNet//conv11/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "MaskNet//conv11/kernel/Initializer/random_uniform/max"
  input: "MaskNet//conv11/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv11/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "MaskNet//conv11/kernel/Initializer/random_uniform/RandomUniform"
  input: "MaskNet//conv11/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv11/kernel/Initializer/random_uniform"
  op: "Add"
  input: "MaskNet//conv11/kernel/Initializer/random_uniform/mul"
  input: "MaskNet//conv11/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv11/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv11/kernel/Assign"
  op: "Assign"
  input: "MaskNet//conv11/kernel"
  input: "MaskNet//conv11/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv11/kernel/read"
  op: "Identity"
  input: "MaskNet//conv11/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv11/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv11/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv11/bias/Assign"
  op: "Assign"
  input: "MaskNet//conv11/bias"
  input: "MaskNet//conv11/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv11/bias/read"
  op: "Identity"
  input: "MaskNet//conv11/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv11/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv11/Conv2D"
  op: "Conv2D"
  input: "MaskNet/Elu_9"
  input: "MaskNet//conv11/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet/conv11/BiasAdd"
  op: "BiasAdd"
  input: "MaskNet/conv11/Conv2D"
  input: "MaskNet//conv11/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/gamma/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_10/gamma"
  input: "MaskNet//batch_normalization_10/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/gamma/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_10/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/beta/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_10/beta"
  input: "MaskNet//batch_normalization_10/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/beta/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_10/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/moving_mean/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_10/moving_mean"
  input: "MaskNet//batch_normalization_10/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/moving_mean/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_10/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/moving_variance/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_10/moving_variance"
  input: "MaskNet//batch_normalization_10/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/moving_variance/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_10/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/batch_normalization_10/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MaskNet/conv11/BiasAdd"
  input: "MaskNet//batch_normalization_10/gamma/read"
  input: "MaskNet//batch_normalization_10/beta/read"
  input: "MaskNet//batch_normalization_10/moving_mean/read"
  input: "MaskNet//batch_normalization_10/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MaskNet/batch_normalization_10/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "MaskNet/Elu_10"
  op: "Elu"
  input: "MaskNet/batch_normalization_10/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/add"
  op: "Add"
  input: "MaskNet/Elu_10"
  input: "MaskNet/Elu_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv12/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv12/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.05103103816509247
      }
    }
  }
}
node {
  name: "MaskNet//conv12/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05103103816509247
      }
    }
  }
}
node {
  name: "MaskNet//conv12/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "MaskNet//conv12/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 508
    }
  }
}
node {
  name: "MaskNet//conv12/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "MaskNet//conv12/kernel/Initializer/random_uniform/max"
  input: "MaskNet//conv12/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv12/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "MaskNet//conv12/kernel/Initializer/random_uniform/RandomUniform"
  input: "MaskNet//conv12/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv12/kernel/Initializer/random_uniform"
  op: "Add"
  input: "MaskNet//conv12/kernel/Initializer/random_uniform/mul"
  input: "MaskNet//conv12/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv12/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv12/kernel/Assign"
  op: "Assign"
  input: "MaskNet//conv12/kernel"
  input: "MaskNet//conv12/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv12/kernel/read"
  op: "Identity"
  input: "MaskNet//conv12/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv12/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv12/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv12/bias/Assign"
  op: "Assign"
  input: "MaskNet//conv12/bias"
  input: "MaskNet//conv12/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv12/bias/read"
  op: "Identity"
  input: "MaskNet//conv12/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv12/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv12/Conv2D"
  op: "Conv2D"
  input: "MaskNet/add"
  input: "MaskNet//conv12/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet/conv12/BiasAdd"
  op: "BiasAdd"
  input: "MaskNet/conv12/Conv2D"
  input: "MaskNet//conv12/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/gamma/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_11/gamma"
  input: "MaskNet//batch_normalization_11/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/gamma/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_11/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/beta/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_11/beta"
  input: "MaskNet//batch_normalization_11/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/beta/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_11/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/moving_mean/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_11/moving_mean"
  input: "MaskNet//batch_normalization_11/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/moving_mean/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_11/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/moving_variance/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_11/moving_variance"
  input: "MaskNet//batch_normalization_11/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/moving_variance/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_11/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/batch_normalization_11/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MaskNet/conv12/BiasAdd"
  input: "MaskNet//batch_normalization_11/gamma/read"
  input: "MaskNet//batch_normalization_11/beta/read"
  input: "MaskNet//batch_normalization_11/moving_mean/read"
  input: "MaskNet//batch_normalization_11/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MaskNet/batch_normalization_11/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "MaskNet/Elu_11"
  op: "Elu"
  input: "MaskNet/batch_normalization_11/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv13_upsample/resize/ResizeNearestNeighbor/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "`\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv13_upsample/resize/ResizeNearestNeighbor"
  op: "ResizeNearestNeighbor"
  input: "MaskNet/Elu_11"
  input: "MaskNet/conv13_upsample/resize/ResizeNearestNeighbor/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "align_corners"
    value {
      b: true
    }
  }
  attr {
    key: "half_pixel_centers"
    value {
      b: false
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0589255653321743
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0589255653321743
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 546
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Initializer/random_uniform/max"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Initializer/random_uniform/RandomUniform"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Initializer/random_uniform"
  op: "Add"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Initializer/random_uniform/mul"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Assign"
  op: "Assign"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/read"
  op: "Identity"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/Assign"
  op: "Assign"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/bias"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/read"
  op: "Identity"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv13_upsample/conv13_upsample_conv/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv13_upsample/conv13_upsample_conv/Conv2D"
  op: "Conv2D"
  input: "MaskNet/conv13_upsample/resize/ResizeNearestNeighbor"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet/conv13_upsample/conv13_upsample_conv/BiasAdd"
  op: "BiasAdd"
  input: "MaskNet/conv13_upsample/conv13_upsample_conv/Conv2D"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/gamma/Assign"
  op: "Assign"
  input: "MaskNet//conv13_upsample/batch_normalization/gamma"
  input: "MaskNet//conv13_upsample/batch_normalization/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/gamma/read"
  op: "Identity"
  input: "MaskNet//conv13_upsample/batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/beta/Assign"
  op: "Assign"
  input: "MaskNet//conv13_upsample/batch_normalization/beta"
  input: "MaskNet//conv13_upsample/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/beta/read"
  op: "Identity"
  input: "MaskNet//conv13_upsample/batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "MaskNet//conv13_upsample/batch_normalization/moving_mean"
  input: "MaskNet//conv13_upsample/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/moving_mean/read"
  op: "Identity"
  input: "MaskNet//conv13_upsample/batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "MaskNet//conv13_upsample/batch_normalization/moving_variance"
  input: "MaskNet//conv13_upsample/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/moving_variance/read"
  op: "Identity"
  input: "MaskNet//conv13_upsample/batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MaskNet/conv13_upsample/conv13_upsample_conv/BiasAdd"
  input: "MaskNet//conv13_upsample/batch_normalization/gamma/read"
  input: "MaskNet//conv13_upsample/batch_normalization/beta/read"
  input: "MaskNet//conv13_upsample/batch_normalization/moving_mean/read"
  input: "MaskNet//conv13_upsample/batch_normalization/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MaskNet/conv13_upsample/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "MaskNet/conv13_upsample/Elu"
  op: "Elu"
  input: "MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv14/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv14/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.07216878235340118
      }
    }
  }
}
node {
  name: "MaskNet//conv14/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.07216878235340118
      }
    }
  }
}
node {
  name: "MaskNet//conv14/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "MaskNet//conv14/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 582
    }
  }
}
node {
  name: "MaskNet//conv14/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "MaskNet//conv14/kernel/Initializer/random_uniform/max"
  input: "MaskNet//conv14/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv14/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "MaskNet//conv14/kernel/Initializer/random_uniform/RandomUniform"
  input: "MaskNet//conv14/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv14/kernel/Initializer/random_uniform"
  op: "Add"
  input: "MaskNet//conv14/kernel/Initializer/random_uniform/mul"
  input: "MaskNet//conv14/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv14/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv14/kernel/Assign"
  op: "Assign"
  input: "MaskNet//conv14/kernel"
  input: "MaskNet//conv14/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv14/kernel/read"
  op: "Identity"
  input: "MaskNet//conv14/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv14/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv14/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv14/bias/Assign"
  op: "Assign"
  input: "MaskNet//conv14/bias"
  input: "MaskNet//conv14/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv14/bias/read"
  op: "Identity"
  input: "MaskNet//conv14/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv14/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv14/Conv2D"
  op: "Conv2D"
  input: "MaskNet/conv13_upsample/Elu"
  input: "MaskNet//conv14/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet/conv14/BiasAdd"
  op: "BiasAdd"
  input: "MaskNet/conv14/Conv2D"
  input: "MaskNet//conv14/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/gamma/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_12/gamma"
  input: "MaskNet//batch_normalization_12/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/gamma/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_12/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/beta/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_12/beta"
  input: "MaskNet//batch_normalization_12/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/beta/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_12/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/moving_mean/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_12/moving_mean"
  input: "MaskNet//batch_normalization_12/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/moving_mean/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_12/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/moving_variance/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_12/moving_variance"
  input: "MaskNet//batch_normalization_12/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/moving_variance/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_12/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/batch_normalization_12/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MaskNet/conv14/BiasAdd"
  input: "MaskNet//batch_normalization_12/gamma/read"
  input: "MaskNet//batch_normalization_12/beta/read"
  input: "MaskNet//batch_normalization_12/moving_mean/read"
  input: "MaskNet//batch_normalization_12/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MaskNet/batch_normalization_12/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "MaskNet/Elu_12"
  op: "Elu"
  input: "MaskNet/batch_normalization_12/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/add_1"
  op: "Add"
  input: "MaskNet/Elu_12"
  input: "MaskNet/Elu_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv15_upsample/resize/ResizeNearestNeighbor/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\300\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv15_upsample/resize/ResizeNearestNeighbor"
  op: "ResizeNearestNeighbor"
  input: "MaskNet/add_1"
  input: "MaskNet/conv15_upsample/resize/ResizeNearestNeighbor/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "align_corners"
    value {
      b: true
    }
  }
  attr {
    key: "half_pixel_centers"
    value {
      b: false
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0833333358168602
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0833333358168602
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 621
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Initializer/random_uniform/max"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Initializer/random_uniform/RandomUniform"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Initializer/random_uniform"
  op: "Add"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Initializer/random_uniform/mul"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Assign"
  op: "Assign"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/read"
  op: "Identity"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/Assign"
  op: "Assign"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/bias"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/read"
  op: "Identity"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv15_upsample/conv15_upsample_conv/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv15_upsample/conv15_upsample_conv/Conv2D"
  op: "Conv2D"
  input: "MaskNet/conv15_upsample/resize/ResizeNearestNeighbor"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet/conv15_upsample/conv15_upsample_conv/BiasAdd"
  op: "BiasAdd"
  input: "MaskNet/conv15_upsample/conv15_upsample_conv/Conv2D"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/gamma/Assign"
  op: "Assign"
  input: "MaskNet//conv15_upsample/batch_normalization/gamma"
  input: "MaskNet//conv15_upsample/batch_normalization/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/gamma/read"
  op: "Identity"
  input: "MaskNet//conv15_upsample/batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/beta/Assign"
  op: "Assign"
  input: "MaskNet//conv15_upsample/batch_normalization/beta"
  input: "MaskNet//conv15_upsample/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/beta/read"
  op: "Identity"
  input: "MaskNet//conv15_upsample/batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "MaskNet//conv15_upsample/batch_normalization/moving_mean"
  input: "MaskNet//conv15_upsample/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/moving_mean/read"
  op: "Identity"
  input: "MaskNet//conv15_upsample/batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "MaskNet//conv15_upsample/batch_normalization/moving_variance"
  input: "MaskNet//conv15_upsample/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/moving_variance/read"
  op: "Identity"
  input: "MaskNet//conv15_upsample/batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MaskNet/conv15_upsample/conv15_upsample_conv/BiasAdd"
  input: "MaskNet//conv15_upsample/batch_normalization/gamma/read"
  input: "MaskNet//conv15_upsample/batch_normalization/beta/read"
  input: "MaskNet//conv15_upsample/batch_normalization/moving_mean/read"
  input: "MaskNet//conv15_upsample/batch_normalization/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MaskNet/conv15_upsample/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "MaskNet/conv15_upsample/Elu"
  op: "Elu"
  input: "MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/add_2"
  op: "Add"
  input: "MaskNet/conv15_upsample/Elu"
  input: "MaskNet/Elu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv16/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv16/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1178511306643486
      }
    }
  }
}
node {
  name: "MaskNet//conv16/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1178511306643486
      }
    }
  }
}
node {
  name: "MaskNet//conv16/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "MaskNet//conv16/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 658
    }
  }
}
node {
  name: "MaskNet//conv16/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "MaskNet//conv16/kernel/Initializer/random_uniform/max"
  input: "MaskNet//conv16/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv16/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "MaskNet//conv16/kernel/Initializer/random_uniform/RandomUniform"
  input: "MaskNet//conv16/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv16/kernel/Initializer/random_uniform"
  op: "Add"
  input: "MaskNet//conv16/kernel/Initializer/random_uniform/mul"
  input: "MaskNet//conv16/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv16/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv16/kernel/Assign"
  op: "Assign"
  input: "MaskNet//conv16/kernel"
  input: "MaskNet//conv16/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv16/kernel/read"
  op: "Identity"
  input: "MaskNet//conv16/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv16/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv16/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv16/bias/Assign"
  op: "Assign"
  input: "MaskNet//conv16/bias"
  input: "MaskNet//conv16/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv16/bias/read"
  op: "Identity"
  input: "MaskNet//conv16/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv16/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv16/Conv2D"
  op: "Conv2D"
  input: "MaskNet/add_2"
  input: "MaskNet//conv16/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet/conv16/BiasAdd"
  op: "BiasAdd"
  input: "MaskNet/conv16/Conv2D"
  input: "MaskNet//conv16/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/gamma/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_13/gamma"
  input: "MaskNet//batch_normalization_13/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/gamma/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_13/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/beta/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_13/beta"
  input: "MaskNet//batch_normalization_13/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/beta/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_13/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/moving_mean/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_13/moving_mean"
  input: "MaskNet//batch_normalization_13/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/moving_mean/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_13/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/moving_variance/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_13/moving_variance"
  input: "MaskNet//batch_normalization_13/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/moving_variance/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_13/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/batch_normalization_13/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MaskNet/conv16/BiasAdd"
  input: "MaskNet//batch_normalization_13/gamma/read"
  input: "MaskNet//batch_normalization_13/beta/read"
  input: "MaskNet//batch_normalization_13/moving_mean/read"
  input: "MaskNet//batch_normalization_13/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MaskNet/batch_normalization_13/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "MaskNet/Elu_13"
  op: "Elu"
  input: "MaskNet/batch_normalization_13/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv17/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\020\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv17/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1873171627521515
      }
    }
  }
}
node {
  name: "MaskNet//conv17/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1873171627521515
      }
    }
  }
}
node {
  name: "MaskNet//conv17/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "MaskNet//conv17/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 694
    }
  }
}
node {
  name: "MaskNet//conv17/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "MaskNet//conv17/kernel/Initializer/random_uniform/max"
  input: "MaskNet//conv17/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv17/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "MaskNet//conv17/kernel/Initializer/random_uniform/RandomUniform"
  input: "MaskNet//conv17/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv17/kernel/Initializer/random_uniform"
  op: "Add"
  input: "MaskNet//conv17/kernel/Initializer/random_uniform/mul"
  input: "MaskNet//conv17/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv17/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 16
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv17/kernel/Assign"
  op: "Assign"
  input: "MaskNet//conv17/kernel"
  input: "MaskNet//conv17/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv17/kernel/read"
  op: "Identity"
  input: "MaskNet//conv17/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv17/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv17/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv17/bias/Assign"
  op: "Assign"
  input: "MaskNet//conv17/bias"
  input: "MaskNet//conv17/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv17/bias/read"
  op: "Identity"
  input: "MaskNet//conv17/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/conv17/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet/conv17/Conv2D"
  op: "Conv2D"
  input: "MaskNet/Elu_13"
  input: "MaskNet//conv17/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet/conv17/BiasAdd"
  op: "BiasAdd"
  input: "MaskNet/conv17/Conv2D"
  input: "MaskNet//conv17/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/gamma/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_14/gamma"
  input: "MaskNet//batch_normalization_14/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/gamma/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_14/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/beta/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_14/beta"
  input: "MaskNet//batch_normalization_14/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/beta/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_14/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/moving_mean/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_14/moving_mean"
  input: "MaskNet//batch_normalization_14/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/moving_mean/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_14/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/moving_variance/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_14/moving_variance"
  input: "MaskNet//batch_normalization_14/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/moving_variance/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_14/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet/batch_normalization_14/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MaskNet/conv17/BiasAdd"
  input: "MaskNet//batch_normalization_14/gamma/read"
  input: "MaskNet//batch_normalization_14/beta/read"
  input: "MaskNet//batch_normalization_14/moving_mean/read"
  input: "MaskNet//batch_normalization_14/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MaskNet/batch_normalization_14/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "MaskNet/Identity"
  op: "Identity"
  input: "MaskNet/batch_normalization_14/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "sub"
  op: "Sub"
  input: "MaskNet/Identity"
  input: "resize/ResizeBilinear"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "Abs"
  op: "Abs"
  input: "sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "Abs"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/global_step/initial_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/global_step"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/global_step/Assign"
  op: "Assign"
  input: "train_op/global_step"
  input: "train_op/global_step/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/global_step/read"
  op: "Identity"
  input: "train_op/global_step"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "train_op/gradients/Fill"
  op: "Fill"
  input: "train_op/gradients/Shape"
  input: "train_op/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/Mean_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/Mean_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/Fill"
  input: "train_op/gradients/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Mean_grad/Shape"
  op: "Shape"
  input: "Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/Mean_grad/Tile"
  op: "Tile"
  input: "train_op/gradients/Mean_grad/Reshape"
  input: "train_op/gradients/Mean_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Mean_grad/Shape_1"
  op: "Shape"
  input: "Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/Mean_grad/Shape_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/gradients/Mean_grad/Prod"
  op: "Prod"
  input: "train_op/gradients/Mean_grad/Shape_1"
  input: "train_op/gradients/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/gradients/Mean_grad/Prod_1"
  op: "Prod"
  input: "train_op/gradients/Mean_grad/Shape_2"
  input: "train_op/gradients/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/Mean_grad/Maximum"
  op: "Maximum"
  input: "train_op/gradients/Mean_grad/Prod_1"
  input: "train_op/gradients/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "train_op/gradients/Mean_grad/Prod"
  input: "train_op/gradients/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Mean_grad/Cast"
  op: "Cast"
  input: "train_op/gradients/Mean_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Mean_grad/truediv"
  op: "RealDiv"
  input: "train_op/gradients/Mean_grad/Tile"
  input: "train_op/gradients/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Abs_grad/Sign"
  op: "Sign"
  input: "sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Abs_grad/mul"
  op: "Mul"
  input: "train_op/gradients/Mean_grad/truediv"
  input: "train_op/gradients/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/sub_grad/Shape"
  op: "Shape"
  input: "MaskNet/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/sub_grad/Shape_1"
  op: "Shape"
  input: "resize/ResizeBilinear"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/sub_grad/Shape"
  input: "train_op/gradients/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/sub_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/Abs_grad/mul"
  input: "train_op/gradients/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/sub_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/sub_grad/Sum"
  input: "train_op/gradients/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/sub_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/Abs_grad/mul"
  input: "train_op/gradients/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/sub_grad/Neg"
  op: "Neg"
  input: "train_op/gradients/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/sub_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/sub_grad/Neg"
  input: "train_op/gradients/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/sub_grad/Reshape"
  input: "^train_op/gradients/sub_grad/Reshape_1"
}
node {
  name: "train_op/gradients/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/sub_grad/Reshape"
  input: "^train_op/gradients/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/sub_grad/Reshape_1"
  input: "^train_op/gradients/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_14/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_1"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_14/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_2"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_14/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_3"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_14/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_14/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "train_op/gradients/sub_grad/tuple/control_dependency"
  input: "MaskNet/conv17/BiasAdd"
  input: "MaskNet//batch_normalization_14/gamma/read"
  input: "MaskNet//batch_normalization_14/moving_mean/read"
  input: "MaskNet//batch_normalization_14/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_14/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_14/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_14/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_14/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^train_op/gradients/MaskNet/batch_normalization_14/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_14/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_14/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_14/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^train_op/gradients/MaskNet/batch_normalization_14/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_14/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_14/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_14/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^train_op/gradients/MaskNet/batch_normalization_14/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_14/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv17/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/MaskNet/batch_normalization_14/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv17/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_14/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv17/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/MaskNet/conv17/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_14/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv17/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_14/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv17/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv17/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/MaskNet/conv17/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv17/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv17/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "MaskNet/Elu_13"
  input: "MaskNet//conv17/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv17/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "train_op/gradients/MaskNet/conv17/Conv2D_grad/ShapeN"
  input: "MaskNet//conv17/kernel/read"
  input: "train_op/gradients/MaskNet/conv17/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv17/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "MaskNet/Elu_13"
  input: "train_op/gradients/MaskNet/conv17/Conv2D_grad/ShapeN:1"
  input: "train_op/gradients/MaskNet/conv17/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv17/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/conv17/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv17/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "train_op/gradients/MaskNet/conv17/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv17/Conv2D_grad/Conv2DBackpropInput"
  input: "^train_op/gradients/MaskNet/conv17/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv17/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv17/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv17/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv17/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv17/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/Elu_13_grad/EluGrad"
  op: "EluGrad"
  input: "train_op/gradients/MaskNet/conv17/Conv2D_grad/tuple/control_dependency"
  input: "MaskNet/Elu_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_4"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_13/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_5"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_13/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_6"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_13/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_7"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_13/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_13/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "train_op/gradients/MaskNet/Elu_13_grad/EluGrad"
  input: "MaskNet/conv16/BiasAdd"
  input: "MaskNet//batch_normalization_13/gamma/read"
  input: "MaskNet//batch_normalization_13/moving_mean/read"
  input: "MaskNet//batch_normalization_13/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_13/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_13/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_13/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_13/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^train_op/gradients/MaskNet/batch_normalization_13/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_13/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_13/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_13/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^train_op/gradients/MaskNet/batch_normalization_13/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_13/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_13/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_13/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^train_op/gradients/MaskNet/batch_normalization_13/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_13/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv16/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/MaskNet/batch_normalization_13/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv16/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_13/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv16/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/MaskNet/conv16/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_13/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv16/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_13/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv16/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv16/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/MaskNet/conv16/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv16/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv16/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "MaskNet/add_2"
  input: "MaskNet//conv16/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv16/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "train_op/gradients/MaskNet/conv16/Conv2D_grad/ShapeN"
  input: "MaskNet//conv16/kernel/read"
  input: "train_op/gradients/MaskNet/conv16/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv16/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "MaskNet/add_2"
  input: "train_op/gradients/MaskNet/conv16/Conv2D_grad/ShapeN:1"
  input: "train_op/gradients/MaskNet/conv16/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv16/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/conv16/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv16/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "train_op/gradients/MaskNet/conv16/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv16/Conv2D_grad/Conv2DBackpropInput"
  input: "^train_op/gradients/MaskNet/conv16/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv16/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv16/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv16/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv16/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv16/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/add_2_grad/Shape"
  op: "Shape"
  input: "MaskNet/conv15_upsample/Elu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/add_2_grad/Shape_1"
  op: "Shape"
  input: "MaskNet/Elu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/MaskNet/add_2_grad/Shape"
  input: "train_op/gradients/MaskNet/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/add_2_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/MaskNet/conv16/Conv2D_grad/tuple/control_dependency"
  input: "train_op/gradients/MaskNet/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/add_2_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/MaskNet/add_2_grad/Sum"
  input: "train_op/gradients/MaskNet/add_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/add_2_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/MaskNet/conv16/Conv2D_grad/tuple/control_dependency"
  input: "train_op/gradients/MaskNet/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/MaskNet/add_2_grad/Sum_1"
  input: "train_op/gradients/MaskNet/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/add_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/add_2_grad/Reshape"
  input: "^train_op/gradients/MaskNet/add_2_grad/Reshape_1"
}
node {
  name: "train_op/gradients/MaskNet/add_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/add_2_grad/Reshape"
  input: "^train_op/gradients/MaskNet/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/add_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/add_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/add_2_grad/Reshape_1"
  input: "^train_op/gradients/MaskNet/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/add_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv15_upsample/Elu_grad/EluGrad"
  op: "EluGrad"
  input: "train_op/gradients/MaskNet/add_2_grad/tuple/control_dependency"
  input: "MaskNet/conv15_upsample/Elu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_8"
  op: "ZerosLike"
  input: "MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_9"
  op: "ZerosLike"
  input: "MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_10"
  op: "ZerosLike"
  input: "MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_11"
  op: "ZerosLike"
  input: "MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "train_op/gradients/MaskNet/conv15_upsample/Elu_grad/EluGrad"
  input: "MaskNet/conv15_upsample/conv15_upsample_conv/BiasAdd"
  input: "MaskNet//conv15_upsample/batch_normalization/gamma/read"
  input: "MaskNet//conv15_upsample/batch_normalization/moving_mean/read"
  input: "MaskNet//conv15_upsample/batch_normalization/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "train_op/gradients/MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^train_op/gradients/MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^train_op/gradients/MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^train_op/gradients/MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "MaskNet/conv15_upsample/resize/ResizeNearestNeighbor"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/Conv2D_grad/ShapeN"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/read"
  input: "train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "MaskNet/conv15_upsample/resize/ResizeNearestNeighbor"
  input: "train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/Conv2D_grad/ShapeN:1"
  input: "train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/Conv2D_grad/Conv2DBackpropInput"
  input: "^train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv15_upsample/resize/ResizeNearestNeighbor_grad/ResizeNearestNeighborGrad/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "`\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv15_upsample/resize/ResizeNearestNeighbor_grad/ResizeNearestNeighborGrad"
  op: "ResizeNearestNeighborGrad"
  input: "train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/Conv2D_grad/tuple/control_dependency"
  input: "train_op/gradients/MaskNet/conv15_upsample/resize/ResizeNearestNeighbor_grad/ResizeNearestNeighborGrad/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "align_corners"
    value {
      b: true
    }
  }
  attr {
    key: "half_pixel_centers"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/add_1_grad/Shape"
  op: "Shape"
  input: "MaskNet/Elu_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/add_1_grad/Shape_1"
  op: "Shape"
  input: "MaskNet/Elu_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/MaskNet/add_1_grad/Shape"
  input: "train_op/gradients/MaskNet/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/add_1_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/MaskNet/conv15_upsample/resize/ResizeNearestNeighbor_grad/ResizeNearestNeighborGrad"
  input: "train_op/gradients/MaskNet/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/add_1_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/MaskNet/add_1_grad/Sum"
  input: "train_op/gradients/MaskNet/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/add_1_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/MaskNet/conv15_upsample/resize/ResizeNearestNeighbor_grad/ResizeNearestNeighborGrad"
  input: "train_op/gradients/MaskNet/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/MaskNet/add_1_grad/Sum_1"
  input: "train_op/gradients/MaskNet/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/add_1_grad/Reshape"
  input: "^train_op/gradients/MaskNet/add_1_grad/Reshape_1"
}
node {
  name: "train_op/gradients/MaskNet/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/add_1_grad/Reshape"
  input: "^train_op/gradients/MaskNet/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/add_1_grad/Reshape_1"
  input: "^train_op/gradients/MaskNet/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/Elu_12_grad/EluGrad"
  op: "EluGrad"
  input: "train_op/gradients/MaskNet/add_1_grad/tuple/control_dependency"
  input: "MaskNet/Elu_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_12"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_12/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_13"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_12/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_14"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_12/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_15"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_12/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_12/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "train_op/gradients/MaskNet/Elu_12_grad/EluGrad"
  input: "MaskNet/conv14/BiasAdd"
  input: "MaskNet//batch_normalization_12/gamma/read"
  input: "MaskNet//batch_normalization_12/moving_mean/read"
  input: "MaskNet//batch_normalization_12/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_12/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_12/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_12/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_12/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^train_op/gradients/MaskNet/batch_normalization_12/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_12/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_12/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_12/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^train_op/gradients/MaskNet/batch_normalization_12/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_12/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_12/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_12/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^train_op/gradients/MaskNet/batch_normalization_12/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_12/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv14/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/MaskNet/batch_normalization_12/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv14/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_12/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv14/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/MaskNet/conv14/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_12/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv14/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_12/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv14/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv14/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/MaskNet/conv14/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv14/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv14/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "MaskNet/conv13_upsample/Elu"
  input: "MaskNet//conv14/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv14/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "train_op/gradients/MaskNet/conv14/Conv2D_grad/ShapeN"
  input: "MaskNet//conv14/kernel/read"
  input: "train_op/gradients/MaskNet/conv14/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv14/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "MaskNet/conv13_upsample/Elu"
  input: "train_op/gradients/MaskNet/conv14/Conv2D_grad/ShapeN:1"
  input: "train_op/gradients/MaskNet/conv14/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv14/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/conv14/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv14/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "train_op/gradients/MaskNet/conv14/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv14/Conv2D_grad/Conv2DBackpropInput"
  input: "^train_op/gradients/MaskNet/conv14/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv14/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv14/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv14/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv14/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv14/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv13_upsample/Elu_grad/EluGrad"
  op: "EluGrad"
  input: "train_op/gradients/MaskNet/conv14/Conv2D_grad/tuple/control_dependency"
  input: "MaskNet/conv13_upsample/Elu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_16"
  op: "ZerosLike"
  input: "MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_17"
  op: "ZerosLike"
  input: "MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_18"
  op: "ZerosLike"
  input: "MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_19"
  op: "ZerosLike"
  input: "MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "train_op/gradients/MaskNet/conv13_upsample/Elu_grad/EluGrad"
  input: "MaskNet/conv13_upsample/conv13_upsample_conv/BiasAdd"
  input: "MaskNet//conv13_upsample/batch_normalization/gamma/read"
  input: "MaskNet//conv13_upsample/batch_normalization/moving_mean/read"
  input: "MaskNet//conv13_upsample/batch_normalization/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "train_op/gradients/MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^train_op/gradients/MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^train_op/gradients/MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^train_op/gradients/MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "MaskNet/conv13_upsample/resize/ResizeNearestNeighbor"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/Conv2D_grad/ShapeN"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/read"
  input: "train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "MaskNet/conv13_upsample/resize/ResizeNearestNeighbor"
  input: "train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/Conv2D_grad/ShapeN:1"
  input: "train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/Conv2D_grad/Conv2DBackpropInput"
  input: "^train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv13_upsample/resize/ResizeNearestNeighbor_grad/ResizeNearestNeighborGrad/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "0\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv13_upsample/resize/ResizeNearestNeighbor_grad/ResizeNearestNeighborGrad"
  op: "ResizeNearestNeighborGrad"
  input: "train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/Conv2D_grad/tuple/control_dependency"
  input: "train_op/gradients/MaskNet/conv13_upsample/resize/ResizeNearestNeighbor_grad/ResizeNearestNeighborGrad/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "align_corners"
    value {
      b: true
    }
  }
  attr {
    key: "half_pixel_centers"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/Elu_11_grad/EluGrad"
  op: "EluGrad"
  input: "train_op/gradients/MaskNet/conv13_upsample/resize/ResizeNearestNeighbor_grad/ResizeNearestNeighborGrad"
  input: "MaskNet/Elu_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_20"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_11/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_21"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_11/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_22"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_11/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_23"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_11/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_11/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "train_op/gradients/MaskNet/Elu_11_grad/EluGrad"
  input: "MaskNet/conv12/BiasAdd"
  input: "MaskNet//batch_normalization_11/gamma/read"
  input: "MaskNet//batch_normalization_11/moving_mean/read"
  input: "MaskNet//batch_normalization_11/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_11/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_11/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_11/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_11/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^train_op/gradients/MaskNet/batch_normalization_11/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_11/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_11/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_11/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^train_op/gradients/MaskNet/batch_normalization_11/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_11/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_11/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_11/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^train_op/gradients/MaskNet/batch_normalization_11/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_11/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv12/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/MaskNet/batch_normalization_11/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv12/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_11/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv12/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/MaskNet/conv12/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_11/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv12/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_11/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv12/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv12/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/MaskNet/conv12/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv12/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv12/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "MaskNet/add"
  input: "MaskNet//conv12/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv12/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "train_op/gradients/MaskNet/conv12/Conv2D_grad/ShapeN"
  input: "MaskNet//conv12/kernel/read"
  input: "train_op/gradients/MaskNet/conv12/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv12/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "MaskNet/add"
  input: "train_op/gradients/MaskNet/conv12/Conv2D_grad/ShapeN:1"
  input: "train_op/gradients/MaskNet/conv12/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv12/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/conv12/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv12/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "train_op/gradients/MaskNet/conv12/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv12/Conv2D_grad/Conv2DBackpropInput"
  input: "^train_op/gradients/MaskNet/conv12/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv12/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv12/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv12/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv12/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv12/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/add_grad/Shape"
  op: "Shape"
  input: "MaskNet/Elu_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/add_grad/Shape_1"
  op: "Shape"
  input: "MaskNet/Elu_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/MaskNet/add_grad/Shape"
  input: "train_op/gradients/MaskNet/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/add_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/MaskNet/conv12/Conv2D_grad/tuple/control_dependency"
  input: "train_op/gradients/MaskNet/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/add_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/MaskNet/add_grad/Sum"
  input: "train_op/gradients/MaskNet/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/add_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/MaskNet/conv12/Conv2D_grad/tuple/control_dependency"
  input: "train_op/gradients/MaskNet/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/add_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/MaskNet/add_grad/Sum_1"
  input: "train_op/gradients/MaskNet/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/add_grad/Reshape"
  input: "^train_op/gradients/MaskNet/add_grad/Reshape_1"
}
node {
  name: "train_op/gradients/MaskNet/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/add_grad/Reshape"
  input: "^train_op/gradients/MaskNet/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/add_grad/Reshape_1"
  input: "^train_op/gradients/MaskNet/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/Elu_10_grad/EluGrad"
  op: "EluGrad"
  input: "train_op/gradients/MaskNet/add_grad/tuple/control_dependency"
  input: "MaskNet/Elu_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_24"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_10/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_25"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_10/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_26"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_10/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_27"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_10/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_10/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "train_op/gradients/MaskNet/Elu_10_grad/EluGrad"
  input: "MaskNet/conv11/BiasAdd"
  input: "MaskNet//batch_normalization_10/gamma/read"
  input: "MaskNet//batch_normalization_10/moving_mean/read"
  input: "MaskNet//batch_normalization_10/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_10/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_10/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_10/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_10/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^train_op/gradients/MaskNet/batch_normalization_10/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_10/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_10/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_10/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^train_op/gradients/MaskNet/batch_normalization_10/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_10/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_10/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_10/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^train_op/gradients/MaskNet/batch_normalization_10/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_10/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv11/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/MaskNet/batch_normalization_10/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv11/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_10/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv11/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/MaskNet/conv11/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_10/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv11/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_10/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv11/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv11/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/MaskNet/conv11/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv11/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv11/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "MaskNet/Elu_9"
  input: "MaskNet//conv11/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv11/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "train_op/gradients/MaskNet/conv11/Conv2D_grad/ShapeN"
  input: "MaskNet//conv11/kernel/read"
  input: "train_op/gradients/MaskNet/conv11/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv11/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "MaskNet/Elu_9"
  input: "train_op/gradients/MaskNet/conv11/Conv2D_grad/ShapeN:1"
  input: "train_op/gradients/MaskNet/conv11/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv11/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/conv11/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv11/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "train_op/gradients/MaskNet/conv11/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv11/Conv2D_grad/Conv2DBackpropInput"
  input: "^train_op/gradients/MaskNet/conv11/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv11/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv11/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv11/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv11/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv11/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/Elu_9_grad/EluGrad"
  op: "EluGrad"
  input: "train_op/gradients/MaskNet/conv11/Conv2D_grad/tuple/control_dependency"
  input: "MaskNet/Elu_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_28"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_9/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_29"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_9/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_30"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_9/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_31"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_9/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_9/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "train_op/gradients/MaskNet/Elu_9_grad/EluGrad"
  input: "MaskNet/conv10_atrous/BiasAdd"
  input: "MaskNet//batch_normalization_9/gamma/read"
  input: "MaskNet//batch_normalization_9/moving_mean/read"
  input: "MaskNet//batch_normalization_9/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_9/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_9/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_9/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_9/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^train_op/gradients/MaskNet/batch_normalization_9/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_9/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_9/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_9/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^train_op/gradients/MaskNet/batch_normalization_9/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_9/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_9/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_9/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^train_op/gradients/MaskNet/batch_normalization_9/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_9/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv10_atrous/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/MaskNet/batch_normalization_9/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv10_atrous/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_9/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv10_atrous/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/MaskNet/conv10_atrous/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_9/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv10_atrous/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_9/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv10_atrous/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv10_atrous/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/MaskNet/conv10_atrous/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv10_atrous/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv10_atrous/BatchToSpaceND_grad/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "train_op/gradients/MaskNet/conv10_atrous/BiasAdd_grad/tuple/control_dependency"
  input: "MaskNet/conv10_atrous/BatchToSpaceND/block_shape"
  input: "MaskNet/conv10_atrous/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
          dim {
            size: 6
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv10_atrous/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "MaskNet/conv10_atrous/SpaceToBatchND"
  input: "MaskNet//conv10_atrous/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv10_atrous/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "train_op/gradients/MaskNet/conv10_atrous/Conv2D_grad/ShapeN"
  input: "MaskNet//conv10_atrous/kernel/read"
  input: "train_op/gradients/MaskNet/conv10_atrous/BatchToSpaceND_grad/SpaceToBatchND"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv10_atrous/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "MaskNet/conv10_atrous/SpaceToBatchND"
  input: "train_op/gradients/MaskNet/conv10_atrous/Conv2D_grad/ShapeN:1"
  input: "train_op/gradients/MaskNet/conv10_atrous/BatchToSpaceND_grad/SpaceToBatchND"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv10_atrous/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/conv10_atrous/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv10_atrous/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "train_op/gradients/MaskNet/conv10_atrous/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv10_atrous/Conv2D_grad/Conv2DBackpropInput"
  input: "^train_op/gradients/MaskNet/conv10_atrous/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv10_atrous/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
          dim {
            size: 8
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv10_atrous/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv10_atrous/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv10_atrous/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv10_atrous/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv10_atrous/SpaceToBatchND_grad/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "train_op/gradients/MaskNet/conv10_atrous/Conv2D_grad/tuple/control_dependency"
  input: "MaskNet/conv10_atrous/SpaceToBatchND/block_shape"
  input: "MaskNet/conv10_atrous/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/Elu_8_grad/EluGrad"
  op: "EluGrad"
  input: "train_op/gradients/MaskNet/conv10_atrous/SpaceToBatchND_grad/BatchToSpaceND"
  input: "MaskNet/Elu_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_32"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_8/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_33"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_8/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_34"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_8/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_35"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_8/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_8/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "train_op/gradients/MaskNet/Elu_8_grad/EluGrad"
  input: "MaskNet/conv9_atrous/BiasAdd"
  input: "MaskNet//batch_normalization_8/gamma/read"
  input: "MaskNet//batch_normalization_8/moving_mean/read"
  input: "MaskNet//batch_normalization_8/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_8/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_8/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_8/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_8/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^train_op/gradients/MaskNet/batch_normalization_8/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_8/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_8/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_8/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^train_op/gradients/MaskNet/batch_normalization_8/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_8/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_8/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_8/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^train_op/gradients/MaskNet/batch_normalization_8/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_8/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv9_atrous/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/MaskNet/batch_normalization_8/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv9_atrous/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_8/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv9_atrous/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/MaskNet/conv9_atrous/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_8/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv9_atrous/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_8/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv9_atrous/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv9_atrous/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/MaskNet/conv9_atrous/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv9_atrous/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv9_atrous/BatchToSpaceND_grad/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "train_op/gradients/MaskNet/conv9_atrous/BiasAdd_grad/tuple/control_dependency"
  input: "MaskNet/conv9_atrous/BatchToSpaceND/block_shape"
  input: "MaskNet/conv9_atrous/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
          dim {
            size: 12
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv9_atrous/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "MaskNet/conv9_atrous/SpaceToBatchND"
  input: "MaskNet//conv9_atrous/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv9_atrous/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "train_op/gradients/MaskNet/conv9_atrous/Conv2D_grad/ShapeN"
  input: "MaskNet//conv9_atrous/kernel/read"
  input: "train_op/gradients/MaskNet/conv9_atrous/BatchToSpaceND_grad/SpaceToBatchND"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 14
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv9_atrous/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "MaskNet/conv9_atrous/SpaceToBatchND"
  input: "train_op/gradients/MaskNet/conv9_atrous/Conv2D_grad/ShapeN:1"
  input: "train_op/gradients/MaskNet/conv9_atrous/BatchToSpaceND_grad/SpaceToBatchND"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv9_atrous/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/conv9_atrous/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv9_atrous/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "train_op/gradients/MaskNet/conv9_atrous/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv9_atrous/Conv2D_grad/Conv2DBackpropInput"
  input: "^train_op/gradients/MaskNet/conv9_atrous/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv9_atrous/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 14
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv9_atrous/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv9_atrous/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv9_atrous/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv9_atrous/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv9_atrous/SpaceToBatchND_grad/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "train_op/gradients/MaskNet/conv9_atrous/Conv2D_grad/tuple/control_dependency"
  input: "MaskNet/conv9_atrous/SpaceToBatchND/block_shape"
  input: "MaskNet/conv9_atrous/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/Elu_7_grad/EluGrad"
  op: "EluGrad"
  input: "train_op/gradients/MaskNet/conv9_atrous/SpaceToBatchND_grad/BatchToSpaceND"
  input: "MaskNet/Elu_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_36"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_7/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_37"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_7/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_38"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_7/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_39"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_7/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_7/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "train_op/gradients/MaskNet/Elu_7_grad/EluGrad"
  input: "MaskNet/conv8_atrous/BiasAdd"
  input: "MaskNet//batch_normalization_7/gamma/read"
  input: "MaskNet//batch_normalization_7/moving_mean/read"
  input: "MaskNet//batch_normalization_7/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_7/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_7/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_7/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_7/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^train_op/gradients/MaskNet/batch_normalization_7/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_7/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_7/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_7/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^train_op/gradients/MaskNet/batch_normalization_7/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_7/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_7/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_7/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^train_op/gradients/MaskNet/batch_normalization_7/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_7/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv8_atrous/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/MaskNet/batch_normalization_7/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv8_atrous/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_7/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv8_atrous/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/MaskNet/conv8_atrous/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_7/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv8_atrous/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_7/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv8_atrous/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv8_atrous/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/MaskNet/conv8_atrous/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv8_atrous/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv8_atrous/BatchToSpaceND_grad/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "train_op/gradients/MaskNet/conv8_atrous/BiasAdd_grad/tuple/control_dependency"
  input: "MaskNet/conv8_atrous/BatchToSpaceND/block_shape"
  input: "MaskNet/conv8_atrous/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
          dim {
            size: 24
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv8_atrous/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "MaskNet/conv8_atrous/SpaceToBatchND"
  input: "MaskNet//conv8_atrous/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv8_atrous/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "train_op/gradients/MaskNet/conv8_atrous/Conv2D_grad/ShapeN"
  input: "MaskNet//conv8_atrous/kernel/read"
  input: "train_op/gradients/MaskNet/conv8_atrous/BatchToSpaceND_grad/SpaceToBatchND"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 26
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv8_atrous/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "MaskNet/conv8_atrous/SpaceToBatchND"
  input: "train_op/gradients/MaskNet/conv8_atrous/Conv2D_grad/ShapeN:1"
  input: "train_op/gradients/MaskNet/conv8_atrous/BatchToSpaceND_grad/SpaceToBatchND"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv8_atrous/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/conv8_atrous/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv8_atrous/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "train_op/gradients/MaskNet/conv8_atrous/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv8_atrous/Conv2D_grad/Conv2DBackpropInput"
  input: "^train_op/gradients/MaskNet/conv8_atrous/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv8_atrous/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 14
          }
          dim {
            size: 26
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv8_atrous/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv8_atrous/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv8_atrous/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv8_atrous/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv8_atrous/SpaceToBatchND_grad/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "train_op/gradients/MaskNet/conv8_atrous/Conv2D_grad/tuple/control_dependency"
  input: "MaskNet/conv8_atrous/SpaceToBatchND/block_shape"
  input: "MaskNet/conv8_atrous/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/Elu_6_grad/EluGrad"
  op: "EluGrad"
  input: "train_op/gradients/MaskNet/conv8_atrous/SpaceToBatchND_grad/BatchToSpaceND"
  input: "MaskNet/Elu_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_40"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_6/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_41"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_6/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_42"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_6/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_43"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_6/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_6/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "train_op/gradients/MaskNet/Elu_6_grad/EluGrad"
  input: "MaskNet/conv7_atrous/BiasAdd"
  input: "MaskNet//batch_normalization_6/gamma/read"
  input: "MaskNet//batch_normalization_6/moving_mean/read"
  input: "MaskNet//batch_normalization_6/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_6/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_6/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_6/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_6/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^train_op/gradients/MaskNet/batch_normalization_6/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_6/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_6/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_6/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^train_op/gradients/MaskNet/batch_normalization_6/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_6/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_6/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_6/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^train_op/gradients/MaskNet/batch_normalization_6/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_6/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv7_atrous/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/MaskNet/batch_normalization_6/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv7_atrous/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_6/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv7_atrous/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/MaskNet/conv7_atrous/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_6/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv7_atrous/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_6/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv7_atrous/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv7_atrous/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/MaskNet/conv7_atrous/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv7_atrous/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv7_atrous/BatchToSpaceND_grad/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "train_op/gradients/MaskNet/conv7_atrous/BiasAdd_grad/tuple/control_dependency"
  input: "MaskNet/conv7_atrous/BatchToSpaceND/block_shape"
  input: "MaskNet/conv7_atrous/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 48
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv7_atrous/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "MaskNet/conv7_atrous/SpaceToBatchND"
  input: "MaskNet//conv7_atrous/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv7_atrous/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "train_op/gradients/MaskNet/conv7_atrous/Conv2D_grad/ShapeN"
  input: "MaskNet//conv7_atrous/kernel/read"
  input: "train_op/gradients/MaskNet/conv7_atrous/BatchToSpaceND_grad/SpaceToBatchND"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 26
          }
          dim {
            size: 50
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv7_atrous/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "MaskNet/conv7_atrous/SpaceToBatchND"
  input: "train_op/gradients/MaskNet/conv7_atrous/Conv2D_grad/ShapeN:1"
  input: "train_op/gradients/MaskNet/conv7_atrous/BatchToSpaceND_grad/SpaceToBatchND"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv7_atrous/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/conv7_atrous/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv7_atrous/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "train_op/gradients/MaskNet/conv7_atrous/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv7_atrous/Conv2D_grad/Conv2DBackpropInput"
  input: "^train_op/gradients/MaskNet/conv7_atrous/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv7_atrous/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 26
          }
          dim {
            size: 50
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv7_atrous/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv7_atrous/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv7_atrous/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv7_atrous/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv7_atrous/SpaceToBatchND_grad/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "train_op/gradients/MaskNet/conv7_atrous/Conv2D_grad/tuple/control_dependency"
  input: "MaskNet/conv7_atrous/SpaceToBatchND/block_shape"
  input: "MaskNet/conv7_atrous/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/AddN"
  op: "AddN"
  input: "train_op/gradients/MaskNet/add_grad/tuple/control_dependency_1"
  input: "train_op/gradients/MaskNet/conv7_atrous/SpaceToBatchND_grad/BatchToSpaceND"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/Elu_5_grad/EluGrad"
  op: "EluGrad"
  input: "train_op/gradients/AddN"
  input: "MaskNet/Elu_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_44"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_5/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_45"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_5/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_46"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_5/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_47"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_5/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_5/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "train_op/gradients/MaskNet/Elu_5_grad/EluGrad"
  input: "MaskNet/conv6/BiasAdd"
  input: "MaskNet//batch_normalization_5/gamma/read"
  input: "MaskNet//batch_normalization_5/moving_mean/read"
  input: "MaskNet//batch_normalization_5/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_5/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_5/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_5/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_5/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^train_op/gradients/MaskNet/batch_normalization_5/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_5/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_5/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_5/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^train_op/gradients/MaskNet/batch_normalization_5/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_5/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_5/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_5/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^train_op/gradients/MaskNet/batch_normalization_5/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_5/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv6/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/MaskNet/batch_normalization_5/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv6/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_5/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv6/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/MaskNet/conv6/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_5/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv6/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_5/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv6/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv6/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/MaskNet/conv6/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv6/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv6/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "MaskNet/Elu_4"
  input: "MaskNet//conv6/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv6/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "train_op/gradients/MaskNet/conv6/Conv2D_grad/ShapeN"
  input: "MaskNet//conv6/kernel/read"
  input: "train_op/gradients/MaskNet/conv6/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv6/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "MaskNet/Elu_4"
  input: "train_op/gradients/MaskNet/conv6/Conv2D_grad/ShapeN:1"
  input: "train_op/gradients/MaskNet/conv6/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv6/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/conv6/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv6/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "train_op/gradients/MaskNet/conv6/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv6/Conv2D_grad/Conv2DBackpropInput"
  input: "^train_op/gradients/MaskNet/conv6/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv6/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv6/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv6/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv6/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv6/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/Elu_4_grad/EluGrad"
  op: "EluGrad"
  input: "train_op/gradients/MaskNet/conv6/Conv2D_grad/tuple/control_dependency"
  input: "MaskNet/Elu_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_48"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_4/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_49"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_4/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_50"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_4/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_51"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_4/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_4/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "train_op/gradients/MaskNet/Elu_4_grad/EluGrad"
  input: "MaskNet/conv5/BiasAdd"
  input: "MaskNet//batch_normalization_4/gamma/read"
  input: "MaskNet//batch_normalization_4/moving_mean/read"
  input: "MaskNet//batch_normalization_4/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_4/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_4/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_4/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_4/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^train_op/gradients/MaskNet/batch_normalization_4/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_4/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_4/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_4/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^train_op/gradients/MaskNet/batch_normalization_4/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_4/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_4/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_4/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^train_op/gradients/MaskNet/batch_normalization_4/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_4/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv5/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/MaskNet/batch_normalization_4/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv5/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_4/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv5/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/MaskNet/conv5/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_4/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv5/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_4/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv5/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv5/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/MaskNet/conv5/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv5/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv5/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "MaskNet/Elu_3"
  input: "MaskNet//conv5/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv5/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "train_op/gradients/MaskNet/conv5/Conv2D_grad/ShapeN"
  input: "MaskNet//conv5/kernel/read"
  input: "train_op/gradients/MaskNet/conv5/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv5/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "MaskNet/Elu_3"
  input: "train_op/gradients/MaskNet/conv5/Conv2D_grad/ShapeN:1"
  input: "train_op/gradients/MaskNet/conv5/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv5/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/conv5/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv5/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "train_op/gradients/MaskNet/conv5/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv5/Conv2D_grad/Conv2DBackpropInput"
  input: "^train_op/gradients/MaskNet/conv5/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv5/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv5/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv5/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv5/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv5/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/Elu_3_grad/EluGrad"
  op: "EluGrad"
  input: "train_op/gradients/MaskNet/conv5/Conv2D_grad/tuple/control_dependency"
  input: "MaskNet/Elu_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_52"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_3/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_53"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_3/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_54"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_3/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_55"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_3/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_3/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "train_op/gradients/MaskNet/Elu_3_grad/EluGrad"
  input: "MaskNet/conv4_downsample/BiasAdd"
  input: "MaskNet//batch_normalization_3/gamma/read"
  input: "MaskNet//batch_normalization_3/moving_mean/read"
  input: "MaskNet//batch_normalization_3/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_3/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_3/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_3/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_3/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^train_op/gradients/MaskNet/batch_normalization_3/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_3/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_3/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_3/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^train_op/gradients/MaskNet/batch_normalization_3/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_3/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_3/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_3/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^train_op/gradients/MaskNet/batch_normalization_3/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_3/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv4_downsample/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/MaskNet/batch_normalization_3/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv4_downsample/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_3/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv4_downsample/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/MaskNet/conv4_downsample/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_3/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv4_downsample/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_3/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 48
          }
          dim {
            size: 96
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv4_downsample/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv4_downsample/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/MaskNet/conv4_downsample/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv4_downsample/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv4_downsample/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "MaskNet/Elu_2"
  input: "MaskNet//conv4_downsample/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv4_downsample/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "train_op/gradients/MaskNet/conv4_downsample/Conv2D_grad/ShapeN"
  input: "MaskNet//conv4_downsample/kernel/read"
  input: "train_op/gradients/MaskNet/conv4_downsample/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv4_downsample/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "MaskNet/Elu_2"
  input: "train_op/gradients/MaskNet/conv4_downsample/Conv2D_grad/ShapeN:1"
  input: "train_op/gradients/MaskNet/conv4_downsample/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv4_downsample/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/conv4_downsample/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv4_downsample/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "train_op/gradients/MaskNet/conv4_downsample/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv4_downsample/Conv2D_grad/Conv2DBackpropInput"
  input: "^train_op/gradients/MaskNet/conv4_downsample/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv4_downsample/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv4_downsample/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv4_downsample/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv4_downsample/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv4_downsample/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/AddN_1"
  op: "AddN"
  input: "train_op/gradients/MaskNet/add_1_grad/tuple/control_dependency_1"
  input: "train_op/gradients/MaskNet/conv4_downsample/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/Elu_2_grad/EluGrad"
  op: "EluGrad"
  input: "train_op/gradients/AddN_1"
  input: "MaskNet/Elu_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_56"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_2/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_57"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_2/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_58"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_2/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_59"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_2/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_2/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "train_op/gradients/MaskNet/Elu_2_grad/EluGrad"
  input: "MaskNet/conv3/BiasAdd"
  input: "MaskNet//batch_normalization_2/gamma/read"
  input: "MaskNet//batch_normalization_2/moving_mean/read"
  input: "MaskNet//batch_normalization_2/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_2/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_2/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_2/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_2/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^train_op/gradients/MaskNet/batch_normalization_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_2/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_2/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^train_op/gradients/MaskNet/batch_normalization_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_2/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_2/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^train_op/gradients/MaskNet/batch_normalization_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv3/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/MaskNet/batch_normalization_2/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv3/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_2/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv3/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/MaskNet/conv3/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_2/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv3/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv3/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv3/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/MaskNet/conv3/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv3/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv3/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "MaskNet/Elu_1"
  input: "MaskNet//conv3/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv3/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "train_op/gradients/MaskNet/conv3/Conv2D_grad/ShapeN"
  input: "MaskNet//conv3/kernel/read"
  input: "train_op/gradients/MaskNet/conv3/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv3/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "MaskNet/Elu_1"
  input: "train_op/gradients/MaskNet/conv3/Conv2D_grad/ShapeN:1"
  input: "train_op/gradients/MaskNet/conv3/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv3/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/conv3/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv3/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "train_op/gradients/MaskNet/conv3/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv3/Conv2D_grad/Conv2DBackpropInput"
  input: "^train_op/gradients/MaskNet/conv3/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv3/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv3/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv3/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv3/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv3/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/Elu_1_grad/EluGrad"
  op: "EluGrad"
  input: "train_op/gradients/MaskNet/conv3/Conv2D_grad/tuple/control_dependency"
  input: "MaskNet/Elu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_60"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_61"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_62"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_63"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "train_op/gradients/MaskNet/Elu_1_grad/EluGrad"
  input: "MaskNet/conv2_downsample/BiasAdd"
  input: "MaskNet//batch_normalization_1/gamma/read"
  input: "MaskNet//batch_normalization_1/moving_mean/read"
  input: "MaskNet//batch_normalization_1/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^train_op/gradients/MaskNet/batch_normalization_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^train_op/gradients/MaskNet/batch_normalization_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^train_op/gradients/MaskNet/batch_normalization_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv2_downsample/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/MaskNet/batch_normalization_1/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv2_downsample/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv2_downsample/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/MaskNet/conv2_downsample/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv2_downsample/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 96
          }
          dim {
            size: 192
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv2_downsample/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv2_downsample/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/MaskNet/conv2_downsample/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv2_downsample/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv2_downsample/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "MaskNet/Elu"
  input: "MaskNet//conv2_downsample/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv2_downsample/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "train_op/gradients/MaskNet/conv2_downsample/Conv2D_grad/ShapeN"
  input: "MaskNet//conv2_downsample/kernel/read"
  input: "train_op/gradients/MaskNet/conv2_downsample/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv2_downsample/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "MaskNet/Elu"
  input: "train_op/gradients/MaskNet/conv2_downsample/Conv2D_grad/ShapeN:1"
  input: "train_op/gradients/MaskNet/conv2_downsample/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv2_downsample/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/conv2_downsample/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv2_downsample/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "train_op/gradients/MaskNet/conv2_downsample/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv2_downsample/Conv2D_grad/Conv2DBackpropInput"
  input: "^train_op/gradients/MaskNet/conv2_downsample/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv2_downsample/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv2_downsample/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv2_downsample/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv2_downsample/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv2_downsample/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/AddN_2"
  op: "AddN"
  input: "train_op/gradients/MaskNet/add_2_grad/tuple/control_dependency_1"
  input: "train_op/gradients/MaskNet/conv2_downsample/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/add_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/Elu_grad/EluGrad"
  op: "EluGrad"
  input: "train_op/gradients/AddN_2"
  input: "MaskNet/Elu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_64"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_65"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_66"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like_67"
  op: "ZerosLike"
  input: "MaskNet/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "train_op/gradients/MaskNet/Elu_grad/EluGrad"
  input: "MaskNet/conv1/BiasAdd"
  input: "MaskNet//batch_normalization/gamma/read"
  input: "MaskNet//batch_normalization/moving_mean/read"
  input: "MaskNet//batch_normalization/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^train_op/gradients/MaskNet/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^train_op/gradients/MaskNet/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^train_op/gradients/MaskNet/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/MaskNet/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv1/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/MaskNet/conv1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^train_op/gradients/MaskNet/conv1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv1/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/MaskNet/conv1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv1/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "resize/ResizeBilinear"
  input: "MaskNet//conv1/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "train_op/gradients/MaskNet/conv1/Conv2D_grad/ShapeN"
  input: "MaskNet//conv1/kernel/read"
  input: "train_op/gradients/MaskNet/conv1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "resize/ResizeBilinear"
  input: "train_op/gradients/MaskNet/conv1/Conv2D_grad/ShapeN:1"
  input: "train_op/gradients/MaskNet/conv1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv1/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/MaskNet/conv1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv1/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "train_op/gradients/MaskNet/conv1/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv1/Conv2D_grad/Conv2DBackpropInput"
  input: "^train_op/gradients/MaskNet/conv1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv1/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 192
          }
          dim {
            size: 384
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/MaskNet/conv1/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/MaskNet/conv1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train_op/gradients/MaskNet/conv1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Abs"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv1/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/Mean"
  op: "Mean"
  input: "train_op/Abs"
  input: "train_op/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_1"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_1"
  op: "Mean"
  input: "train_op/Abs_1"
  input: "train_op/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_2"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_2"
  op: "Mean"
  input: "train_op/Abs_2"
  input: "train_op/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_3"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_3"
  op: "Mean"
  input: "train_op/Abs_3"
  input: "train_op/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_4"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv2_downsample/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/Mean_4"
  op: "Mean"
  input: "train_op/Abs_4"
  input: "train_op/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_5"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv2_downsample/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_5"
  op: "Mean"
  input: "train_op/Abs_5"
  input: "train_op/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_6"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_6"
  op: "Mean"
  input: "train_op/Abs_6"
  input: "train_op/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_7"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_7"
  op: "Mean"
  input: "train_op/Abs_7"
  input: "train_op/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_8"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv3/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/Mean_8"
  op: "Mean"
  input: "train_op/Abs_8"
  input: "train_op/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_9"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv3/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_9"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_9"
  op: "Mean"
  input: "train_op/Abs_9"
  input: "train_op/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_10"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_2/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_10"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_10"
  op: "Mean"
  input: "train_op/Abs_10"
  input: "train_op/Const_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_11"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_2/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_11"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_11"
  op: "Mean"
  input: "train_op/Abs_11"
  input: "train_op/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_12"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv4_downsample/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_12"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/Mean_12"
  op: "Mean"
  input: "train_op/Abs_12"
  input: "train_op/Const_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_13"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv4_downsample/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_13"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_13"
  op: "Mean"
  input: "train_op/Abs_13"
  input: "train_op/Const_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_14"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_3/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_14"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_14"
  op: "Mean"
  input: "train_op/Abs_14"
  input: "train_op/Const_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_15"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_3/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_15"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_15"
  op: "Mean"
  input: "train_op/Abs_15"
  input: "train_op/Const_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_16"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv5/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_16"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/Mean_16"
  op: "Mean"
  input: "train_op/Abs_16"
  input: "train_op/Const_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_17"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv5/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_17"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_17"
  op: "Mean"
  input: "train_op/Abs_17"
  input: "train_op/Const_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_18"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_4/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_18"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_18"
  op: "Mean"
  input: "train_op/Abs_18"
  input: "train_op/Const_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_19"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_4/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_19"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_19"
  op: "Mean"
  input: "train_op/Abs_19"
  input: "train_op/Const_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_20"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv6/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_20"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/Mean_20"
  op: "Mean"
  input: "train_op/Abs_20"
  input: "train_op/Const_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_21"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv6/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_21"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_21"
  op: "Mean"
  input: "train_op/Abs_21"
  input: "train_op/Const_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_22"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_5/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_22"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_22"
  op: "Mean"
  input: "train_op/Abs_22"
  input: "train_op/Const_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_23"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_5/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_23"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_23"
  op: "Mean"
  input: "train_op/Abs_23"
  input: "train_op/Const_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_24"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv7_atrous/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_24"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/Mean_24"
  op: "Mean"
  input: "train_op/Abs_24"
  input: "train_op/Const_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_25"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv7_atrous/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_25"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_25"
  op: "Mean"
  input: "train_op/Abs_25"
  input: "train_op/Const_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_26"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_6/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_26"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_26"
  op: "Mean"
  input: "train_op/Abs_26"
  input: "train_op/Const_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_27"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_6/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_27"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_27"
  op: "Mean"
  input: "train_op/Abs_27"
  input: "train_op/Const_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_28"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv8_atrous/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_28"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/Mean_28"
  op: "Mean"
  input: "train_op/Abs_28"
  input: "train_op/Const_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_29"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv8_atrous/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_29"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_29"
  op: "Mean"
  input: "train_op/Abs_29"
  input: "train_op/Const_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_30"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_7/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_30"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_30"
  op: "Mean"
  input: "train_op/Abs_30"
  input: "train_op/Const_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_31"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_7/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_31"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_31"
  op: "Mean"
  input: "train_op/Abs_31"
  input: "train_op/Const_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_32"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv9_atrous/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_32"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/Mean_32"
  op: "Mean"
  input: "train_op/Abs_32"
  input: "train_op/Const_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_33"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv9_atrous/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_33"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_33"
  op: "Mean"
  input: "train_op/Abs_33"
  input: "train_op/Const_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_34"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_8/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_34"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_34"
  op: "Mean"
  input: "train_op/Abs_34"
  input: "train_op/Const_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_35"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_8/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_35"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_35"
  op: "Mean"
  input: "train_op/Abs_35"
  input: "train_op/Const_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_36"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv10_atrous/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_36"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/Mean_36"
  op: "Mean"
  input: "train_op/Abs_36"
  input: "train_op/Const_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_37"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv10_atrous/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_37"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_37"
  op: "Mean"
  input: "train_op/Abs_37"
  input: "train_op/Const_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_38"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_9/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_38"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_38"
  op: "Mean"
  input: "train_op/Abs_38"
  input: "train_op/Const_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_39"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_9/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_39"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_39"
  op: "Mean"
  input: "train_op/Abs_39"
  input: "train_op/Const_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_40"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv11/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_40"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/Mean_40"
  op: "Mean"
  input: "train_op/Abs_40"
  input: "train_op/Const_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_41"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv11/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_41"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_41"
  op: "Mean"
  input: "train_op/Abs_41"
  input: "train_op/Const_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_42"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_10/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_42"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_42"
  op: "Mean"
  input: "train_op/Abs_42"
  input: "train_op/Const_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_43"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_10/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_43"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_43"
  op: "Mean"
  input: "train_op/Abs_43"
  input: "train_op/Const_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_44"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv12/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_44"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/Mean_44"
  op: "Mean"
  input: "train_op/Abs_44"
  input: "train_op/Const_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_45"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv12/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_45"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_45"
  op: "Mean"
  input: "train_op/Abs_45"
  input: "train_op/Const_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_46"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_11/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_46"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_46"
  op: "Mean"
  input: "train_op/Abs_46"
  input: "train_op/Const_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_47"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_11/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_47"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_47"
  op: "Mean"
  input: "train_op/Abs_47"
  input: "train_op/Const_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_48"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_48"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/Mean_48"
  op: "Mean"
  input: "train_op/Abs_48"
  input: "train_op/Const_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_49"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_49"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_49"
  op: "Mean"
  input: "train_op/Abs_49"
  input: "train_op/Const_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_50"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_50"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_50"
  op: "Mean"
  input: "train_op/Abs_50"
  input: "train_op/Const_50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_51"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_51"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_51"
  op: "Mean"
  input: "train_op/Abs_51"
  input: "train_op/Const_51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_52"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv14/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_52"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/Mean_52"
  op: "Mean"
  input: "train_op/Abs_52"
  input: "train_op/Const_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_53"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv14/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_53"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_53"
  op: "Mean"
  input: "train_op/Abs_53"
  input: "train_op/Const_53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_54"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_12/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_54"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_54"
  op: "Mean"
  input: "train_op/Abs_54"
  input: "train_op/Const_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_55"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_12/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_55"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_55"
  op: "Mean"
  input: "train_op/Abs_55"
  input: "train_op/Const_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_56"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_56"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/Mean_56"
  op: "Mean"
  input: "train_op/Abs_56"
  input: "train_op/Const_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_57"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_57"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_57"
  op: "Mean"
  input: "train_op/Abs_57"
  input: "train_op/Const_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_58"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_58"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_58"
  op: "Mean"
  input: "train_op/Abs_58"
  input: "train_op/Const_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_59"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_59"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_59"
  op: "Mean"
  input: "train_op/Abs_59"
  input: "train_op/Const_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_60"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv16/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_60"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/Mean_60"
  op: "Mean"
  input: "train_op/Abs_60"
  input: "train_op/Const_60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_61"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv16/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_61"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_61"
  op: "Mean"
  input: "train_op/Abs_61"
  input: "train_op/Const_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_62"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_13/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_62"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_62"
  op: "Mean"
  input: "train_op/Abs_62"
  input: "train_op/Const_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_63"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_13/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_63"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_63"
  op: "Mean"
  input: "train_op/Abs_63"
  input: "train_op/Const_63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_64"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv17/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_64"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/Mean_64"
  op: "Mean"
  input: "train_op/Abs_64"
  input: "train_op/Const_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_65"
  op: "Abs"
  input: "train_op/gradients/MaskNet/conv17/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_65"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_65"
  op: "Mean"
  input: "train_op/Abs_65"
  input: "train_op/Const_65"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_66"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_14/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_66"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_66"
  op: "Mean"
  input: "train_op/Abs_66"
  input: "train_op/Const_66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Abs_67"
  op: "Abs"
  input: "train_op/gradients/MaskNet/batch_normalization_14/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Const_67"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/Mean_67"
  op: "Mean"
  input: "train_op/Abs_67"
  input: "train_op/Const_67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Rank/packed"
  op: "Pack"
  input: "train_op/Mean"
  input: "train_op/Mean_1"
  input: "train_op/Mean_2"
  input: "train_op/Mean_3"
  input: "train_op/Mean_4"
  input: "train_op/Mean_5"
  input: "train_op/Mean_6"
  input: "train_op/Mean_7"
  input: "train_op/Mean_8"
  input: "train_op/Mean_9"
  input: "train_op/Mean_10"
  input: "train_op/Mean_11"
  input: "train_op/Mean_12"
  input: "train_op/Mean_13"
  input: "train_op/Mean_14"
  input: "train_op/Mean_15"
  input: "train_op/Mean_16"
  input: "train_op/Mean_17"
  input: "train_op/Mean_18"
  input: "train_op/Mean_19"
  input: "train_op/Mean_20"
  input: "train_op/Mean_21"
  input: "train_op/Mean_22"
  input: "train_op/Mean_23"
  input: "train_op/Mean_24"
  input: "train_op/Mean_25"
  input: "train_op/Mean_26"
  input: "train_op/Mean_27"
  input: "train_op/Mean_28"
  input: "train_op/Mean_29"
  input: "train_op/Mean_30"
  input: "train_op/Mean_31"
  input: "train_op/Mean_32"
  input: "train_op/Mean_33"
  input: "train_op/Mean_34"
  input: "train_op/Mean_35"
  input: "train_op/Mean_36"
  input: "train_op/Mean_37"
  input: "train_op/Mean_38"
  input: "train_op/Mean_39"
  input: "train_op/Mean_40"
  input: "train_op/Mean_41"
  input: "train_op/Mean_42"
  input: "train_op/Mean_43"
  input: "train_op/Mean_44"
  input: "train_op/Mean_45"
  input: "train_op/Mean_46"
  input: "train_op/Mean_47"
  input: "train_op/Mean_48"
  input: "train_op/Mean_49"
  input: "train_op/Mean_50"
  input: "train_op/Mean_51"
  input: "train_op/Mean_52"
  input: "train_op/Mean_53"
  input: "train_op/Mean_54"
  input: "train_op/Mean_55"
  input: "train_op/Mean_56"
  input: "train_op/Mean_57"
  input: "train_op/Mean_58"
  input: "train_op/Mean_59"
  input: "train_op/Mean_60"
  input: "train_op/Mean_61"
  input: "train_op/Mean_62"
  input: "train_op/Mean_63"
  input: "train_op/Mean_64"
  input: "train_op/Mean_65"
  input: "train_op/Mean_66"
  input: "train_op/Mean_67"
  attr {
    key: "N"
    value {
      i: 68
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 68
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "train_op/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/range"
  op: "Range"
  input: "train_op/range/start"
  input: "train_op/Rank"
  input: "train_op/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Mean_68/input"
  op: "Pack"
  input: "train_op/Mean"
  input: "train_op/Mean_1"
  input: "train_op/Mean_2"
  input: "train_op/Mean_3"
  input: "train_op/Mean_4"
  input: "train_op/Mean_5"
  input: "train_op/Mean_6"
  input: "train_op/Mean_7"
  input: "train_op/Mean_8"
  input: "train_op/Mean_9"
  input: "train_op/Mean_10"
  input: "train_op/Mean_11"
  input: "train_op/Mean_12"
  input: "train_op/Mean_13"
  input: "train_op/Mean_14"
  input: "train_op/Mean_15"
  input: "train_op/Mean_16"
  input: "train_op/Mean_17"
  input: "train_op/Mean_18"
  input: "train_op/Mean_19"
  input: "train_op/Mean_20"
  input: "train_op/Mean_21"
  input: "train_op/Mean_22"
  input: "train_op/Mean_23"
  input: "train_op/Mean_24"
  input: "train_op/Mean_25"
  input: "train_op/Mean_26"
  input: "train_op/Mean_27"
  input: "train_op/Mean_28"
  input: "train_op/Mean_29"
  input: "train_op/Mean_30"
  input: "train_op/Mean_31"
  input: "train_op/Mean_32"
  input: "train_op/Mean_33"
  input: "train_op/Mean_34"
  input: "train_op/Mean_35"
  input: "train_op/Mean_36"
  input: "train_op/Mean_37"
  input: "train_op/Mean_38"
  input: "train_op/Mean_39"
  input: "train_op/Mean_40"
  input: "train_op/Mean_41"
  input: "train_op/Mean_42"
  input: "train_op/Mean_43"
  input: "train_op/Mean_44"
  input: "train_op/Mean_45"
  input: "train_op/Mean_46"
  input: "train_op/Mean_47"
  input: "train_op/Mean_48"
  input: "train_op/Mean_49"
  input: "train_op/Mean_50"
  input: "train_op/Mean_51"
  input: "train_op/Mean_52"
  input: "train_op/Mean_53"
  input: "train_op/Mean_54"
  input: "train_op/Mean_55"
  input: "train_op/Mean_56"
  input: "train_op/Mean_57"
  input: "train_op/Mean_58"
  input: "train_op/Mean_59"
  input: "train_op/Mean_60"
  input: "train_op/Mean_61"
  input: "train_op/Mean_62"
  input: "train_op/Mean_63"
  input: "train_op/Mean_64"
  input: "train_op/Mean_65"
  input: "train_op/Mean_66"
  input: "train_op/Mean_67"
  attr {
    key: "N"
    value {
      i: 68
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 68
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "train_op/Mean_68"
  op: "Mean"
  input: "train_op/Mean_68/input"
  input: "train_op/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Less/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-06
      }
    }
  }
}
node {
  name: "train_op/Less"
  op: "Less"
  input: "train_op/Mean_68"
  input: "train_op/Less/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond/switch_t"
  op: "Identity"
  input: "train_op/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond/switch_f"
  op: "Identity"
  input: "train_op/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\003\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "train_op/cond/random_uniform/min"
  op: "Const"
  input: "^train_op/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond/random_uniform/max"
  op: "Const"
  input: "^train_op/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1370
    }
  }
}
node {
  name: "train_op/cond/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond/random_uniform/max"
  input: "train_op/cond/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond/random_uniform/RandomUniform"
  input: "train_op/cond/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond/random_uniform"
  op: "Add"
  input: "train_op/cond/random_uniform/mul"
  input: "train_op/cond/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond/Abs"
  op: "Abs"
  input: "train_op/cond/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond/clip_by_value/Minimum/Switch"
  input: "train_op/cond/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv1/Conv2D_grad/tuple/control_dependency_1"
  input: "train_op/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond/clip_by_value"
  op: "Maximum"
  input: "train_op/cond/clip_by_value/Minimum"
  input: "train_op/cond/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond/Merge"
  op: "Merge"
  input: "train_op/cond/clip_by_value"
  input: "train_op/cond/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_1/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_1/switch_t"
  op: "Identity"
  input: "train_op/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_1/switch_f"
  op: "Identity"
  input: "train_op/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_1/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_1/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_1/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "train_op/cond_1/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_1/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_1/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_1/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1388
    }
  }
}
node {
  name: "train_op/cond_1/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_1/random_uniform/max"
  input: "train_op/cond_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_1/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_1/random_uniform/RandomUniform"
  input: "train_op/cond_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_1/random_uniform"
  op: "Add"
  input: "train_op/cond_1/random_uniform/mul"
  input: "train_op/cond_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_1/Abs"
  op: "Abs"
  input: "train_op/cond_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_1/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_1/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_1/clip_by_value/Minimum/Switch"
  input: "train_op/cond_1/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_1/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv1/BiasAdd_grad/tuple/control_dependency_1"
  input: "train_op/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_1/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_1/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_1/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_1/clip_by_value/Minimum"
  input: "train_op/cond_1/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_1/Merge"
  op: "Merge"
  input: "train_op/cond_1/clip_by_value"
  input: "train_op/cond_1/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_2/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_2/switch_t"
  op: "Identity"
  input: "train_op/cond_2/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_2/switch_f"
  op: "Identity"
  input: "train_op/cond_2/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_2/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_2/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_2/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "train_op/cond_2/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_2/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_2/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_2/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1406
    }
  }
}
node {
  name: "train_op/cond_2/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_2/random_uniform/max"
  input: "train_op/cond_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_2/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_2/random_uniform/RandomUniform"
  input: "train_op/cond_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_2/random_uniform"
  op: "Add"
  input: "train_op/cond_2/random_uniform/mul"
  input: "train_op/cond_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_2/Abs"
  op: "Abs"
  input: "train_op/cond_2/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_2/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_2/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_2/clip_by_value/Minimum/Switch"
  input: "train_op/cond_2/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_2/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "train_op/cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_2/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_2/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_2/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_2/clip_by_value/Minimum"
  input: "train_op/cond_2/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_2/Merge"
  op: "Merge"
  input: "train_op/cond_2/clip_by_value"
  input: "train_op/cond_2/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_3/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_3/switch_t"
  op: "Identity"
  input: "train_op/cond_3/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_3/switch_f"
  op: "Identity"
  input: "train_op/cond_3/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_3/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_3/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_3/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "train_op/cond_3/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_3/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_3/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_3/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_3/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_3/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1424
    }
  }
}
node {
  name: "train_op/cond_3/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_3/random_uniform/max"
  input: "train_op/cond_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_3/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_3/random_uniform/RandomUniform"
  input: "train_op/cond_3/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_3/random_uniform"
  op: "Add"
  input: "train_op/cond_3/random_uniform/mul"
  input: "train_op/cond_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_3/Abs"
  op: "Abs"
  input: "train_op/cond_3/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_3/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_3/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_3/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_3/clip_by_value/Minimum/Switch"
  input: "train_op/cond_3/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_3/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "train_op/cond_3/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_3/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_3/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_3/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_3/clip_by_value/Minimum"
  input: "train_op/cond_3/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_3/Merge"
  op: "Merge"
  input: "train_op/cond_3/clip_by_value"
  input: "train_op/cond_3/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_4/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_4/switch_t"
  op: "Identity"
  input: "train_op/cond_4/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_4/switch_f"
  op: "Identity"
  input: "train_op/cond_4/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_4/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_4/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_4/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/cond_4/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_4/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_4/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_4/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_4/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_4/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1442
    }
  }
}
node {
  name: "train_op/cond_4/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_4/random_uniform/max"
  input: "train_op/cond_4/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_4/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_4/random_uniform/RandomUniform"
  input: "train_op/cond_4/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_4/random_uniform"
  op: "Add"
  input: "train_op/cond_4/random_uniform/mul"
  input: "train_op/cond_4/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_4/Abs"
  op: "Abs"
  input: "train_op/cond_4/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_4/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_4/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_4/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_4/clip_by_value/Minimum/Switch"
  input: "train_op/cond_4/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_4/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv2_downsample/Conv2D_grad/tuple/control_dependency_1"
  input: "train_op/cond_4/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv2_downsample/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_4/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_4/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_4/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_4/clip_by_value/Minimum"
  input: "train_op/cond_4/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_4/Merge"
  op: "Merge"
  input: "train_op/cond_4/clip_by_value"
  input: "train_op/cond_4/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_5/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_5/switch_t"
  op: "Identity"
  input: "train_op/cond_5/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_5/switch_f"
  op: "Identity"
  input: "train_op/cond_5/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_5/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_5/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_5/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "train_op/cond_5/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_5/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_5/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_5/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_5/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_5/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1460
    }
  }
}
node {
  name: "train_op/cond_5/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_5/random_uniform/max"
  input: "train_op/cond_5/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_5/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_5/random_uniform/RandomUniform"
  input: "train_op/cond_5/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_5/random_uniform"
  op: "Add"
  input: "train_op/cond_5/random_uniform/mul"
  input: "train_op/cond_5/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_5/Abs"
  op: "Abs"
  input: "train_op/cond_5/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_5/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_5/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_5/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_5/clip_by_value/Minimum/Switch"
  input: "train_op/cond_5/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_5/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv2_downsample/BiasAdd_grad/tuple/control_dependency_1"
  input: "train_op/cond_5/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv2_downsample/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_5/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_5/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_5/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_5/clip_by_value/Minimum"
  input: "train_op/cond_5/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_5/Merge"
  op: "Merge"
  input: "train_op/cond_5/clip_by_value"
  input: "train_op/cond_5/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_6/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_6/switch_t"
  op: "Identity"
  input: "train_op/cond_6/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_6/switch_f"
  op: "Identity"
  input: "train_op/cond_6/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_6/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_6/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_6/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "train_op/cond_6/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_6/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_6/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_6/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_6/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_6/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1478
    }
  }
}
node {
  name: "train_op/cond_6/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_6/random_uniform/max"
  input: "train_op/cond_6/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_6/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_6/random_uniform/RandomUniform"
  input: "train_op/cond_6/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_6/random_uniform"
  op: "Add"
  input: "train_op/cond_6/random_uniform/mul"
  input: "train_op/cond_6/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_6/Abs"
  op: "Abs"
  input: "train_op/cond_6/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_6/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_6/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_6/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_6/clip_by_value/Minimum/Switch"
  input: "train_op/cond_6/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_6/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "train_op/cond_6/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_6/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_6/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_6/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_6/clip_by_value/Minimum"
  input: "train_op/cond_6/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_6/Merge"
  op: "Merge"
  input: "train_op/cond_6/clip_by_value"
  input: "train_op/cond_6/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_7/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_7/switch_t"
  op: "Identity"
  input: "train_op/cond_7/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_7/switch_f"
  op: "Identity"
  input: "train_op/cond_7/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_7/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_7/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_7/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "train_op/cond_7/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_7/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_7/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_7/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_7/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_7/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1496
    }
  }
}
node {
  name: "train_op/cond_7/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_7/random_uniform/max"
  input: "train_op/cond_7/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_7/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_7/random_uniform/RandomUniform"
  input: "train_op/cond_7/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_7/random_uniform"
  op: "Add"
  input: "train_op/cond_7/random_uniform/mul"
  input: "train_op/cond_7/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_7/Abs"
  op: "Abs"
  input: "train_op/cond_7/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_7/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_7/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_7/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_7/clip_by_value/Minimum/Switch"
  input: "train_op/cond_7/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_7/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "train_op/cond_7/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_7/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_7/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_7/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_7/clip_by_value/Minimum"
  input: "train_op/cond_7/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_7/Merge"
  op: "Merge"
  input: "train_op/cond_7/clip_by_value"
  input: "train_op/cond_7/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_8/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_8/switch_t"
  op: "Identity"
  input: "train_op/cond_8/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_8/switch_f"
  op: "Identity"
  input: "train_op/cond_8/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_8/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_8/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_8/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/cond_8/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_8/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_8/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_8/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_8/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_8/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1514
    }
  }
}
node {
  name: "train_op/cond_8/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_8/random_uniform/max"
  input: "train_op/cond_8/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_8/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_8/random_uniform/RandomUniform"
  input: "train_op/cond_8/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_8/random_uniform"
  op: "Add"
  input: "train_op/cond_8/random_uniform/mul"
  input: "train_op/cond_8/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_8/Abs"
  op: "Abs"
  input: "train_op/cond_8/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_8/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_8/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_8/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_8/clip_by_value/Minimum/Switch"
  input: "train_op/cond_8/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_8/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv3/Conv2D_grad/tuple/control_dependency_1"
  input: "train_op/cond_8/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv3/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_8/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_8/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_8/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_8/clip_by_value/Minimum"
  input: "train_op/cond_8/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_8/Merge"
  op: "Merge"
  input: "train_op/cond_8/clip_by_value"
  input: "train_op/cond_8/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_9/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_9/switch_t"
  op: "Identity"
  input: "train_op/cond_9/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_9/switch_f"
  op: "Identity"
  input: "train_op/cond_9/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_9/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_9/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_9/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "train_op/cond_9/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_9/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_9/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_9/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_9/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_9/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1532
    }
  }
}
node {
  name: "train_op/cond_9/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_9/random_uniform/max"
  input: "train_op/cond_9/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_9/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_9/random_uniform/RandomUniform"
  input: "train_op/cond_9/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_9/random_uniform"
  op: "Add"
  input: "train_op/cond_9/random_uniform/mul"
  input: "train_op/cond_9/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_9/Abs"
  op: "Abs"
  input: "train_op/cond_9/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_9/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_9/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_9/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_9/clip_by_value/Minimum/Switch"
  input: "train_op/cond_9/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_9/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv3/BiasAdd_grad/tuple/control_dependency_1"
  input: "train_op/cond_9/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv3/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_9/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_9/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_9/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_9/clip_by_value/Minimum"
  input: "train_op/cond_9/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_9/Merge"
  op: "Merge"
  input: "train_op/cond_9/clip_by_value"
  input: "train_op/cond_9/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_10/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_10/switch_t"
  op: "Identity"
  input: "train_op/cond_10/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_10/switch_f"
  op: "Identity"
  input: "train_op/cond_10/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_10/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_10/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_10/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "train_op/cond_10/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_10/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_10/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_10/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_10/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_10/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1550
    }
  }
}
node {
  name: "train_op/cond_10/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_10/random_uniform/max"
  input: "train_op/cond_10/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_10/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_10/random_uniform/RandomUniform"
  input: "train_op/cond_10/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_10/random_uniform"
  op: "Add"
  input: "train_op/cond_10/random_uniform/mul"
  input: "train_op/cond_10/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_10/Abs"
  op: "Abs"
  input: "train_op/cond_10/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_10/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_10/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_10/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_10/clip_by_value/Minimum/Switch"
  input: "train_op/cond_10/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_10/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_2/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "train_op/cond_10/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_10/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_10/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_10/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_10/clip_by_value/Minimum"
  input: "train_op/cond_10/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_10/Merge"
  op: "Merge"
  input: "train_op/cond_10/clip_by_value"
  input: "train_op/cond_10/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_11/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_11/switch_t"
  op: "Identity"
  input: "train_op/cond_11/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_11/switch_f"
  op: "Identity"
  input: "train_op/cond_11/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_11/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_11/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_11/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "train_op/cond_11/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_11/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_11/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_11/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_11/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_11/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1568
    }
  }
}
node {
  name: "train_op/cond_11/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_11/random_uniform/max"
  input: "train_op/cond_11/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_11/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_11/random_uniform/RandomUniform"
  input: "train_op/cond_11/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_11/random_uniform"
  op: "Add"
  input: "train_op/cond_11/random_uniform/mul"
  input: "train_op/cond_11/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_11/Abs"
  op: "Abs"
  input: "train_op/cond_11/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_11/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_11/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_11/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_11/clip_by_value/Minimum/Switch"
  input: "train_op/cond_11/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_11/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_2/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "train_op/cond_11/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_11/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_11/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_11/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_11/clip_by_value/Minimum"
  input: "train_op/cond_11/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_11/Merge"
  op: "Merge"
  input: "train_op/cond_11/clip_by_value"
  input: "train_op/cond_11/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_12/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_12/switch_t"
  op: "Identity"
  input: "train_op/cond_12/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_12/switch_f"
  op: "Identity"
  input: "train_op/cond_12/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_12/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_12/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_12/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/cond_12/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_12/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_12/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_12/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_12/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_12/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1586
    }
  }
}
node {
  name: "train_op/cond_12/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_12/random_uniform/max"
  input: "train_op/cond_12/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_12/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_12/random_uniform/RandomUniform"
  input: "train_op/cond_12/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_12/random_uniform"
  op: "Add"
  input: "train_op/cond_12/random_uniform/mul"
  input: "train_op/cond_12/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_12/Abs"
  op: "Abs"
  input: "train_op/cond_12/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_12/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_12/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_12/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_12/clip_by_value/Minimum/Switch"
  input: "train_op/cond_12/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_12/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv4_downsample/Conv2D_grad/tuple/control_dependency_1"
  input: "train_op/cond_12/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv4_downsample/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_12/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_12/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_12/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_12/clip_by_value/Minimum"
  input: "train_op/cond_12/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_12/Merge"
  op: "Merge"
  input: "train_op/cond_12/clip_by_value"
  input: "train_op/cond_12/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_13/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_13/switch_t"
  op: "Identity"
  input: "train_op/cond_13/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_13/switch_f"
  op: "Identity"
  input: "train_op/cond_13/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_13/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_13/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_13/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "train_op/cond_13/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_13/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_13/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_13/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_13/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_13/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1604
    }
  }
}
node {
  name: "train_op/cond_13/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_13/random_uniform/max"
  input: "train_op/cond_13/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_13/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_13/random_uniform/RandomUniform"
  input: "train_op/cond_13/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_13/random_uniform"
  op: "Add"
  input: "train_op/cond_13/random_uniform/mul"
  input: "train_op/cond_13/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_13/Abs"
  op: "Abs"
  input: "train_op/cond_13/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_13/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_13/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_13/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_13/clip_by_value/Minimum/Switch"
  input: "train_op/cond_13/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_13/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv4_downsample/BiasAdd_grad/tuple/control_dependency_1"
  input: "train_op/cond_13/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv4_downsample/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_13/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_13/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_13/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_13/clip_by_value/Minimum"
  input: "train_op/cond_13/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_13/Merge"
  op: "Merge"
  input: "train_op/cond_13/clip_by_value"
  input: "train_op/cond_13/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_14/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_14/switch_t"
  op: "Identity"
  input: "train_op/cond_14/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_14/switch_f"
  op: "Identity"
  input: "train_op/cond_14/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_14/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_14/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_14/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "train_op/cond_14/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_14/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_14/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_14/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_14/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_14/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1622
    }
  }
}
node {
  name: "train_op/cond_14/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_14/random_uniform/max"
  input: "train_op/cond_14/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_14/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_14/random_uniform/RandomUniform"
  input: "train_op/cond_14/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_14/random_uniform"
  op: "Add"
  input: "train_op/cond_14/random_uniform/mul"
  input: "train_op/cond_14/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_14/Abs"
  op: "Abs"
  input: "train_op/cond_14/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_14/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_14/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_14/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_14/clip_by_value/Minimum/Switch"
  input: "train_op/cond_14/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_14/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_3/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "train_op/cond_14/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_3/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_14/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_14/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_14/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_14/clip_by_value/Minimum"
  input: "train_op/cond_14/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_14/Merge"
  op: "Merge"
  input: "train_op/cond_14/clip_by_value"
  input: "train_op/cond_14/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_15/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_15/switch_t"
  op: "Identity"
  input: "train_op/cond_15/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_15/switch_f"
  op: "Identity"
  input: "train_op/cond_15/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_15/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_15/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_15/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "train_op/cond_15/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_15/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_15/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_15/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_15/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_15/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1640
    }
  }
}
node {
  name: "train_op/cond_15/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_15/random_uniform/max"
  input: "train_op/cond_15/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_15/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_15/random_uniform/RandomUniform"
  input: "train_op/cond_15/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_15/random_uniform"
  op: "Add"
  input: "train_op/cond_15/random_uniform/mul"
  input: "train_op/cond_15/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_15/Abs"
  op: "Abs"
  input: "train_op/cond_15/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_15/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_15/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_15/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_15/clip_by_value/Minimum/Switch"
  input: "train_op/cond_15/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_15/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_3/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "train_op/cond_15/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_3/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_15/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_15/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_15/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_15/clip_by_value/Minimum"
  input: "train_op/cond_15/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_15/Merge"
  op: "Merge"
  input: "train_op/cond_15/clip_by_value"
  input: "train_op/cond_15/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_16/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_16/switch_t"
  op: "Identity"
  input: "train_op/cond_16/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_16/switch_f"
  op: "Identity"
  input: "train_op/cond_16/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_16/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_16/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_16/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/cond_16/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_16/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_16/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_16/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_16/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_16/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1658
    }
  }
}
node {
  name: "train_op/cond_16/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_16/random_uniform/max"
  input: "train_op/cond_16/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_16/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_16/random_uniform/RandomUniform"
  input: "train_op/cond_16/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_16/random_uniform"
  op: "Add"
  input: "train_op/cond_16/random_uniform/mul"
  input: "train_op/cond_16/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_16/Abs"
  op: "Abs"
  input: "train_op/cond_16/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_16/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_16/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_16/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_16/clip_by_value/Minimum/Switch"
  input: "train_op/cond_16/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_16/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv5/Conv2D_grad/tuple/control_dependency_1"
  input: "train_op/cond_16/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv5/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_16/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_16/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_16/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_16/clip_by_value/Minimum"
  input: "train_op/cond_16/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_16/Merge"
  op: "Merge"
  input: "train_op/cond_16/clip_by_value"
  input: "train_op/cond_16/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_17/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_17/switch_t"
  op: "Identity"
  input: "train_op/cond_17/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_17/switch_f"
  op: "Identity"
  input: "train_op/cond_17/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_17/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_17/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_17/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "train_op/cond_17/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_17/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_17/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_17/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_17/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_17/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1676
    }
  }
}
node {
  name: "train_op/cond_17/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_17/random_uniform/max"
  input: "train_op/cond_17/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_17/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_17/random_uniform/RandomUniform"
  input: "train_op/cond_17/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_17/random_uniform"
  op: "Add"
  input: "train_op/cond_17/random_uniform/mul"
  input: "train_op/cond_17/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_17/Abs"
  op: "Abs"
  input: "train_op/cond_17/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_17/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_17/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_17/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_17/clip_by_value/Minimum/Switch"
  input: "train_op/cond_17/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_17/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv5/BiasAdd_grad/tuple/control_dependency_1"
  input: "train_op/cond_17/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv5/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_17/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_17/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_17/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_17/clip_by_value/Minimum"
  input: "train_op/cond_17/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_17/Merge"
  op: "Merge"
  input: "train_op/cond_17/clip_by_value"
  input: "train_op/cond_17/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_18/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_18/switch_t"
  op: "Identity"
  input: "train_op/cond_18/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_18/switch_f"
  op: "Identity"
  input: "train_op/cond_18/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_18/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_18/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_18/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "train_op/cond_18/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_18/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_18/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_18/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_18/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_18/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1694
    }
  }
}
node {
  name: "train_op/cond_18/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_18/random_uniform/max"
  input: "train_op/cond_18/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_18/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_18/random_uniform/RandomUniform"
  input: "train_op/cond_18/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_18/random_uniform"
  op: "Add"
  input: "train_op/cond_18/random_uniform/mul"
  input: "train_op/cond_18/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_18/Abs"
  op: "Abs"
  input: "train_op/cond_18/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_18/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_18/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_18/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_18/clip_by_value/Minimum/Switch"
  input: "train_op/cond_18/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_18/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_4/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "train_op/cond_18/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_4/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_18/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_18/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_18/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_18/clip_by_value/Minimum"
  input: "train_op/cond_18/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_18/Merge"
  op: "Merge"
  input: "train_op/cond_18/clip_by_value"
  input: "train_op/cond_18/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_19/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_19/switch_t"
  op: "Identity"
  input: "train_op/cond_19/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_19/switch_f"
  op: "Identity"
  input: "train_op/cond_19/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_19/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_19/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_19/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "train_op/cond_19/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_19/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_19/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_19/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_19/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_19/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1712
    }
  }
}
node {
  name: "train_op/cond_19/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_19/random_uniform/max"
  input: "train_op/cond_19/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_19/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_19/random_uniform/RandomUniform"
  input: "train_op/cond_19/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_19/random_uniform"
  op: "Add"
  input: "train_op/cond_19/random_uniform/mul"
  input: "train_op/cond_19/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_19/Abs"
  op: "Abs"
  input: "train_op/cond_19/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_19/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_19/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_19/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_19/clip_by_value/Minimum/Switch"
  input: "train_op/cond_19/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_19/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_4/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "train_op/cond_19/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_4/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_19/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_19/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_19/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_19/clip_by_value/Minimum"
  input: "train_op/cond_19/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_19/Merge"
  op: "Merge"
  input: "train_op/cond_19/clip_by_value"
  input: "train_op/cond_19/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_20/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_20/switch_t"
  op: "Identity"
  input: "train_op/cond_20/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_20/switch_f"
  op: "Identity"
  input: "train_op/cond_20/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_20/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_20/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_20/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/cond_20/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_20/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_20/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_20/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_20/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_20/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1730
    }
  }
}
node {
  name: "train_op/cond_20/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_20/random_uniform/max"
  input: "train_op/cond_20/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_20/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_20/random_uniform/RandomUniform"
  input: "train_op/cond_20/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_20/random_uniform"
  op: "Add"
  input: "train_op/cond_20/random_uniform/mul"
  input: "train_op/cond_20/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_20/Abs"
  op: "Abs"
  input: "train_op/cond_20/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_20/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_20/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_20/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_20/clip_by_value/Minimum/Switch"
  input: "train_op/cond_20/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_20/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv6/Conv2D_grad/tuple/control_dependency_1"
  input: "train_op/cond_20/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv6/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_20/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_20/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_20/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_20/clip_by_value/Minimum"
  input: "train_op/cond_20/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_20/Merge"
  op: "Merge"
  input: "train_op/cond_20/clip_by_value"
  input: "train_op/cond_20/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_21/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_21/switch_t"
  op: "Identity"
  input: "train_op/cond_21/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_21/switch_f"
  op: "Identity"
  input: "train_op/cond_21/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_21/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_21/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_21/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "train_op/cond_21/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_21/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_21/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_21/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_21/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_21/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1748
    }
  }
}
node {
  name: "train_op/cond_21/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_21/random_uniform/max"
  input: "train_op/cond_21/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_21/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_21/random_uniform/RandomUniform"
  input: "train_op/cond_21/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_21/random_uniform"
  op: "Add"
  input: "train_op/cond_21/random_uniform/mul"
  input: "train_op/cond_21/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_21/Abs"
  op: "Abs"
  input: "train_op/cond_21/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_21/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_21/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_21/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_21/clip_by_value/Minimum/Switch"
  input: "train_op/cond_21/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_21/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv6/BiasAdd_grad/tuple/control_dependency_1"
  input: "train_op/cond_21/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv6/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_21/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_21/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_21/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_21/clip_by_value/Minimum"
  input: "train_op/cond_21/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_21/Merge"
  op: "Merge"
  input: "train_op/cond_21/clip_by_value"
  input: "train_op/cond_21/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_22/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_22/switch_t"
  op: "Identity"
  input: "train_op/cond_22/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_22/switch_f"
  op: "Identity"
  input: "train_op/cond_22/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_22/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_22/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_22/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "train_op/cond_22/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_22/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_22/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_22/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_22/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_22/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1766
    }
  }
}
node {
  name: "train_op/cond_22/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_22/random_uniform/max"
  input: "train_op/cond_22/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_22/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_22/random_uniform/RandomUniform"
  input: "train_op/cond_22/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_22/random_uniform"
  op: "Add"
  input: "train_op/cond_22/random_uniform/mul"
  input: "train_op/cond_22/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_22/Abs"
  op: "Abs"
  input: "train_op/cond_22/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_22/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_22/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_22/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_22/clip_by_value/Minimum/Switch"
  input: "train_op/cond_22/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_22/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_5/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "train_op/cond_22/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_5/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_22/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_22/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_22/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_22/clip_by_value/Minimum"
  input: "train_op/cond_22/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_22/Merge"
  op: "Merge"
  input: "train_op/cond_22/clip_by_value"
  input: "train_op/cond_22/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_23/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_23/switch_t"
  op: "Identity"
  input: "train_op/cond_23/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_23/switch_f"
  op: "Identity"
  input: "train_op/cond_23/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_23/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_23/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_23/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "train_op/cond_23/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_23/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_23/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_23/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_23/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_23/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1784
    }
  }
}
node {
  name: "train_op/cond_23/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_23/random_uniform/max"
  input: "train_op/cond_23/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_23/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_23/random_uniform/RandomUniform"
  input: "train_op/cond_23/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_23/random_uniform"
  op: "Add"
  input: "train_op/cond_23/random_uniform/mul"
  input: "train_op/cond_23/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_23/Abs"
  op: "Abs"
  input: "train_op/cond_23/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_23/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_23/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_23/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_23/clip_by_value/Minimum/Switch"
  input: "train_op/cond_23/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_23/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_5/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "train_op/cond_23/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_5/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_23/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_23/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_23/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_23/clip_by_value/Minimum"
  input: "train_op/cond_23/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_23/Merge"
  op: "Merge"
  input: "train_op/cond_23/clip_by_value"
  input: "train_op/cond_23/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_24/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_24/switch_t"
  op: "Identity"
  input: "train_op/cond_24/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_24/switch_f"
  op: "Identity"
  input: "train_op/cond_24/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_24/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_24/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_24/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/cond_24/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_24/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_24/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_24/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_24/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_24/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1802
    }
  }
}
node {
  name: "train_op/cond_24/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_24/random_uniform/max"
  input: "train_op/cond_24/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_24/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_24/random_uniform/RandomUniform"
  input: "train_op/cond_24/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_24/random_uniform"
  op: "Add"
  input: "train_op/cond_24/random_uniform/mul"
  input: "train_op/cond_24/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_24/Abs"
  op: "Abs"
  input: "train_op/cond_24/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_24/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_24/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_24/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_24/clip_by_value/Minimum/Switch"
  input: "train_op/cond_24/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_24/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv7_atrous/Conv2D_grad/tuple/control_dependency_1"
  input: "train_op/cond_24/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv7_atrous/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_24/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_24/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_24/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_24/clip_by_value/Minimum"
  input: "train_op/cond_24/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_24/Merge"
  op: "Merge"
  input: "train_op/cond_24/clip_by_value"
  input: "train_op/cond_24/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_25/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_25/switch_t"
  op: "Identity"
  input: "train_op/cond_25/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_25/switch_f"
  op: "Identity"
  input: "train_op/cond_25/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_25/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_25/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_25/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "train_op/cond_25/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_25/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_25/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_25/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_25/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_25/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1820
    }
  }
}
node {
  name: "train_op/cond_25/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_25/random_uniform/max"
  input: "train_op/cond_25/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_25/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_25/random_uniform/RandomUniform"
  input: "train_op/cond_25/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_25/random_uniform"
  op: "Add"
  input: "train_op/cond_25/random_uniform/mul"
  input: "train_op/cond_25/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_25/Abs"
  op: "Abs"
  input: "train_op/cond_25/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_25/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_25/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_25/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_25/clip_by_value/Minimum/Switch"
  input: "train_op/cond_25/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_25/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv7_atrous/BiasAdd_grad/tuple/control_dependency_1"
  input: "train_op/cond_25/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv7_atrous/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_25/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_25/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_25/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_25/clip_by_value/Minimum"
  input: "train_op/cond_25/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_25/Merge"
  op: "Merge"
  input: "train_op/cond_25/clip_by_value"
  input: "train_op/cond_25/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_26/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_26/switch_t"
  op: "Identity"
  input: "train_op/cond_26/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_26/switch_f"
  op: "Identity"
  input: "train_op/cond_26/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_26/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_26/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_26/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "train_op/cond_26/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_26/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_26/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_26/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_26/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_26/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1838
    }
  }
}
node {
  name: "train_op/cond_26/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_26/random_uniform/max"
  input: "train_op/cond_26/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_26/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_26/random_uniform/RandomUniform"
  input: "train_op/cond_26/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_26/random_uniform"
  op: "Add"
  input: "train_op/cond_26/random_uniform/mul"
  input: "train_op/cond_26/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_26/Abs"
  op: "Abs"
  input: "train_op/cond_26/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_26/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_26/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_26/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_26/clip_by_value/Minimum/Switch"
  input: "train_op/cond_26/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_26/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_6/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "train_op/cond_26/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_6/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_26/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_26/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_26/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_26/clip_by_value/Minimum"
  input: "train_op/cond_26/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_26/Merge"
  op: "Merge"
  input: "train_op/cond_26/clip_by_value"
  input: "train_op/cond_26/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_27/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_27/switch_t"
  op: "Identity"
  input: "train_op/cond_27/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_27/switch_f"
  op: "Identity"
  input: "train_op/cond_27/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_27/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_27/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_27/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "train_op/cond_27/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_27/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_27/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_27/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_27/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_27/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1856
    }
  }
}
node {
  name: "train_op/cond_27/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_27/random_uniform/max"
  input: "train_op/cond_27/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_27/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_27/random_uniform/RandomUniform"
  input: "train_op/cond_27/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_27/random_uniform"
  op: "Add"
  input: "train_op/cond_27/random_uniform/mul"
  input: "train_op/cond_27/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_27/Abs"
  op: "Abs"
  input: "train_op/cond_27/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_27/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_27/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_27/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_27/clip_by_value/Minimum/Switch"
  input: "train_op/cond_27/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_27/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_6/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "train_op/cond_27/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_6/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_27/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_27/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_27/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_27/clip_by_value/Minimum"
  input: "train_op/cond_27/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_27/Merge"
  op: "Merge"
  input: "train_op/cond_27/clip_by_value"
  input: "train_op/cond_27/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_28/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_28/switch_t"
  op: "Identity"
  input: "train_op/cond_28/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_28/switch_f"
  op: "Identity"
  input: "train_op/cond_28/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_28/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_28/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_28/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/cond_28/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_28/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_28/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_28/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_28/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_28/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1874
    }
  }
}
node {
  name: "train_op/cond_28/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_28/random_uniform/max"
  input: "train_op/cond_28/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_28/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_28/random_uniform/RandomUniform"
  input: "train_op/cond_28/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_28/random_uniform"
  op: "Add"
  input: "train_op/cond_28/random_uniform/mul"
  input: "train_op/cond_28/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_28/Abs"
  op: "Abs"
  input: "train_op/cond_28/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_28/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_28/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_28/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_28/clip_by_value/Minimum/Switch"
  input: "train_op/cond_28/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_28/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv8_atrous/Conv2D_grad/tuple/control_dependency_1"
  input: "train_op/cond_28/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv8_atrous/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_28/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_28/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_28/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_28/clip_by_value/Minimum"
  input: "train_op/cond_28/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_28/Merge"
  op: "Merge"
  input: "train_op/cond_28/clip_by_value"
  input: "train_op/cond_28/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_29/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_29/switch_t"
  op: "Identity"
  input: "train_op/cond_29/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_29/switch_f"
  op: "Identity"
  input: "train_op/cond_29/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_29/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_29/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_29/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "train_op/cond_29/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_29/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_29/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_29/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_29/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_29/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1892
    }
  }
}
node {
  name: "train_op/cond_29/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_29/random_uniform/max"
  input: "train_op/cond_29/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_29/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_29/random_uniform/RandomUniform"
  input: "train_op/cond_29/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_29/random_uniform"
  op: "Add"
  input: "train_op/cond_29/random_uniform/mul"
  input: "train_op/cond_29/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_29/Abs"
  op: "Abs"
  input: "train_op/cond_29/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_29/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_29/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_29/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_29/clip_by_value/Minimum/Switch"
  input: "train_op/cond_29/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_29/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv8_atrous/BiasAdd_grad/tuple/control_dependency_1"
  input: "train_op/cond_29/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv8_atrous/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_29/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_29/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_29/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_29/clip_by_value/Minimum"
  input: "train_op/cond_29/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_29/Merge"
  op: "Merge"
  input: "train_op/cond_29/clip_by_value"
  input: "train_op/cond_29/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_30/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_30/switch_t"
  op: "Identity"
  input: "train_op/cond_30/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_30/switch_f"
  op: "Identity"
  input: "train_op/cond_30/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_30/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_30/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_30/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "train_op/cond_30/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_30/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_30/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_30/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_30/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_30/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1910
    }
  }
}
node {
  name: "train_op/cond_30/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_30/random_uniform/max"
  input: "train_op/cond_30/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_30/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_30/random_uniform/RandomUniform"
  input: "train_op/cond_30/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_30/random_uniform"
  op: "Add"
  input: "train_op/cond_30/random_uniform/mul"
  input: "train_op/cond_30/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_30/Abs"
  op: "Abs"
  input: "train_op/cond_30/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_30/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_30/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_30/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_30/clip_by_value/Minimum/Switch"
  input: "train_op/cond_30/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_30/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_7/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "train_op/cond_30/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_7/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_30/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_30/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_30/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_30/clip_by_value/Minimum"
  input: "train_op/cond_30/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_30/Merge"
  op: "Merge"
  input: "train_op/cond_30/clip_by_value"
  input: "train_op/cond_30/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_31/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_31/switch_t"
  op: "Identity"
  input: "train_op/cond_31/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_31/switch_f"
  op: "Identity"
  input: "train_op/cond_31/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_31/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_31/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_31/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "train_op/cond_31/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_31/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_31/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_31/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_31/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_31/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1928
    }
  }
}
node {
  name: "train_op/cond_31/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_31/random_uniform/max"
  input: "train_op/cond_31/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_31/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_31/random_uniform/RandomUniform"
  input: "train_op/cond_31/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_31/random_uniform"
  op: "Add"
  input: "train_op/cond_31/random_uniform/mul"
  input: "train_op/cond_31/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_31/Abs"
  op: "Abs"
  input: "train_op/cond_31/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_31/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_31/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_31/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_31/clip_by_value/Minimum/Switch"
  input: "train_op/cond_31/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_31/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_7/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "train_op/cond_31/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_7/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_31/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_31/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_31/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_31/clip_by_value/Minimum"
  input: "train_op/cond_31/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_31/Merge"
  op: "Merge"
  input: "train_op/cond_31/clip_by_value"
  input: "train_op/cond_31/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_32/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_32/switch_t"
  op: "Identity"
  input: "train_op/cond_32/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_32/switch_f"
  op: "Identity"
  input: "train_op/cond_32/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_32/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_32/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_32/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/cond_32/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_32/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_32/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_32/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_32/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_32/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1946
    }
  }
}
node {
  name: "train_op/cond_32/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_32/random_uniform/max"
  input: "train_op/cond_32/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_32/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_32/random_uniform/RandomUniform"
  input: "train_op/cond_32/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_32/random_uniform"
  op: "Add"
  input: "train_op/cond_32/random_uniform/mul"
  input: "train_op/cond_32/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_32/Abs"
  op: "Abs"
  input: "train_op/cond_32/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_32/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_32/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_32/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_32/clip_by_value/Minimum/Switch"
  input: "train_op/cond_32/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_32/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv9_atrous/Conv2D_grad/tuple/control_dependency_1"
  input: "train_op/cond_32/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv9_atrous/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_32/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_32/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_32/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_32/clip_by_value/Minimum"
  input: "train_op/cond_32/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_32/Merge"
  op: "Merge"
  input: "train_op/cond_32/clip_by_value"
  input: "train_op/cond_32/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_33/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_33/switch_t"
  op: "Identity"
  input: "train_op/cond_33/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_33/switch_f"
  op: "Identity"
  input: "train_op/cond_33/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_33/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_33/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_33/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "train_op/cond_33/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_33/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_33/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_33/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_33/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_33/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1964
    }
  }
}
node {
  name: "train_op/cond_33/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_33/random_uniform/max"
  input: "train_op/cond_33/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_33/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_33/random_uniform/RandomUniform"
  input: "train_op/cond_33/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_33/random_uniform"
  op: "Add"
  input: "train_op/cond_33/random_uniform/mul"
  input: "train_op/cond_33/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_33/Abs"
  op: "Abs"
  input: "train_op/cond_33/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_33/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_33/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_33/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_33/clip_by_value/Minimum/Switch"
  input: "train_op/cond_33/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_33/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv9_atrous/BiasAdd_grad/tuple/control_dependency_1"
  input: "train_op/cond_33/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv9_atrous/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_33/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_33/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_33/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_33/clip_by_value/Minimum"
  input: "train_op/cond_33/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_33/Merge"
  op: "Merge"
  input: "train_op/cond_33/clip_by_value"
  input: "train_op/cond_33/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_34/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_34/switch_t"
  op: "Identity"
  input: "train_op/cond_34/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_34/switch_f"
  op: "Identity"
  input: "train_op/cond_34/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_34/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_34/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_34/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "train_op/cond_34/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_34/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_34/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_34/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_34/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_34/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1982
    }
  }
}
node {
  name: "train_op/cond_34/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_34/random_uniform/max"
  input: "train_op/cond_34/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_34/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_34/random_uniform/RandomUniform"
  input: "train_op/cond_34/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_34/random_uniform"
  op: "Add"
  input: "train_op/cond_34/random_uniform/mul"
  input: "train_op/cond_34/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_34/Abs"
  op: "Abs"
  input: "train_op/cond_34/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_34/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_34/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_34/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_34/clip_by_value/Minimum/Switch"
  input: "train_op/cond_34/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_34/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_8/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "train_op/cond_34/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_8/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_34/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_34/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_34/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_34/clip_by_value/Minimum"
  input: "train_op/cond_34/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_34/Merge"
  op: "Merge"
  input: "train_op/cond_34/clip_by_value"
  input: "train_op/cond_34/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_35/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_35/switch_t"
  op: "Identity"
  input: "train_op/cond_35/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_35/switch_f"
  op: "Identity"
  input: "train_op/cond_35/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_35/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_35/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_35/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "train_op/cond_35/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_35/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_35/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_35/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_35/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_35/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2000
    }
  }
}
node {
  name: "train_op/cond_35/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_35/random_uniform/max"
  input: "train_op/cond_35/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_35/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_35/random_uniform/RandomUniform"
  input: "train_op/cond_35/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_35/random_uniform"
  op: "Add"
  input: "train_op/cond_35/random_uniform/mul"
  input: "train_op/cond_35/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_35/Abs"
  op: "Abs"
  input: "train_op/cond_35/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_35/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_35/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_35/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_35/clip_by_value/Minimum/Switch"
  input: "train_op/cond_35/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_35/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_8/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "train_op/cond_35/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_8/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_35/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_35/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_35/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_35/clip_by_value/Minimum"
  input: "train_op/cond_35/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_35/Merge"
  op: "Merge"
  input: "train_op/cond_35/clip_by_value"
  input: "train_op/cond_35/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_36/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_36/switch_t"
  op: "Identity"
  input: "train_op/cond_36/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_36/switch_f"
  op: "Identity"
  input: "train_op/cond_36/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_36/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_36/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_36/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/cond_36/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_36/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_36/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_36/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_36/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_36/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2018
    }
  }
}
node {
  name: "train_op/cond_36/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_36/random_uniform/max"
  input: "train_op/cond_36/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_36/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_36/random_uniform/RandomUniform"
  input: "train_op/cond_36/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_36/random_uniform"
  op: "Add"
  input: "train_op/cond_36/random_uniform/mul"
  input: "train_op/cond_36/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_36/Abs"
  op: "Abs"
  input: "train_op/cond_36/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_36/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_36/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_36/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_36/clip_by_value/Minimum/Switch"
  input: "train_op/cond_36/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_36/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv10_atrous/Conv2D_grad/tuple/control_dependency_1"
  input: "train_op/cond_36/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv10_atrous/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_36/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_36/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_36/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_36/clip_by_value/Minimum"
  input: "train_op/cond_36/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_36/Merge"
  op: "Merge"
  input: "train_op/cond_36/clip_by_value"
  input: "train_op/cond_36/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_37/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_37/switch_t"
  op: "Identity"
  input: "train_op/cond_37/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_37/switch_f"
  op: "Identity"
  input: "train_op/cond_37/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_37/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_37/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_37/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "train_op/cond_37/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_37/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_37/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_37/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_37/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_37/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2036
    }
  }
}
node {
  name: "train_op/cond_37/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_37/random_uniform/max"
  input: "train_op/cond_37/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_37/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_37/random_uniform/RandomUniform"
  input: "train_op/cond_37/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_37/random_uniform"
  op: "Add"
  input: "train_op/cond_37/random_uniform/mul"
  input: "train_op/cond_37/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_37/Abs"
  op: "Abs"
  input: "train_op/cond_37/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_37/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_37/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_37/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_37/clip_by_value/Minimum/Switch"
  input: "train_op/cond_37/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_37/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv10_atrous/BiasAdd_grad/tuple/control_dependency_1"
  input: "train_op/cond_37/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv10_atrous/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_37/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_37/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_37/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_37/clip_by_value/Minimum"
  input: "train_op/cond_37/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_37/Merge"
  op: "Merge"
  input: "train_op/cond_37/clip_by_value"
  input: "train_op/cond_37/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_38/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_38/switch_t"
  op: "Identity"
  input: "train_op/cond_38/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_38/switch_f"
  op: "Identity"
  input: "train_op/cond_38/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_38/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_38/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_38/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "train_op/cond_38/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_38/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_38/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_38/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_38/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_38/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2054
    }
  }
}
node {
  name: "train_op/cond_38/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_38/random_uniform/max"
  input: "train_op/cond_38/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_38/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_38/random_uniform/RandomUniform"
  input: "train_op/cond_38/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_38/random_uniform"
  op: "Add"
  input: "train_op/cond_38/random_uniform/mul"
  input: "train_op/cond_38/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_38/Abs"
  op: "Abs"
  input: "train_op/cond_38/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_38/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_38/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_38/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_38/clip_by_value/Minimum/Switch"
  input: "train_op/cond_38/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_38/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_9/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "train_op/cond_38/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_9/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_38/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_38/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_38/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_38/clip_by_value/Minimum"
  input: "train_op/cond_38/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_38/Merge"
  op: "Merge"
  input: "train_op/cond_38/clip_by_value"
  input: "train_op/cond_38/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_39/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_39/switch_t"
  op: "Identity"
  input: "train_op/cond_39/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_39/switch_f"
  op: "Identity"
  input: "train_op/cond_39/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_39/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_39/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_39/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "train_op/cond_39/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_39/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_39/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_39/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_39/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_39/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2072
    }
  }
}
node {
  name: "train_op/cond_39/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_39/random_uniform/max"
  input: "train_op/cond_39/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_39/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_39/random_uniform/RandomUniform"
  input: "train_op/cond_39/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_39/random_uniform"
  op: "Add"
  input: "train_op/cond_39/random_uniform/mul"
  input: "train_op/cond_39/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_39/Abs"
  op: "Abs"
  input: "train_op/cond_39/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_39/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_39/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_39/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_39/clip_by_value/Minimum/Switch"
  input: "train_op/cond_39/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_39/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_9/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "train_op/cond_39/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_9/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_39/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_39/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_39/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_39/clip_by_value/Minimum"
  input: "train_op/cond_39/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_39/Merge"
  op: "Merge"
  input: "train_op/cond_39/clip_by_value"
  input: "train_op/cond_39/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_40/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_40/switch_t"
  op: "Identity"
  input: "train_op/cond_40/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_40/switch_f"
  op: "Identity"
  input: "train_op/cond_40/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_40/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_40/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_40/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/cond_40/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_40/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_40/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_40/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_40/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_40/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2090
    }
  }
}
node {
  name: "train_op/cond_40/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_40/random_uniform/max"
  input: "train_op/cond_40/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_40/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_40/random_uniform/RandomUniform"
  input: "train_op/cond_40/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_40/random_uniform"
  op: "Add"
  input: "train_op/cond_40/random_uniform/mul"
  input: "train_op/cond_40/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_40/Abs"
  op: "Abs"
  input: "train_op/cond_40/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_40/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_40/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_40/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_40/clip_by_value/Minimum/Switch"
  input: "train_op/cond_40/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_40/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv11/Conv2D_grad/tuple/control_dependency_1"
  input: "train_op/cond_40/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv11/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_40/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_40/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_40/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_40/clip_by_value/Minimum"
  input: "train_op/cond_40/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_40/Merge"
  op: "Merge"
  input: "train_op/cond_40/clip_by_value"
  input: "train_op/cond_40/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_41/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_41/switch_t"
  op: "Identity"
  input: "train_op/cond_41/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_41/switch_f"
  op: "Identity"
  input: "train_op/cond_41/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_41/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_41/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_41/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "train_op/cond_41/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_41/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_41/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_41/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_41/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_41/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2108
    }
  }
}
node {
  name: "train_op/cond_41/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_41/random_uniform/max"
  input: "train_op/cond_41/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_41/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_41/random_uniform/RandomUniform"
  input: "train_op/cond_41/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_41/random_uniform"
  op: "Add"
  input: "train_op/cond_41/random_uniform/mul"
  input: "train_op/cond_41/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_41/Abs"
  op: "Abs"
  input: "train_op/cond_41/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_41/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_41/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_41/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_41/clip_by_value/Minimum/Switch"
  input: "train_op/cond_41/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_41/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv11/BiasAdd_grad/tuple/control_dependency_1"
  input: "train_op/cond_41/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv11/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_41/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_41/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_41/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_41/clip_by_value/Minimum"
  input: "train_op/cond_41/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_41/Merge"
  op: "Merge"
  input: "train_op/cond_41/clip_by_value"
  input: "train_op/cond_41/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_42/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_42/switch_t"
  op: "Identity"
  input: "train_op/cond_42/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_42/switch_f"
  op: "Identity"
  input: "train_op/cond_42/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_42/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_42/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_42/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "train_op/cond_42/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_42/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_42/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_42/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_42/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_42/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2126
    }
  }
}
node {
  name: "train_op/cond_42/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_42/random_uniform/max"
  input: "train_op/cond_42/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_42/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_42/random_uniform/RandomUniform"
  input: "train_op/cond_42/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_42/random_uniform"
  op: "Add"
  input: "train_op/cond_42/random_uniform/mul"
  input: "train_op/cond_42/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_42/Abs"
  op: "Abs"
  input: "train_op/cond_42/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_42/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_42/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_42/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_42/clip_by_value/Minimum/Switch"
  input: "train_op/cond_42/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_42/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_10/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "train_op/cond_42/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_10/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_42/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_42/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_42/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_42/clip_by_value/Minimum"
  input: "train_op/cond_42/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_42/Merge"
  op: "Merge"
  input: "train_op/cond_42/clip_by_value"
  input: "train_op/cond_42/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_43/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_43/switch_t"
  op: "Identity"
  input: "train_op/cond_43/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_43/switch_f"
  op: "Identity"
  input: "train_op/cond_43/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_43/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_43/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_43/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "train_op/cond_43/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_43/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_43/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_43/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_43/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_43/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2144
    }
  }
}
node {
  name: "train_op/cond_43/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_43/random_uniform/max"
  input: "train_op/cond_43/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_43/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_43/random_uniform/RandomUniform"
  input: "train_op/cond_43/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_43/random_uniform"
  op: "Add"
  input: "train_op/cond_43/random_uniform/mul"
  input: "train_op/cond_43/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_43/Abs"
  op: "Abs"
  input: "train_op/cond_43/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_43/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_43/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_43/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_43/clip_by_value/Minimum/Switch"
  input: "train_op/cond_43/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_43/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_10/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "train_op/cond_43/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_10/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_43/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_43/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_43/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_43/clip_by_value/Minimum"
  input: "train_op/cond_43/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_43/Merge"
  op: "Merge"
  input: "train_op/cond_43/clip_by_value"
  input: "train_op/cond_43/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_44/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_44/switch_t"
  op: "Identity"
  input: "train_op/cond_44/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_44/switch_f"
  op: "Identity"
  input: "train_op/cond_44/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_44/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_44/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_44/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/cond_44/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_44/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_44/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_44/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_44/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_44/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2162
    }
  }
}
node {
  name: "train_op/cond_44/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_44/random_uniform/max"
  input: "train_op/cond_44/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_44/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_44/random_uniform/RandomUniform"
  input: "train_op/cond_44/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_44/random_uniform"
  op: "Add"
  input: "train_op/cond_44/random_uniform/mul"
  input: "train_op/cond_44/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_44/Abs"
  op: "Abs"
  input: "train_op/cond_44/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_44/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_44/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_44/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_44/clip_by_value/Minimum/Switch"
  input: "train_op/cond_44/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_44/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv12/Conv2D_grad/tuple/control_dependency_1"
  input: "train_op/cond_44/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv12/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_44/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_44/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_44/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_44/clip_by_value/Minimum"
  input: "train_op/cond_44/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_44/Merge"
  op: "Merge"
  input: "train_op/cond_44/clip_by_value"
  input: "train_op/cond_44/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_45/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_45/switch_t"
  op: "Identity"
  input: "train_op/cond_45/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_45/switch_f"
  op: "Identity"
  input: "train_op/cond_45/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_45/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_45/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_45/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "train_op/cond_45/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_45/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_45/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_45/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_45/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_45/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2180
    }
  }
}
node {
  name: "train_op/cond_45/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_45/random_uniform/max"
  input: "train_op/cond_45/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_45/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_45/random_uniform/RandomUniform"
  input: "train_op/cond_45/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_45/random_uniform"
  op: "Add"
  input: "train_op/cond_45/random_uniform/mul"
  input: "train_op/cond_45/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_45/Abs"
  op: "Abs"
  input: "train_op/cond_45/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_45/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_45/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_45/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_45/clip_by_value/Minimum/Switch"
  input: "train_op/cond_45/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_45/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv12/BiasAdd_grad/tuple/control_dependency_1"
  input: "train_op/cond_45/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv12/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_45/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_45/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_45/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_45/clip_by_value/Minimum"
  input: "train_op/cond_45/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_45/Merge"
  op: "Merge"
  input: "train_op/cond_45/clip_by_value"
  input: "train_op/cond_45/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_46/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_46/switch_t"
  op: "Identity"
  input: "train_op/cond_46/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_46/switch_f"
  op: "Identity"
  input: "train_op/cond_46/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_46/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_46/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_46/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "train_op/cond_46/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_46/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_46/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_46/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_46/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_46/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2198
    }
  }
}
node {
  name: "train_op/cond_46/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_46/random_uniform/max"
  input: "train_op/cond_46/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_46/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_46/random_uniform/RandomUniform"
  input: "train_op/cond_46/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_46/random_uniform"
  op: "Add"
  input: "train_op/cond_46/random_uniform/mul"
  input: "train_op/cond_46/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_46/Abs"
  op: "Abs"
  input: "train_op/cond_46/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_46/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_46/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_46/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_46/clip_by_value/Minimum/Switch"
  input: "train_op/cond_46/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_46/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_11/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "train_op/cond_46/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_11/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_46/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_46/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_46/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_46/clip_by_value/Minimum"
  input: "train_op/cond_46/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_46/Merge"
  op: "Merge"
  input: "train_op/cond_46/clip_by_value"
  input: "train_op/cond_46/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_47/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_47/switch_t"
  op: "Identity"
  input: "train_op/cond_47/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_47/switch_f"
  op: "Identity"
  input: "train_op/cond_47/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_47/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_47/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_47/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "train_op/cond_47/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_47/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_47/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_47/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_47/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_47/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2216
    }
  }
}
node {
  name: "train_op/cond_47/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_47/random_uniform/max"
  input: "train_op/cond_47/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_47/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_47/random_uniform/RandomUniform"
  input: "train_op/cond_47/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_47/random_uniform"
  op: "Add"
  input: "train_op/cond_47/random_uniform/mul"
  input: "train_op/cond_47/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_47/Abs"
  op: "Abs"
  input: "train_op/cond_47/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_47/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_47/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_47/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_47/clip_by_value/Minimum/Switch"
  input: "train_op/cond_47/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_47/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_11/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "train_op/cond_47/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_11/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_47/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_47/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_47/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_47/clip_by_value/Minimum"
  input: "train_op/cond_47/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_47/Merge"
  op: "Merge"
  input: "train_op/cond_47/clip_by_value"
  input: "train_op/cond_47/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_48/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_48/switch_t"
  op: "Identity"
  input: "train_op/cond_48/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_48/switch_f"
  op: "Identity"
  input: "train_op/cond_48/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_48/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_48/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_48/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/cond_48/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_48/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_48/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_48/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_48/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_48/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2234
    }
  }
}
node {
  name: "train_op/cond_48/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_48/random_uniform/max"
  input: "train_op/cond_48/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_48/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_48/random_uniform/RandomUniform"
  input: "train_op/cond_48/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_48/random_uniform"
  op: "Add"
  input: "train_op/cond_48/random_uniform/mul"
  input: "train_op/cond_48/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_48/Abs"
  op: "Abs"
  input: "train_op/cond_48/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_48/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_48/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_48/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_48/clip_by_value/Minimum/Switch"
  input: "train_op/cond_48/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_48/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/Conv2D_grad/tuple/control_dependency_1"
  input: "train_op/cond_48/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_48/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_48/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_48/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_48/clip_by_value/Minimum"
  input: "train_op/cond_48/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_48/Merge"
  op: "Merge"
  input: "train_op/cond_48/clip_by_value"
  input: "train_op/cond_48/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_49/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_49/switch_t"
  op: "Identity"
  input: "train_op/cond_49/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_49/switch_f"
  op: "Identity"
  input: "train_op/cond_49/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_49/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_49/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_49/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "train_op/cond_49/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_49/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_49/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_49/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_49/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_49/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2252
    }
  }
}
node {
  name: "train_op/cond_49/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_49/random_uniform/max"
  input: "train_op/cond_49/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_49/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_49/random_uniform/RandomUniform"
  input: "train_op/cond_49/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_49/random_uniform"
  op: "Add"
  input: "train_op/cond_49/random_uniform/mul"
  input: "train_op/cond_49/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_49/Abs"
  op: "Abs"
  input: "train_op/cond_49/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_49/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_49/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_49/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_49/clip_by_value/Minimum/Switch"
  input: "train_op/cond_49/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_49/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/BiasAdd_grad/tuple/control_dependency_1"
  input: "train_op/cond_49/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv13_upsample/conv13_upsample_conv/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_49/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_49/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_49/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_49/clip_by_value/Minimum"
  input: "train_op/cond_49/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_49/Merge"
  op: "Merge"
  input: "train_op/cond_49/clip_by_value"
  input: "train_op/cond_49/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_50/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_50/switch_t"
  op: "Identity"
  input: "train_op/cond_50/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_50/switch_f"
  op: "Identity"
  input: "train_op/cond_50/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_50/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_50/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_50/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "train_op/cond_50/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_50/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_50/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_50/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_50/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_50/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2270
    }
  }
}
node {
  name: "train_op/cond_50/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_50/random_uniform/max"
  input: "train_op/cond_50/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_50/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_50/random_uniform/RandomUniform"
  input: "train_op/cond_50/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_50/random_uniform"
  op: "Add"
  input: "train_op/cond_50/random_uniform/mul"
  input: "train_op/cond_50/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_50/Abs"
  op: "Abs"
  input: "train_op/cond_50/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_50/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_50/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_50/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_50/clip_by_value/Minimum/Switch"
  input: "train_op/cond_50/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_50/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "train_op/cond_50/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_50/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_50/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_50/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_50/clip_by_value/Minimum"
  input: "train_op/cond_50/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_50/Merge"
  op: "Merge"
  input: "train_op/cond_50/clip_by_value"
  input: "train_op/cond_50/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_51/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_51/switch_t"
  op: "Identity"
  input: "train_op/cond_51/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_51/switch_f"
  op: "Identity"
  input: "train_op/cond_51/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_51/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_51/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_51/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "train_op/cond_51/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_51/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_51/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_51/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_51/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_51/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2288
    }
  }
}
node {
  name: "train_op/cond_51/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_51/random_uniform/max"
  input: "train_op/cond_51/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_51/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_51/random_uniform/RandomUniform"
  input: "train_op/cond_51/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_51/random_uniform"
  op: "Add"
  input: "train_op/cond_51/random_uniform/mul"
  input: "train_op/cond_51/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_51/Abs"
  op: "Abs"
  input: "train_op/cond_51/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_51/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_51/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_51/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_51/clip_by_value/Minimum/Switch"
  input: "train_op/cond_51/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_51/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "train_op/cond_51/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv13_upsample/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_51/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_51/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_51/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_51/clip_by_value/Minimum"
  input: "train_op/cond_51/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_51/Merge"
  op: "Merge"
  input: "train_op/cond_51/clip_by_value"
  input: "train_op/cond_51/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_52/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_52/switch_t"
  op: "Identity"
  input: "train_op/cond_52/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_52/switch_f"
  op: "Identity"
  input: "train_op/cond_52/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_52/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_52/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_52/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/cond_52/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_52/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_52/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_52/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_52/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_52/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2306
    }
  }
}
node {
  name: "train_op/cond_52/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_52/random_uniform/max"
  input: "train_op/cond_52/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_52/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_52/random_uniform/RandomUniform"
  input: "train_op/cond_52/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_52/random_uniform"
  op: "Add"
  input: "train_op/cond_52/random_uniform/mul"
  input: "train_op/cond_52/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_52/Abs"
  op: "Abs"
  input: "train_op/cond_52/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_52/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_52/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_52/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_52/clip_by_value/Minimum/Switch"
  input: "train_op/cond_52/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_52/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv14/Conv2D_grad/tuple/control_dependency_1"
  input: "train_op/cond_52/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv14/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_52/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_52/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_52/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_52/clip_by_value/Minimum"
  input: "train_op/cond_52/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_52/Merge"
  op: "Merge"
  input: "train_op/cond_52/clip_by_value"
  input: "train_op/cond_52/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_53/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_53/switch_t"
  op: "Identity"
  input: "train_op/cond_53/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_53/switch_f"
  op: "Identity"
  input: "train_op/cond_53/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_53/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_53/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_53/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "train_op/cond_53/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_53/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_53/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_53/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_53/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_53/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2324
    }
  }
}
node {
  name: "train_op/cond_53/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_53/random_uniform/max"
  input: "train_op/cond_53/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_53/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_53/random_uniform/RandomUniform"
  input: "train_op/cond_53/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_53/random_uniform"
  op: "Add"
  input: "train_op/cond_53/random_uniform/mul"
  input: "train_op/cond_53/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_53/Abs"
  op: "Abs"
  input: "train_op/cond_53/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_53/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_53/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_53/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_53/clip_by_value/Minimum/Switch"
  input: "train_op/cond_53/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_53/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv14/BiasAdd_grad/tuple/control_dependency_1"
  input: "train_op/cond_53/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv14/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_53/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_53/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_53/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_53/clip_by_value/Minimum"
  input: "train_op/cond_53/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_53/Merge"
  op: "Merge"
  input: "train_op/cond_53/clip_by_value"
  input: "train_op/cond_53/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_54/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_54/switch_t"
  op: "Identity"
  input: "train_op/cond_54/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_54/switch_f"
  op: "Identity"
  input: "train_op/cond_54/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_54/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_54/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_54/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "train_op/cond_54/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_54/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_54/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_54/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_54/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_54/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2342
    }
  }
}
node {
  name: "train_op/cond_54/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_54/random_uniform/max"
  input: "train_op/cond_54/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_54/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_54/random_uniform/RandomUniform"
  input: "train_op/cond_54/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_54/random_uniform"
  op: "Add"
  input: "train_op/cond_54/random_uniform/mul"
  input: "train_op/cond_54/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_54/Abs"
  op: "Abs"
  input: "train_op/cond_54/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_54/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_54/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_54/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_54/clip_by_value/Minimum/Switch"
  input: "train_op/cond_54/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_54/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_12/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "train_op/cond_54/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_12/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_54/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_54/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_54/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_54/clip_by_value/Minimum"
  input: "train_op/cond_54/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_54/Merge"
  op: "Merge"
  input: "train_op/cond_54/clip_by_value"
  input: "train_op/cond_54/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_55/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_55/switch_t"
  op: "Identity"
  input: "train_op/cond_55/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_55/switch_f"
  op: "Identity"
  input: "train_op/cond_55/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_55/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_55/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_55/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "train_op/cond_55/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_55/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_55/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_55/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_55/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_55/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2360
    }
  }
}
node {
  name: "train_op/cond_55/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_55/random_uniform/max"
  input: "train_op/cond_55/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_55/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_55/random_uniform/RandomUniform"
  input: "train_op/cond_55/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_55/random_uniform"
  op: "Add"
  input: "train_op/cond_55/random_uniform/mul"
  input: "train_op/cond_55/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_55/Abs"
  op: "Abs"
  input: "train_op/cond_55/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_55/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_55/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_55/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_55/clip_by_value/Minimum/Switch"
  input: "train_op/cond_55/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_55/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_12/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "train_op/cond_55/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_12/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_55/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_55/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_55/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_55/clip_by_value/Minimum"
  input: "train_op/cond_55/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_55/Merge"
  op: "Merge"
  input: "train_op/cond_55/clip_by_value"
  input: "train_op/cond_55/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_56/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_56/switch_t"
  op: "Identity"
  input: "train_op/cond_56/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_56/switch_f"
  op: "Identity"
  input: "train_op/cond_56/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_56/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_56/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_56/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "train_op/cond_56/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_56/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_56/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_56/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_56/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_56/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2378
    }
  }
}
node {
  name: "train_op/cond_56/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_56/random_uniform/max"
  input: "train_op/cond_56/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_56/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_56/random_uniform/RandomUniform"
  input: "train_op/cond_56/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_56/random_uniform"
  op: "Add"
  input: "train_op/cond_56/random_uniform/mul"
  input: "train_op/cond_56/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_56/Abs"
  op: "Abs"
  input: "train_op/cond_56/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_56/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_56/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_56/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_56/clip_by_value/Minimum/Switch"
  input: "train_op/cond_56/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_56/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/Conv2D_grad/tuple/control_dependency_1"
  input: "train_op/cond_56/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_56/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_56/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_56/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_56/clip_by_value/Minimum"
  input: "train_op/cond_56/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_56/Merge"
  op: "Merge"
  input: "train_op/cond_56/clip_by_value"
  input: "train_op/cond_56/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_57/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_57/switch_t"
  op: "Identity"
  input: "train_op/cond_57/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_57/switch_f"
  op: "Identity"
  input: "train_op/cond_57/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_57/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_57/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_57/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "train_op/cond_57/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_57/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_57/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_57/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_57/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_57/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2396
    }
  }
}
node {
  name: "train_op/cond_57/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_57/random_uniform/max"
  input: "train_op/cond_57/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_57/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_57/random_uniform/RandomUniform"
  input: "train_op/cond_57/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_57/random_uniform"
  op: "Add"
  input: "train_op/cond_57/random_uniform/mul"
  input: "train_op/cond_57/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_57/Abs"
  op: "Abs"
  input: "train_op/cond_57/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_57/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_57/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_57/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_57/clip_by_value/Minimum/Switch"
  input: "train_op/cond_57/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_57/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/BiasAdd_grad/tuple/control_dependency_1"
  input: "train_op/cond_57/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv15_upsample/conv15_upsample_conv/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_57/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_57/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_57/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_57/clip_by_value/Minimum"
  input: "train_op/cond_57/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_57/Merge"
  op: "Merge"
  input: "train_op/cond_57/clip_by_value"
  input: "train_op/cond_57/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_58/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_58/switch_t"
  op: "Identity"
  input: "train_op/cond_58/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_58/switch_f"
  op: "Identity"
  input: "train_op/cond_58/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_58/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_58/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_58/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "train_op/cond_58/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_58/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_58/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_58/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_58/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_58/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2414
    }
  }
}
node {
  name: "train_op/cond_58/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_58/random_uniform/max"
  input: "train_op/cond_58/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_58/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_58/random_uniform/RandomUniform"
  input: "train_op/cond_58/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_58/random_uniform"
  op: "Add"
  input: "train_op/cond_58/random_uniform/mul"
  input: "train_op/cond_58/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_58/Abs"
  op: "Abs"
  input: "train_op/cond_58/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_58/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_58/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_58/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_58/clip_by_value/Minimum/Switch"
  input: "train_op/cond_58/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_58/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "train_op/cond_58/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_58/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_58/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_58/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_58/clip_by_value/Minimum"
  input: "train_op/cond_58/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_58/Merge"
  op: "Merge"
  input: "train_op/cond_58/clip_by_value"
  input: "train_op/cond_58/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_59/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_59/switch_t"
  op: "Identity"
  input: "train_op/cond_59/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_59/switch_f"
  op: "Identity"
  input: "train_op/cond_59/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_59/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_59/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_59/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "train_op/cond_59/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_59/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_59/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_59/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_59/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_59/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2432
    }
  }
}
node {
  name: "train_op/cond_59/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_59/random_uniform/max"
  input: "train_op/cond_59/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_59/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_59/random_uniform/RandomUniform"
  input: "train_op/cond_59/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_59/random_uniform"
  op: "Add"
  input: "train_op/cond_59/random_uniform/mul"
  input: "train_op/cond_59/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_59/Abs"
  op: "Abs"
  input: "train_op/cond_59/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_59/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_59/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_59/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_59/clip_by_value/Minimum/Switch"
  input: "train_op/cond_59/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_59/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "train_op/cond_59/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv15_upsample/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_59/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_59/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_59/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_59/clip_by_value/Minimum"
  input: "train_op/cond_59/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_59/Merge"
  op: "Merge"
  input: "train_op/cond_59/clip_by_value"
  input: "train_op/cond_59/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_60/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_60/switch_t"
  op: "Identity"
  input: "train_op/cond_60/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_60/switch_f"
  op: "Identity"
  input: "train_op/cond_60/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_60/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_60/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_60/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/cond_60/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_60/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_60/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_60/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_60/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_60/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2450
    }
  }
}
node {
  name: "train_op/cond_60/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_60/random_uniform/max"
  input: "train_op/cond_60/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_60/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_60/random_uniform/RandomUniform"
  input: "train_op/cond_60/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_60/random_uniform"
  op: "Add"
  input: "train_op/cond_60/random_uniform/mul"
  input: "train_op/cond_60/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_60/Abs"
  op: "Abs"
  input: "train_op/cond_60/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_60/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_60/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_60/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_60/clip_by_value/Minimum/Switch"
  input: "train_op/cond_60/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_60/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv16/Conv2D_grad/tuple/control_dependency_1"
  input: "train_op/cond_60/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv16/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_60/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_60/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_60/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_60/clip_by_value/Minimum"
  input: "train_op/cond_60/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_60/Merge"
  op: "Merge"
  input: "train_op/cond_60/clip_by_value"
  input: "train_op/cond_60/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_61/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_61/switch_t"
  op: "Identity"
  input: "train_op/cond_61/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_61/switch_f"
  op: "Identity"
  input: "train_op/cond_61/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_61/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_61/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_61/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "train_op/cond_61/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_61/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_61/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_61/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_61/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_61/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2468
    }
  }
}
node {
  name: "train_op/cond_61/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_61/random_uniform/max"
  input: "train_op/cond_61/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_61/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_61/random_uniform/RandomUniform"
  input: "train_op/cond_61/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_61/random_uniform"
  op: "Add"
  input: "train_op/cond_61/random_uniform/mul"
  input: "train_op/cond_61/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_61/Abs"
  op: "Abs"
  input: "train_op/cond_61/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_61/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_61/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_61/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_61/clip_by_value/Minimum/Switch"
  input: "train_op/cond_61/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_61/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv16/BiasAdd_grad/tuple/control_dependency_1"
  input: "train_op/cond_61/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv16/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_61/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_61/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_61/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_61/clip_by_value/Minimum"
  input: "train_op/cond_61/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_61/Merge"
  op: "Merge"
  input: "train_op/cond_61/clip_by_value"
  input: "train_op/cond_61/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_62/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_62/switch_t"
  op: "Identity"
  input: "train_op/cond_62/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_62/switch_f"
  op: "Identity"
  input: "train_op/cond_62/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_62/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_62/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_62/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "train_op/cond_62/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_62/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_62/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_62/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_62/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_62/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2486
    }
  }
}
node {
  name: "train_op/cond_62/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_62/random_uniform/max"
  input: "train_op/cond_62/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_62/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_62/random_uniform/RandomUniform"
  input: "train_op/cond_62/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_62/random_uniform"
  op: "Add"
  input: "train_op/cond_62/random_uniform/mul"
  input: "train_op/cond_62/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_62/Abs"
  op: "Abs"
  input: "train_op/cond_62/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_62/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_62/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_62/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_62/clip_by_value/Minimum/Switch"
  input: "train_op/cond_62/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_62/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_13/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "train_op/cond_62/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_13/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_62/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_62/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_62/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_62/clip_by_value/Minimum"
  input: "train_op/cond_62/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_62/Merge"
  op: "Merge"
  input: "train_op/cond_62/clip_by_value"
  input: "train_op/cond_62/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_63/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_63/switch_t"
  op: "Identity"
  input: "train_op/cond_63/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_63/switch_f"
  op: "Identity"
  input: "train_op/cond_63/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_63/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_63/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_63/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "train_op/cond_63/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_63/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_63/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_63/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_63/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_63/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2504
    }
  }
}
node {
  name: "train_op/cond_63/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_63/random_uniform/max"
  input: "train_op/cond_63/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_63/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_63/random_uniform/RandomUniform"
  input: "train_op/cond_63/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_63/random_uniform"
  op: "Add"
  input: "train_op/cond_63/random_uniform/mul"
  input: "train_op/cond_63/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_63/Abs"
  op: "Abs"
  input: "train_op/cond_63/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_63/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_63/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_63/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_63/clip_by_value/Minimum/Switch"
  input: "train_op/cond_63/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_63/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_13/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "train_op/cond_63/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_13/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_63/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_63/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_63/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_63/clip_by_value/Minimum"
  input: "train_op/cond_63/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_63/Merge"
  op: "Merge"
  input: "train_op/cond_63/clip_by_value"
  input: "train_op/cond_63/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_64/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_64/switch_t"
  op: "Identity"
  input: "train_op/cond_64/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_64/switch_f"
  op: "Identity"
  input: "train_op/cond_64/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_64/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_64/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_64/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\020\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/cond_64/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_64/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_64/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_64/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_64/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_64/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2522
    }
  }
}
node {
  name: "train_op/cond_64/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_64/random_uniform/max"
  input: "train_op/cond_64/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_64/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_64/random_uniform/RandomUniform"
  input: "train_op/cond_64/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_64/random_uniform"
  op: "Add"
  input: "train_op/cond_64/random_uniform/mul"
  input: "train_op/cond_64/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_64/Abs"
  op: "Abs"
  input: "train_op/cond_64/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_64/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_64/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_64/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_64/clip_by_value/Minimum/Switch"
  input: "train_op/cond_64/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_64/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv17/Conv2D_grad/tuple/control_dependency_1"
  input: "train_op/cond_64/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv17/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_64/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_64/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_64/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_64/clip_by_value/Minimum"
  input: "train_op/cond_64/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_64/Merge"
  op: "Merge"
  input: "train_op/cond_64/clip_by_value"
  input: "train_op/cond_64/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_65/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_65/switch_t"
  op: "Identity"
  input: "train_op/cond_65/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_65/switch_f"
  op: "Identity"
  input: "train_op/cond_65/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_65/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_65/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_65/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "train_op/cond_65/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_65/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_65/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_65/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_65/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_65/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2540
    }
  }
}
node {
  name: "train_op/cond_65/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_65/random_uniform/max"
  input: "train_op/cond_65/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_65/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_65/random_uniform/RandomUniform"
  input: "train_op/cond_65/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_65/random_uniform"
  op: "Add"
  input: "train_op/cond_65/random_uniform/mul"
  input: "train_op/cond_65/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_65/Abs"
  op: "Abs"
  input: "train_op/cond_65/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_65/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_65/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_65/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_65/clip_by_value/Minimum/Switch"
  input: "train_op/cond_65/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_65/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/conv17/BiasAdd_grad/tuple/control_dependency_1"
  input: "train_op/cond_65/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/conv17/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_65/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_65/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_65/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_65/clip_by_value/Minimum"
  input: "train_op/cond_65/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_65/Merge"
  op: "Merge"
  input: "train_op/cond_65/clip_by_value"
  input: "train_op/cond_65/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_66/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_66/switch_t"
  op: "Identity"
  input: "train_op/cond_66/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_66/switch_f"
  op: "Identity"
  input: "train_op/cond_66/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_66/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_66/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_66/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "train_op/cond_66/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_66/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_66/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_66/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_66/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_66/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2558
    }
  }
}
node {
  name: "train_op/cond_66/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_66/random_uniform/max"
  input: "train_op/cond_66/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_66/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_66/random_uniform/RandomUniform"
  input: "train_op/cond_66/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_66/random_uniform"
  op: "Add"
  input: "train_op/cond_66/random_uniform/mul"
  input: "train_op/cond_66/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_66/Abs"
  op: "Abs"
  input: "train_op/cond_66/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_66/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_66/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_66/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_66/clip_by_value/Minimum/Switch"
  input: "train_op/cond_66/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_66/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_14/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "train_op/cond_66/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_14/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_66/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_66/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_66/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_66/clip_by_value/Minimum"
  input: "train_op/cond_66/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_66/Merge"
  op: "Merge"
  input: "train_op/cond_66/clip_by_value"
  input: "train_op/cond_66/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_67/Switch"
  op: "Switch"
  input: "train_op/Less"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_67/switch_t"
  op: "Identity"
  input: "train_op/cond_67/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_67/switch_f"
  op: "Identity"
  input: "train_op/cond_67/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_67/pred_id"
  op: "Identity"
  input: "train_op/Less"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_67/random_uniform/shape"
  op: "Const"
  input: "^train_op/cond_67/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "train_op/cond_67/random_uniform/min"
  op: "Const"
  input: "^train_op/cond_67/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_67/random_uniform/max"
  op: "Const"
  input: "^train_op/cond_67/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_67/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "train_op/cond_67/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 8964
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2576
    }
  }
}
node {
  name: "train_op/cond_67/random_uniform/sub"
  op: "Sub"
  input: "train_op/cond_67/random_uniform/max"
  input: "train_op/cond_67/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/cond_67/random_uniform/mul"
  op: "Mul"
  input: "train_op/cond_67/random_uniform/RandomUniform"
  input: "train_op/cond_67/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_67/random_uniform"
  op: "Add"
  input: "train_op/cond_67/random_uniform/mul"
  input: "train_op/cond_67/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_67/Abs"
  op: "Abs"
  input: "train_op/cond_67/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_67/clip_by_value/Minimum/y"
  op: "Const"
  input: "^train_op/cond_67/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_67/clip_by_value/Minimum"
  op: "Minimum"
  input: "train_op/cond_67/clip_by_value/Minimum/Switch"
  input: "train_op/cond_67/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_67/clip_by_value/Minimum/Switch"
  op: "Switch"
  input: "train_op/gradients/MaskNet/batch_normalization_14/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "train_op/cond_67/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/MaskNet/batch_normalization_14/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_67/clip_by_value/y"
  op: "Const"
  input: "^train_op/cond_67/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1000.0
      }
    }
  }
}
node {
  name: "train_op/cond_67/clip_by_value"
  op: "Maximum"
  input: "train_op/cond_67/clip_by_value/Minimum"
  input: "train_op/cond_67/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/cond_67/Merge"
  op: "Merge"
  input: "train_op/cond_67/clip_by_value"
  input: "train_op/cond_67/Abs"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "train_op/beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/beta1_power/Assign"
  op: "Assign"
  input: "train_op/beta1_power"
  input: "train_op/beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/beta1_power/read"
  op: "Identity"
  input: "train_op/beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "train_op/beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/beta2_power/Assign"
  op: "Assign"
  input: "train_op/beta2_power"
  input: "train_op/beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/beta2_power/read"
  op: "Identity"
  input: "train_op/beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\003\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv1/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv1/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv1/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv1/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv1/kernel/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv1/kernel/Adam"
  input: "MaskNet//conv1/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv1/kernel/Adam/read"
  op: "Identity"
  input: "MaskNet//conv1/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\003\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv1/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv1/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv1/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv1/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv1/kernel/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv1/kernel/Adam_1"
  input: "MaskNet//conv1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv1/kernel/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv1/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv1/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv1/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv1/bias/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv1/bias/Adam"
  input: "MaskNet//conv1/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv1/bias/Adam/read"
  op: "Identity"
  input: "MaskNet//conv1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv1/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv1/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv1/bias/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv1/bias/Adam_1"
  input: "MaskNet//conv1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv1/bias/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization/gamma/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization/gamma/Adam"
  input: "MaskNet//batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization/gamma/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization/gamma/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization/gamma/Adam_1"
  input: "MaskNet//batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization/gamma/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization/beta/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization/beta/Adam"
  input: "MaskNet//batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization/beta/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization/beta/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization/beta/Adam_1"
  input: "MaskNet//batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization/beta/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv2_downsample/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv2_downsample/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/kernel/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv2_downsample/kernel/Adam"
  input: "MaskNet//conv2_downsample/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/kernel/Adam/read"
  op: "Identity"
  input: "MaskNet//conv2_downsample/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv2_downsample/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv2_downsample/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/kernel/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv2_downsample/kernel/Adam_1"
  input: "MaskNet//conv2_downsample/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/kernel/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv2_downsample/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/bias/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv2_downsample/bias/Adam"
  input: "MaskNet//conv2_downsample/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/bias/Adam/read"
  op: "Identity"
  input: "MaskNet//conv2_downsample/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/bias/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv2_downsample/bias/Adam_1"
  input: "MaskNet//conv2_downsample/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/bias/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv2_downsample/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/gamma/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_1/gamma/Adam"
  input: "MaskNet//batch_normalization_1/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/gamma/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_1/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/gamma/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_1/gamma/Adam_1"
  input: "MaskNet//batch_normalization_1/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/gamma/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_1/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/beta/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_1/beta/Adam"
  input: "MaskNet//batch_normalization_1/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/beta/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_1/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/beta/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_1/beta/Adam_1"
  input: "MaskNet//batch_normalization_1/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/beta/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_1/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv3/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv3/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv3/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv3/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv3/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv3/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv3/kernel/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv3/kernel/Adam"
  input: "MaskNet//conv3/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv3/kernel/Adam/read"
  op: "Identity"
  input: "MaskNet//conv3/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv3/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv3/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv3/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv3/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv3/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv3/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv3/kernel/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv3/kernel/Adam_1"
  input: "MaskNet//conv3/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv3/kernel/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv3/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv3/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv3/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv3/bias/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv3/bias/Adam"
  input: "MaskNet//conv3/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv3/bias/Adam/read"
  op: "Identity"
  input: "MaskNet//conv3/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv3/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv3/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv3/bias/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv3/bias/Adam_1"
  input: "MaskNet//conv3/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv3/bias/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv3/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/gamma/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_2/gamma/Adam"
  input: "MaskNet//batch_normalization_2/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/gamma/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_2/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/gamma/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_2/gamma/Adam_1"
  input: "MaskNet//batch_normalization_2/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/gamma/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_2/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/beta/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_2/beta/Adam"
  input: "MaskNet//batch_normalization_2/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/beta/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_2/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/beta/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_2/beta/Adam_1"
  input: "MaskNet//batch_normalization_2/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/beta/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_2/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv4_downsample/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv4_downsample/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/kernel/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv4_downsample/kernel/Adam"
  input: "MaskNet//conv4_downsample/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/kernel/Adam/read"
  op: "Identity"
  input: "MaskNet//conv4_downsample/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv4_downsample/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv4_downsample/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/kernel/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv4_downsample/kernel/Adam_1"
  input: "MaskNet//conv4_downsample/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/kernel/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv4_downsample/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/bias/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv4_downsample/bias/Adam"
  input: "MaskNet//conv4_downsample/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/bias/Adam/read"
  op: "Identity"
  input: "MaskNet//conv4_downsample/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/bias/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv4_downsample/bias/Adam_1"
  input: "MaskNet//conv4_downsample/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/bias/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv4_downsample/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/gamma/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_3/gamma/Adam"
  input: "MaskNet//batch_normalization_3/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/gamma/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_3/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/gamma/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_3/gamma/Adam_1"
  input: "MaskNet//batch_normalization_3/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/gamma/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_3/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/beta/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_3/beta/Adam"
  input: "MaskNet//batch_normalization_3/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/beta/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_3/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/beta/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_3/beta/Adam_1"
  input: "MaskNet//batch_normalization_3/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/beta/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_3/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv5/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv5/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv5/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv5/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv5/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv5/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv5/kernel/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv5/kernel/Adam"
  input: "MaskNet//conv5/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv5/kernel/Adam/read"
  op: "Identity"
  input: "MaskNet//conv5/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv5/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv5/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv5/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv5/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv5/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv5/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv5/kernel/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv5/kernel/Adam_1"
  input: "MaskNet//conv5/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv5/kernel/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv5/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv5/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv5/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv5/bias/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv5/bias/Adam"
  input: "MaskNet//conv5/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv5/bias/Adam/read"
  op: "Identity"
  input: "MaskNet//conv5/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv5/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv5/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv5/bias/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv5/bias/Adam_1"
  input: "MaskNet//conv5/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv5/bias/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv5/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/gamma/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_4/gamma/Adam"
  input: "MaskNet//batch_normalization_4/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/gamma/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_4/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/gamma/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_4/gamma/Adam_1"
  input: "MaskNet//batch_normalization_4/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/gamma/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_4/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/beta/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_4/beta/Adam"
  input: "MaskNet//batch_normalization_4/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/beta/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_4/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/beta/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_4/beta/Adam_1"
  input: "MaskNet//batch_normalization_4/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/beta/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_4/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv6/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv6/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv6/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv6/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv6/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv6/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv6/kernel/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv6/kernel/Adam"
  input: "MaskNet//conv6/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv6/kernel/Adam/read"
  op: "Identity"
  input: "MaskNet//conv6/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv6/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv6/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv6/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv6/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv6/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv6/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv6/kernel/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv6/kernel/Adam_1"
  input: "MaskNet//conv6/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv6/kernel/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv6/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv6/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv6/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv6/bias/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv6/bias/Adam"
  input: "MaskNet//conv6/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv6/bias/Adam/read"
  op: "Identity"
  input: "MaskNet//conv6/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv6/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv6/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv6/bias/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv6/bias/Adam_1"
  input: "MaskNet//conv6/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv6/bias/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv6/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/gamma/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_5/gamma/Adam"
  input: "MaskNet//batch_normalization_5/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/gamma/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_5/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/gamma/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_5/gamma/Adam_1"
  input: "MaskNet//batch_normalization_5/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/gamma/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_5/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/beta/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_5/beta/Adam"
  input: "MaskNet//batch_normalization_5/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/beta/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_5/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/beta/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_5/beta/Adam_1"
  input: "MaskNet//batch_normalization_5/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/beta/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_5/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv7_atrous/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv7_atrous/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/kernel/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv7_atrous/kernel/Adam"
  input: "MaskNet//conv7_atrous/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/kernel/Adam/read"
  op: "Identity"
  input: "MaskNet//conv7_atrous/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv7_atrous/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv7_atrous/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/kernel/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv7_atrous/kernel/Adam_1"
  input: "MaskNet//conv7_atrous/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/kernel/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv7_atrous/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/bias/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv7_atrous/bias/Adam"
  input: "MaskNet//conv7_atrous/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/bias/Adam/read"
  op: "Identity"
  input: "MaskNet//conv7_atrous/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/bias/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv7_atrous/bias/Adam_1"
  input: "MaskNet//conv7_atrous/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/bias/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv7_atrous/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/gamma/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_6/gamma/Adam"
  input: "MaskNet//batch_normalization_6/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/gamma/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_6/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/gamma/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_6/gamma/Adam_1"
  input: "MaskNet//batch_normalization_6/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/gamma/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_6/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/beta/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_6/beta/Adam"
  input: "MaskNet//batch_normalization_6/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/beta/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_6/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/beta/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_6/beta/Adam_1"
  input: "MaskNet//batch_normalization_6/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/beta/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_6/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv8_atrous/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv8_atrous/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/kernel/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv8_atrous/kernel/Adam"
  input: "MaskNet//conv8_atrous/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/kernel/Adam/read"
  op: "Identity"
  input: "MaskNet//conv8_atrous/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv8_atrous/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv8_atrous/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/kernel/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv8_atrous/kernel/Adam_1"
  input: "MaskNet//conv8_atrous/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/kernel/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv8_atrous/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/bias/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv8_atrous/bias/Adam"
  input: "MaskNet//conv8_atrous/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/bias/Adam/read"
  op: "Identity"
  input: "MaskNet//conv8_atrous/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/bias/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv8_atrous/bias/Adam_1"
  input: "MaskNet//conv8_atrous/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/bias/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv8_atrous/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/gamma/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_7/gamma/Adam"
  input: "MaskNet//batch_normalization_7/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/gamma/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_7/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/gamma/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_7/gamma/Adam_1"
  input: "MaskNet//batch_normalization_7/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/gamma/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_7/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/beta/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_7/beta/Adam"
  input: "MaskNet//batch_normalization_7/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/beta/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_7/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/beta/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_7/beta/Adam_1"
  input: "MaskNet//batch_normalization_7/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/beta/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_7/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv9_atrous/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv9_atrous/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/kernel/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv9_atrous/kernel/Adam"
  input: "MaskNet//conv9_atrous/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/kernel/Adam/read"
  op: "Identity"
  input: "MaskNet//conv9_atrous/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv9_atrous/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv9_atrous/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/kernel/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv9_atrous/kernel/Adam_1"
  input: "MaskNet//conv9_atrous/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/kernel/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv9_atrous/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/bias/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv9_atrous/bias/Adam"
  input: "MaskNet//conv9_atrous/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/bias/Adam/read"
  op: "Identity"
  input: "MaskNet//conv9_atrous/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/bias/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv9_atrous/bias/Adam_1"
  input: "MaskNet//conv9_atrous/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/bias/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv9_atrous/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/gamma/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_8/gamma/Adam"
  input: "MaskNet//batch_normalization_8/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/gamma/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_8/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/gamma/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_8/gamma/Adam_1"
  input: "MaskNet//batch_normalization_8/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/gamma/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_8/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/beta/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_8/beta/Adam"
  input: "MaskNet//batch_normalization_8/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/beta/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_8/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/beta/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_8/beta/Adam_1"
  input: "MaskNet//batch_normalization_8/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/beta/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_8/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv10_atrous/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv10_atrous/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/kernel/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv10_atrous/kernel/Adam"
  input: "MaskNet//conv10_atrous/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/kernel/Adam/read"
  op: "Identity"
  input: "MaskNet//conv10_atrous/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv10_atrous/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv10_atrous/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/kernel/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv10_atrous/kernel/Adam_1"
  input: "MaskNet//conv10_atrous/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/kernel/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv10_atrous/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/bias/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv10_atrous/bias/Adam"
  input: "MaskNet//conv10_atrous/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/bias/Adam/read"
  op: "Identity"
  input: "MaskNet//conv10_atrous/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/bias/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv10_atrous/bias/Adam_1"
  input: "MaskNet//conv10_atrous/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/bias/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv10_atrous/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/gamma/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_9/gamma/Adam"
  input: "MaskNet//batch_normalization_9/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/gamma/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_9/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/gamma/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_9/gamma/Adam_1"
  input: "MaskNet//batch_normalization_9/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/gamma/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_9/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/beta/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_9/beta/Adam"
  input: "MaskNet//batch_normalization_9/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/beta/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_9/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/beta/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_9/beta/Adam_1"
  input: "MaskNet//batch_normalization_9/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/beta/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_9/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv11/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv11/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv11/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv11/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv11/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv11/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv11/kernel/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv11/kernel/Adam"
  input: "MaskNet//conv11/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv11/kernel/Adam/read"
  op: "Identity"
  input: "MaskNet//conv11/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv11/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv11/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv11/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv11/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv11/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv11/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv11/kernel/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv11/kernel/Adam_1"
  input: "MaskNet//conv11/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv11/kernel/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv11/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv11/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv11/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv11/bias/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv11/bias/Adam"
  input: "MaskNet//conv11/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv11/bias/Adam/read"
  op: "Identity"
  input: "MaskNet//conv11/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv11/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv11/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv11/bias/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv11/bias/Adam_1"
  input: "MaskNet//conv11/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv11/bias/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv11/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/gamma/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_10/gamma/Adam"
  input: "MaskNet//batch_normalization_10/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/gamma/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_10/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/gamma/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_10/gamma/Adam_1"
  input: "MaskNet//batch_normalization_10/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/gamma/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_10/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/beta/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_10/beta/Adam"
  input: "MaskNet//batch_normalization_10/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/beta/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_10/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/beta/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_10/beta/Adam_1"
  input: "MaskNet//batch_normalization_10/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/beta/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_10/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv12/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv12/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv12/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv12/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv12/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv12/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv12/kernel/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv12/kernel/Adam"
  input: "MaskNet//conv12/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv12/kernel/Adam/read"
  op: "Identity"
  input: "MaskNet//conv12/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv12/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv12/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv12/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv12/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv12/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv12/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv12/kernel/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv12/kernel/Adam_1"
  input: "MaskNet//conv12/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv12/kernel/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv12/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv12/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv12/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv12/bias/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv12/bias/Adam"
  input: "MaskNet//conv12/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv12/bias/Adam/read"
  op: "Identity"
  input: "MaskNet//conv12/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv12/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv12/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv12/bias/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv12/bias/Adam_1"
  input: "MaskNet//conv12/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv12/bias/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv12/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/gamma/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_11/gamma/Adam"
  input: "MaskNet//batch_normalization_11/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/gamma/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_11/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/gamma/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_11/gamma/Adam_1"
  input: "MaskNet//batch_normalization_11/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/gamma/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_11/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/beta/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_11/beta/Adam"
  input: "MaskNet//batch_normalization_11/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/beta/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_11/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/beta/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_11/beta/Adam_1"
  input: "MaskNet//batch_normalization_11/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/beta/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_11/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam/read"
  op: "Identity"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam_1"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/Adam"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/Adam/read"
  op: "Identity"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/Adam_1"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/gamma/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv13_upsample/batch_normalization/gamma/Adam"
  input: "MaskNet//conv13_upsample/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/gamma/Adam/read"
  op: "Identity"
  input: "MaskNet//conv13_upsample/batch_normalization/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/gamma/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv13_upsample/batch_normalization/gamma/Adam_1"
  input: "MaskNet//conv13_upsample/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/gamma/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv13_upsample/batch_normalization/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/beta/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv13_upsample/batch_normalization/beta/Adam"
  input: "MaskNet//conv13_upsample/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/beta/Adam/read"
  op: "Identity"
  input: "MaskNet//conv13_upsample/batch_normalization/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/beta/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv13_upsample/batch_normalization/beta/Adam_1"
  input: "MaskNet//conv13_upsample/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/beta/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv13_upsample/batch_normalization/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv14/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv14/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv14/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv14/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv14/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv14/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv14/kernel/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv14/kernel/Adam"
  input: "MaskNet//conv14/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv14/kernel/Adam/read"
  op: "Identity"
  input: "MaskNet//conv14/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv14/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv14/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv14/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv14/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv14/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv14/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv14/kernel/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv14/kernel/Adam_1"
  input: "MaskNet//conv14/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv14/kernel/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv14/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv14/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv14/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv14/bias/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv14/bias/Adam"
  input: "MaskNet//conv14/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv14/bias/Adam/read"
  op: "Identity"
  input: "MaskNet//conv14/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv14/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv14/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv14/bias/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv14/bias/Adam_1"
  input: "MaskNet//conv14/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv14/bias/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv14/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/gamma/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_12/gamma/Adam"
  input: "MaskNet//batch_normalization_12/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/gamma/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_12/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/gamma/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_12/gamma/Adam_1"
  input: "MaskNet//batch_normalization_12/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/gamma/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_12/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/beta/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_12/beta/Adam"
  input: "MaskNet//batch_normalization_12/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/beta/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_12/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/beta/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_12/beta/Adam_1"
  input: "MaskNet//batch_normalization_12/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/beta/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_12/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam/read"
  op: "Identity"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam_1"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/Adam"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/Adam/read"
  op: "Identity"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/Adam_1"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/gamma/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv15_upsample/batch_normalization/gamma/Adam"
  input: "MaskNet//conv15_upsample/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/gamma/Adam/read"
  op: "Identity"
  input: "MaskNet//conv15_upsample/batch_normalization/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/gamma/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv15_upsample/batch_normalization/gamma/Adam_1"
  input: "MaskNet//conv15_upsample/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/gamma/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv15_upsample/batch_normalization/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/beta/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv15_upsample/batch_normalization/beta/Adam"
  input: "MaskNet//conv15_upsample/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/beta/Adam/read"
  op: "Identity"
  input: "MaskNet//conv15_upsample/batch_normalization/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/beta/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv15_upsample/batch_normalization/beta/Adam_1"
  input: "MaskNet//conv15_upsample/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/beta/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv15_upsample/batch_normalization/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv16/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv16/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv16/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv16/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv16/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv16/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv16/kernel/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv16/kernel/Adam"
  input: "MaskNet//conv16/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv16/kernel/Adam/read"
  op: "Identity"
  input: "MaskNet//conv16/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv16/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "MaskNet//conv16/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv16/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "MaskNet//conv16/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "MaskNet//conv16/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MaskNet//conv16/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv16/kernel/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv16/kernel/Adam_1"
  input: "MaskNet//conv16/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv16/kernel/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv16/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv16/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv16/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv16/bias/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv16/bias/Adam"
  input: "MaskNet//conv16/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv16/bias/Adam/read"
  op: "Identity"
  input: "MaskNet//conv16/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv16/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv16/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv16/bias/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv16/bias/Adam_1"
  input: "MaskNet//conv16/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv16/bias/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv16/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/gamma/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_13/gamma/Adam"
  input: "MaskNet//batch_normalization_13/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/gamma/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_13/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/gamma/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_13/gamma/Adam_1"
  input: "MaskNet//batch_normalization_13/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/gamma/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_13/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/beta/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_13/beta/Adam"
  input: "MaskNet//batch_normalization_13/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/beta/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_13/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/beta/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_13/beta/Adam_1"
  input: "MaskNet//batch_normalization_13/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/beta/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_13/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv17/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv17/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 16
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv17/kernel/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv17/kernel/Adam"
  input: "MaskNet//conv17/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv17/kernel/Adam/read"
  op: "Identity"
  input: "MaskNet//conv17/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv17/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv17/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 16
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv17/kernel/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv17/kernel/Adam_1"
  input: "MaskNet//conv17/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv17/kernel/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv17/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv17/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv17/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv17/bias/Adam/Assign"
  op: "Assign"
  input: "MaskNet//conv17/bias/Adam"
  input: "MaskNet//conv17/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv17/bias/Adam/read"
  op: "Identity"
  input: "MaskNet//conv17/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv17/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//conv17/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//conv17/bias/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//conv17/bias/Adam_1"
  input: "MaskNet//conv17/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//conv17/bias/Adam_1/read"
  op: "Identity"
  input: "MaskNet//conv17/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/gamma/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_14/gamma/Adam"
  input: "MaskNet//batch_normalization_14/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/gamma/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_14/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/gamma/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_14/gamma/Adam_1"
  input: "MaskNet//batch_normalization_14/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/gamma/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_14/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/beta/Adam/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_14/beta/Adam"
  input: "MaskNet//batch_normalization_14/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/beta/Adam/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_14/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/beta/Adam_1/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization_14/beta/Adam_1"
  input: "MaskNet//batch_normalization_14/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/beta/Adam_1/read"
  op: "Identity"
  input: "MaskNet//batch_normalization_14/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/Adam/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-05
      }
    }
  }
}
node {
  name: "train_op/Adam/beta1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "train_op/Adam/beta2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "train_op/Adam/epsilon"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv1/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv1/kernel"
  input: "MaskNet//conv1/kernel/Adam"
  input: "MaskNet//conv1/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv1/bias"
  input: "MaskNet//conv1/bias/Adam"
  input: "MaskNet//conv1/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization/gamma"
  input: "MaskNet//batch_normalization/gamma/Adam"
  input: "MaskNet//batch_normalization/gamma/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_2/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization/beta"
  input: "MaskNet//batch_normalization/beta/Adam"
  input: "MaskNet//batch_normalization/beta/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_3/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv2_downsample/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv2_downsample/kernel"
  input: "MaskNet//conv2_downsample/kernel/Adam"
  input: "MaskNet//conv2_downsample/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_4/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv2_downsample/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv2_downsample/bias"
  input: "MaskNet//conv2_downsample/bias/Adam"
  input: "MaskNet//conv2_downsample/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_5/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_1/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_1/gamma"
  input: "MaskNet//batch_normalization_1/gamma/Adam"
  input: "MaskNet//batch_normalization_1/gamma/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_6/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_1/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_1/beta"
  input: "MaskNet//batch_normalization_1/beta/Adam"
  input: "MaskNet//batch_normalization_1/beta/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_7/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv3/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv3/kernel"
  input: "MaskNet//conv3/kernel/Adam"
  input: "MaskNet//conv3/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_8/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv3/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv3/bias"
  input: "MaskNet//conv3/bias/Adam"
  input: "MaskNet//conv3/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_9/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_2/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_2/gamma"
  input: "MaskNet//batch_normalization_2/gamma/Adam"
  input: "MaskNet//batch_normalization_2/gamma/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_10/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_2/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_2/beta"
  input: "MaskNet//batch_normalization_2/beta/Adam"
  input: "MaskNet//batch_normalization_2/beta/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_11/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv4_downsample/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv4_downsample/kernel"
  input: "MaskNet//conv4_downsample/kernel/Adam"
  input: "MaskNet//conv4_downsample/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_12/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv4_downsample/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv4_downsample/bias"
  input: "MaskNet//conv4_downsample/bias/Adam"
  input: "MaskNet//conv4_downsample/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_13/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_3/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_3/gamma"
  input: "MaskNet//batch_normalization_3/gamma/Adam"
  input: "MaskNet//batch_normalization_3/gamma/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_14/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_3/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_3/beta"
  input: "MaskNet//batch_normalization_3/beta/Adam"
  input: "MaskNet//batch_normalization_3/beta/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_15/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv5/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv5/kernel"
  input: "MaskNet//conv5/kernel/Adam"
  input: "MaskNet//conv5/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_16/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv5/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv5/bias"
  input: "MaskNet//conv5/bias/Adam"
  input: "MaskNet//conv5/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_17/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_4/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_4/gamma"
  input: "MaskNet//batch_normalization_4/gamma/Adam"
  input: "MaskNet//batch_normalization_4/gamma/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_18/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_4/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_4/beta"
  input: "MaskNet//batch_normalization_4/beta/Adam"
  input: "MaskNet//batch_normalization_4/beta/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_19/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv6/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv6/kernel"
  input: "MaskNet//conv6/kernel/Adam"
  input: "MaskNet//conv6/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_20/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv6/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv6/bias"
  input: "MaskNet//conv6/bias/Adam"
  input: "MaskNet//conv6/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_21/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_5/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_5/gamma"
  input: "MaskNet//batch_normalization_5/gamma/Adam"
  input: "MaskNet//batch_normalization_5/gamma/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_22/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_5/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_5/beta"
  input: "MaskNet//batch_normalization_5/beta/Adam"
  input: "MaskNet//batch_normalization_5/beta/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_23/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv7_atrous/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv7_atrous/kernel"
  input: "MaskNet//conv7_atrous/kernel/Adam"
  input: "MaskNet//conv7_atrous/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_24/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv7_atrous/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv7_atrous/bias"
  input: "MaskNet//conv7_atrous/bias/Adam"
  input: "MaskNet//conv7_atrous/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_25/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_6/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_6/gamma"
  input: "MaskNet//batch_normalization_6/gamma/Adam"
  input: "MaskNet//batch_normalization_6/gamma/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_26/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_6/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_6/beta"
  input: "MaskNet//batch_normalization_6/beta/Adam"
  input: "MaskNet//batch_normalization_6/beta/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_27/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv8_atrous/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv8_atrous/kernel"
  input: "MaskNet//conv8_atrous/kernel/Adam"
  input: "MaskNet//conv8_atrous/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_28/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv8_atrous/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv8_atrous/bias"
  input: "MaskNet//conv8_atrous/bias/Adam"
  input: "MaskNet//conv8_atrous/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_29/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_7/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_7/gamma"
  input: "MaskNet//batch_normalization_7/gamma/Adam"
  input: "MaskNet//batch_normalization_7/gamma/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_30/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_7/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_7/beta"
  input: "MaskNet//batch_normalization_7/beta/Adam"
  input: "MaskNet//batch_normalization_7/beta/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_31/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv9_atrous/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv9_atrous/kernel"
  input: "MaskNet//conv9_atrous/kernel/Adam"
  input: "MaskNet//conv9_atrous/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_32/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv9_atrous/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv9_atrous/bias"
  input: "MaskNet//conv9_atrous/bias/Adam"
  input: "MaskNet//conv9_atrous/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_33/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_8/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_8/gamma"
  input: "MaskNet//batch_normalization_8/gamma/Adam"
  input: "MaskNet//batch_normalization_8/gamma/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_34/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_8/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_8/beta"
  input: "MaskNet//batch_normalization_8/beta/Adam"
  input: "MaskNet//batch_normalization_8/beta/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_35/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv10_atrous/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv10_atrous/kernel"
  input: "MaskNet//conv10_atrous/kernel/Adam"
  input: "MaskNet//conv10_atrous/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_36/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv10_atrous/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv10_atrous/bias"
  input: "MaskNet//conv10_atrous/bias/Adam"
  input: "MaskNet//conv10_atrous/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_37/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_9/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_9/gamma"
  input: "MaskNet//batch_normalization_9/gamma/Adam"
  input: "MaskNet//batch_normalization_9/gamma/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_38/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_9/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_9/beta"
  input: "MaskNet//batch_normalization_9/beta/Adam"
  input: "MaskNet//batch_normalization_9/beta/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_39/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv11/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv11/kernel"
  input: "MaskNet//conv11/kernel/Adam"
  input: "MaskNet//conv11/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_40/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv11/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv11/bias"
  input: "MaskNet//conv11/bias/Adam"
  input: "MaskNet//conv11/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_41/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_10/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_10/gamma"
  input: "MaskNet//batch_normalization_10/gamma/Adam"
  input: "MaskNet//batch_normalization_10/gamma/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_42/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_10/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_10/beta"
  input: "MaskNet//batch_normalization_10/beta/Adam"
  input: "MaskNet//batch_normalization_10/beta/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_43/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv12/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv12/kernel"
  input: "MaskNet//conv12/kernel/Adam"
  input: "MaskNet//conv12/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_44/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv12/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv12/bias"
  input: "MaskNet//conv12/bias/Adam"
  input: "MaskNet//conv12/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_45/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_11/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_11/gamma"
  input: "MaskNet//batch_normalization_11/gamma/Adam"
  input: "MaskNet//batch_normalization_11/gamma/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_46/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_11/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_11/beta"
  input: "MaskNet//batch_normalization_11/beta/Adam"
  input: "MaskNet//batch_normalization_11/beta/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_47/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv13_upsample/conv13_upsample_conv/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_48/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv13_upsample/conv13_upsample_conv/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/bias"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/Adam"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_49/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv13_upsample/batch_normalization/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv13_upsample/batch_normalization/gamma"
  input: "MaskNet//conv13_upsample/batch_normalization/gamma/Adam"
  input: "MaskNet//conv13_upsample/batch_normalization/gamma/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_50/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv13_upsample/batch_normalization/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv13_upsample/batch_normalization/beta"
  input: "MaskNet//conv13_upsample/batch_normalization/beta/Adam"
  input: "MaskNet//conv13_upsample/batch_normalization/beta/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_51/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv14/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv14/kernel"
  input: "MaskNet//conv14/kernel/Adam"
  input: "MaskNet//conv14/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_52/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv14/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv14/bias"
  input: "MaskNet//conv14/bias/Adam"
  input: "MaskNet//conv14/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_53/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_12/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_12/gamma"
  input: "MaskNet//batch_normalization_12/gamma/Adam"
  input: "MaskNet//batch_normalization_12/gamma/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_54/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_12/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_12/beta"
  input: "MaskNet//batch_normalization_12/beta/Adam"
  input: "MaskNet//batch_normalization_12/beta/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_55/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv15_upsample/conv15_upsample_conv/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_56/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv15_upsample/conv15_upsample_conv/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/bias"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/Adam"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_57/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv15_upsample/batch_normalization/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv15_upsample/batch_normalization/gamma"
  input: "MaskNet//conv15_upsample/batch_normalization/gamma/Adam"
  input: "MaskNet//conv15_upsample/batch_normalization/gamma/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_58/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv15_upsample/batch_normalization/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv15_upsample/batch_normalization/beta"
  input: "MaskNet//conv15_upsample/batch_normalization/beta/Adam"
  input: "MaskNet//conv15_upsample/batch_normalization/beta/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_59/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv16/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv16/kernel"
  input: "MaskNet//conv16/kernel/Adam"
  input: "MaskNet//conv16/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_60/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv16/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv16/bias"
  input: "MaskNet//conv16/bias/Adam"
  input: "MaskNet//conv16/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_61/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_13/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_13/gamma"
  input: "MaskNet//batch_normalization_13/gamma/Adam"
  input: "MaskNet//batch_normalization_13/gamma/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_62/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_13/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_13/beta"
  input: "MaskNet//batch_normalization_13/beta/Adam"
  input: "MaskNet//batch_normalization_13/beta/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_63/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv17/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv17/kernel"
  input: "MaskNet//conv17/kernel/Adam"
  input: "MaskNet//conv17/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_64/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//conv17/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//conv17/bias"
  input: "MaskNet//conv17/bias/Adam"
  input: "MaskNet//conv17/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_65/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_14/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_14/gamma"
  input: "MaskNet//batch_normalization_14/gamma/Adam"
  input: "MaskNet//batch_normalization_14/gamma/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_66/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/update_MaskNet//batch_normalization_14/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "MaskNet//batch_normalization_14/beta"
  input: "MaskNet//batch_normalization_14/beta/Adam"
  input: "MaskNet//batch_normalization_14/beta/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/learning_rate"
  input: "train_op/Adam/beta1"
  input: "train_op/Adam/beta2"
  input: "train_op/Adam/epsilon"
  input: "train_op/cond_67/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/Adam/mul"
  op: "Mul"
  input: "train_op/beta1_power/read"
  input: "train_op/Adam/beta1"
  input: "^train_op/Adam/update_MaskNet//batch_normalization/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_1/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_1/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_10/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_10/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_11/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_11/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_12/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_12/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_13/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_13/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_14/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_14/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_2/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_2/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_3/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_3/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_4/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_4/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_5/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_5/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_6/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_6/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_7/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_7/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_8/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_8/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_9/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_9/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv1/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv1/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv10_atrous/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv10_atrous/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv11/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv11/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv12/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv12/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv13_upsample/batch_normalization/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv13_upsample/batch_normalization/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv13_upsample/conv13_upsample_conv/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv13_upsample/conv13_upsample_conv/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv14/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv14/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv15_upsample/batch_normalization/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv15_upsample/batch_normalization/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv15_upsample/conv15_upsample_conv/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv15_upsample/conv15_upsample_conv/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv16/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv16/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv17/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv17/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv2_downsample/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv2_downsample/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv3/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv3/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv4_downsample/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv4_downsample/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv5/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv5/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv6/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv6/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv7_atrous/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv7_atrous/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv8_atrous/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv8_atrous/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv9_atrous/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv9_atrous/kernel/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/Adam/Assign"
  op: "Assign"
  input: "train_op/beta1_power"
  input: "train_op/Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/Adam/mul_1"
  op: "Mul"
  input: "train_op/beta2_power/read"
  input: "train_op/Adam/beta2"
  input: "^train_op/Adam/update_MaskNet//batch_normalization/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_1/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_1/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_10/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_10/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_11/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_11/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_12/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_12/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_13/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_13/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_14/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_14/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_2/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_2/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_3/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_3/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_4/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_4/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_5/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_5/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_6/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_6/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_7/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_7/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_8/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_8/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_9/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_9/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv1/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv1/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv10_atrous/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv10_atrous/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv11/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv11/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv12/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv12/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv13_upsample/batch_normalization/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv13_upsample/batch_normalization/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv13_upsample/conv13_upsample_conv/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv13_upsample/conv13_upsample_conv/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv14/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv14/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv15_upsample/batch_normalization/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv15_upsample/batch_normalization/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv15_upsample/conv15_upsample_conv/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv15_upsample/conv15_upsample_conv/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv16/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv16/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv17/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv17/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv2_downsample/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv2_downsample/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv3/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv3/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv4_downsample/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv4_downsample/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv5/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv5/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv6/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv6/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv7_atrous/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv7_atrous/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv8_atrous/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv8_atrous/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv9_atrous/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv9_atrous/kernel/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/Adam/Assign_1"
  op: "Assign"
  input: "train_op/beta2_power"
  input: "train_op/Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/Adam"
  op: "NoOp"
  input: "^train_op/Adam/Assign"
  input: "^train_op/Adam/Assign_1"
  input: "^train_op/Adam/update_MaskNet//batch_normalization/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_1/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_1/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_10/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_10/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_11/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_11/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_12/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_12/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_13/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_13/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_14/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_14/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_2/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_2/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_3/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_3/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_4/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_4/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_5/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_5/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_6/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_6/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_7/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_7/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_8/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_8/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_9/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//batch_normalization_9/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv1/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv1/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv10_atrous/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv10_atrous/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv11/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv11/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv12/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv12/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv13_upsample/batch_normalization/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv13_upsample/batch_normalization/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv13_upsample/conv13_upsample_conv/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv13_upsample/conv13_upsample_conv/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv14/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv14/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv15_upsample/batch_normalization/beta/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv15_upsample/batch_normalization/gamma/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv15_upsample/conv15_upsample_conv/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv15_upsample/conv15_upsample_conv/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv16/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv16/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv17/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv17/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv2_downsample/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv2_downsample/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv3/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv3/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv4_downsample/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv4_downsample/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv5/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv5/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv6/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv6/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv7_atrous/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv7_atrous/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv8_atrous/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv8_atrous/kernel/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv9_atrous/bias/ApplyAdam"
  input: "^train_op/Adam/update_MaskNet//conv9_atrous/kernel/ApplyAdam"
}
node {
  name: "train_op/group_deps"
  op: "NoOp"
  input: "^train_op/Adam"
}
node {
  name: "train_op/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/add"
  op: "Add"
  input: "train_op/global_step/read"
  input: "train_op/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/Assign"
  op: "Assign"
  input: "train_op/global_step"
  input: "train_op/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator"
      }
    }
  }
}
node {
  name: "generator"
  op: "ScalarSummary"
  input: "generator/tags"
  input: "Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "input_image/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "input_image"
      }
    }
  }
}
node {
  name: "input_image"
  op: "ImageSummary"
  input: "input_image/tag"
  input: "resize/ResizeBilinear"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "bad_color"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 4
          }
        }
        int_val: 255
        int_val: 0
        int_val: 0
        int_val: 255
      }
    }
  }
  attr {
    key: "max_images"
    value {
      i: 1
    }
  }
}
node {
  name: "MaskNet//conv1/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv1/kernel/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv1/kernel/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv1/kernel/gradients/tag"
  input: "train_op/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv1/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv1/bias/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv1/bias/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv1/bias/gradients/tag"
  input: "train_op/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization/gamma/gradients/tag"
  input: "train_op/cond_2/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization/beta/gradients/tag"
  input: "train_op/cond_3/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv2_downsample/kernel/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/kernel/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv2_downsample/kernel/gradients/tag"
  input: "train_op/cond_4/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv2_downsample/bias/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv2_downsample/bias/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv2_downsample/bias/gradients/tag"
  input: "train_op/cond_5/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_1/gamma/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/gamma/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_1/gamma/gradients/tag"
  input: "train_op/cond_6/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_1/beta/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_1/beta/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_1/beta/gradients/tag"
  input: "train_op/cond_7/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv3/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv3/kernel/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv3/kernel/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv3/kernel/gradients/tag"
  input: "train_op/cond_8/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv3/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv3/bias/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv3/bias/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv3/bias/gradients/tag"
  input: "train_op/cond_9/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_2/gamma/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/gamma/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_2/gamma/gradients/tag"
  input: "train_op/cond_10/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_2/beta/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_2/beta/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_2/beta/gradients/tag"
  input: "train_op/cond_11/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv4_downsample/kernel/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/kernel/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv4_downsample/kernel/gradients/tag"
  input: "train_op/cond_12/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv4_downsample/bias/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv4_downsample/bias/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv4_downsample/bias/gradients/tag"
  input: "train_op/cond_13/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_3/gamma/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/gamma/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_3/gamma/gradients/tag"
  input: "train_op/cond_14/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_3/beta/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_3/beta/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_3/beta/gradients/tag"
  input: "train_op/cond_15/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv5/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv5/kernel/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv5/kernel/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv5/kernel/gradients/tag"
  input: "train_op/cond_16/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv5/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv5/bias/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv5/bias/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv5/bias/gradients/tag"
  input: "train_op/cond_17/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_4/gamma/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/gamma/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_4/gamma/gradients/tag"
  input: "train_op/cond_18/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_4/beta/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_4/beta/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_4/beta/gradients/tag"
  input: "train_op/cond_19/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv6/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv6/kernel/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv6/kernel/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv6/kernel/gradients/tag"
  input: "train_op/cond_20/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv6/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv6/bias/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv6/bias/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv6/bias/gradients/tag"
  input: "train_op/cond_21/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_5/gamma/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/gamma/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_5/gamma/gradients/tag"
  input: "train_op/cond_22/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_5/beta/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_5/beta/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_5/beta/gradients/tag"
  input: "train_op/cond_23/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv7_atrous/kernel/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/kernel/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv7_atrous/kernel/gradients/tag"
  input: "train_op/cond_24/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv7_atrous/bias/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv7_atrous/bias/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv7_atrous/bias/gradients/tag"
  input: "train_op/cond_25/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_6/gamma/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/gamma/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_6/gamma/gradients/tag"
  input: "train_op/cond_26/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_6/beta/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_6/beta/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_6/beta/gradients/tag"
  input: "train_op/cond_27/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv8_atrous/kernel/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/kernel/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv8_atrous/kernel/gradients/tag"
  input: "train_op/cond_28/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv8_atrous/bias/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv8_atrous/bias/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv8_atrous/bias/gradients/tag"
  input: "train_op/cond_29/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_7/gamma/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/gamma/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_7/gamma/gradients/tag"
  input: "train_op/cond_30/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_7/beta/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_7/beta/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_7/beta/gradients/tag"
  input: "train_op/cond_31/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv9_atrous/kernel/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/kernel/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv9_atrous/kernel/gradients/tag"
  input: "train_op/cond_32/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv9_atrous/bias/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv9_atrous/bias/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv9_atrous/bias/gradients/tag"
  input: "train_op/cond_33/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_8/gamma/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/gamma/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_8/gamma/gradients/tag"
  input: "train_op/cond_34/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_8/beta/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_8/beta/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_8/beta/gradients/tag"
  input: "train_op/cond_35/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv10_atrous/kernel/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/kernel/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv10_atrous/kernel/gradients/tag"
  input: "train_op/cond_36/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv10_atrous/bias/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv10_atrous/bias/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv10_atrous/bias/gradients/tag"
  input: "train_op/cond_37/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_9/gamma/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/gamma/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_9/gamma/gradients/tag"
  input: "train_op/cond_38/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_9/beta/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_9/beta/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_9/beta/gradients/tag"
  input: "train_op/cond_39/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv11/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv11/kernel/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv11/kernel/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv11/kernel/gradients/tag"
  input: "train_op/cond_40/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv11/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv11/bias/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv11/bias/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv11/bias/gradients/tag"
  input: "train_op/cond_41/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_10/gamma/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/gamma/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_10/gamma/gradients/tag"
  input: "train_op/cond_42/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_10/beta/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_10/beta/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_10/beta/gradients/tag"
  input: "train_op/cond_43/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv12/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv12/kernel/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv12/kernel/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv12/kernel/gradients/tag"
  input: "train_op/cond_44/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv12/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv12/bias/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv12/bias/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv12/bias/gradients/tag"
  input: "train_op/cond_45/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_11/gamma/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/gamma/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_11/gamma/gradients/tag"
  input: "train_op/cond_46/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_11/beta/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_11/beta/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_11/beta/gradients/tag"
  input: "train_op/cond_47/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/gradients/tag"
  input: "train_op/cond_48/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/gradients/tag"
  input: "train_op/cond_49/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv13_upsample/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv13_upsample/batch_normalization/gamma/gradients/tag"
  input: "train_op/cond_50/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv13_upsample/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv13_upsample/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv13_upsample/batch_normalization/beta/gradients/tag"
  input: "train_op/cond_51/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv14/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv14/kernel/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv14/kernel/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv14/kernel/gradients/tag"
  input: "train_op/cond_52/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv14/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv14/bias/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv14/bias/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv14/bias/gradients/tag"
  input: "train_op/cond_53/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_12/gamma/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/gamma/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_12/gamma/gradients/tag"
  input: "train_op/cond_54/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_12/beta/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_12/beta/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_12/beta/gradients/tag"
  input: "train_op/cond_55/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/gradients/tag"
  input: "train_op/cond_56/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/gradients/tag"
  input: "train_op/cond_57/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv15_upsample/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv15_upsample/batch_normalization/gamma/gradients/tag"
  input: "train_op/cond_58/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv15_upsample/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv15_upsample/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv15_upsample/batch_normalization/beta/gradients/tag"
  input: "train_op/cond_59/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv16/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv16/kernel/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv16/kernel/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv16/kernel/gradients/tag"
  input: "train_op/cond_60/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv16/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv16/bias/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv16/bias/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv16/bias/gradients/tag"
  input: "train_op/cond_61/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_13/gamma/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/gamma/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_13/gamma/gradients/tag"
  input: "train_op/cond_62/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_13/beta/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_13/beta/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_13/beta/gradients/tag"
  input: "train_op/cond_63/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv17/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv17/kernel/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv17/kernel/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv17/kernel/gradients/tag"
  input: "train_op/cond_64/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//conv17/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//conv17/bias/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//conv17/bias/gradients"
  op: "HistogramSummary"
  input: "MaskNet//conv17/bias/gradients/tag"
  input: "train_op/cond_65/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_14/gamma/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/gamma/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_14/gamma/gradients/tag"
  input: "train_op/cond_66/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MaskNet//batch_normalization_14/beta/gradients"
      }
    }
  }
}
node {
  name: "MaskNet//batch_normalization_14/beta/gradients"
  op: "HistogramSummary"
  input: "MaskNet//batch_normalization_14/beta/gradients/tag"
  input: "train_op/cond_67/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "generator"
  input: "input_image"
  input: "MaskNet//conv1/kernel/gradients"
  input: "MaskNet//conv1/bias/gradients"
  input: "MaskNet//batch_normalization/gamma/gradients"
  input: "MaskNet//batch_normalization/beta/gradients"
  input: "MaskNet//conv2_downsample/kernel/gradients"
  input: "MaskNet//conv2_downsample/bias/gradients"
  input: "MaskNet//batch_normalization_1/gamma/gradients"
  input: "MaskNet//batch_normalization_1/beta/gradients"
  input: "MaskNet//conv3/kernel/gradients"
  input: "MaskNet//conv3/bias/gradients"
  input: "MaskNet//batch_normalization_2/gamma/gradients"
  input: "MaskNet//batch_normalization_2/beta/gradients"
  input: "MaskNet//conv4_downsample/kernel/gradients"
  input: "MaskNet//conv4_downsample/bias/gradients"
  input: "MaskNet//batch_normalization_3/gamma/gradients"
  input: "MaskNet//batch_normalization_3/beta/gradients"
  input: "MaskNet//conv5/kernel/gradients"
  input: "MaskNet//conv5/bias/gradients"
  input: "MaskNet//batch_normalization_4/gamma/gradients"
  input: "MaskNet//batch_normalization_4/beta/gradients"
  input: "MaskNet//conv6/kernel/gradients"
  input: "MaskNet//conv6/bias/gradients"
  input: "MaskNet//batch_normalization_5/gamma/gradients"
  input: "MaskNet//batch_normalization_5/beta/gradients"
  input: "MaskNet//conv7_atrous/kernel/gradients"
  input: "MaskNet//conv7_atrous/bias/gradients"
  input: "MaskNet//batch_normalization_6/gamma/gradients"
  input: "MaskNet//batch_normalization_6/beta/gradients"
  input: "MaskNet//conv8_atrous/kernel/gradients"
  input: "MaskNet//conv8_atrous/bias/gradients"
  input: "MaskNet//batch_normalization_7/gamma/gradients"
  input: "MaskNet//batch_normalization_7/beta/gradients"
  input: "MaskNet//conv9_atrous/kernel/gradients"
  input: "MaskNet//conv9_atrous/bias/gradients"
  input: "MaskNet//batch_normalization_8/gamma/gradients"
  input: "MaskNet//batch_normalization_8/beta/gradients"
  input: "MaskNet//conv10_atrous/kernel/gradients"
  input: "MaskNet//conv10_atrous/bias/gradients"
  input: "MaskNet//batch_normalization_9/gamma/gradients"
  input: "MaskNet//batch_normalization_9/beta/gradients"
  input: "MaskNet//conv11/kernel/gradients"
  input: "MaskNet//conv11/bias/gradients"
  input: "MaskNet//batch_normalization_10/gamma/gradients"
  input: "MaskNet//batch_normalization_10/beta/gradients"
  input: "MaskNet//conv12/kernel/gradients"
  input: "MaskNet//conv12/bias/gradients"
  input: "MaskNet//batch_normalization_11/gamma/gradients"
  input: "MaskNet//batch_normalization_11/beta/gradients"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/gradients"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/gradients"
  input: "MaskNet//conv13_upsample/batch_normalization/gamma/gradients"
  input: "MaskNet//conv13_upsample/batch_normalization/beta/gradients"
  input: "MaskNet//conv14/kernel/gradients"
  input: "MaskNet//conv14/bias/gradients"
  input: "MaskNet//batch_normalization_12/gamma/gradients"
  input: "MaskNet//batch_normalization_12/beta/gradients"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/gradients"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/gradients"
  input: "MaskNet//conv15_upsample/batch_normalization/gamma/gradients"
  input: "MaskNet//conv15_upsample/batch_normalization/beta/gradients"
  input: "MaskNet//conv16/kernel/gradients"
  input: "MaskNet//conv16/bias/gradients"
  input: "MaskNet//batch_normalization_13/gamma/gradients"
  input: "MaskNet//batch_normalization_13/beta/gradients"
  input: "MaskNet//conv17/kernel/gradients"
  input: "MaskNet//conv17/bias/gradients"
  input: "MaskNet//batch_normalization_14/gamma/gradients"
  input: "MaskNet//batch_normalization_14/beta/gradients"
  attr {
    key: "N"
    value {
      i: 70
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "parameter_count/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\003\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod"
  op: "Prod"
  input: "parameter_count/Shape"
  input: "parameter_count/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "parameter_count/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_1"
  op: "Prod"
  input: "parameter_count/Shape_1"
  input: "parameter_count/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "parameter_count/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_2"
  op: "Prod"
  input: "parameter_count/Shape_2"
  input: "parameter_count/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "parameter_count/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_3"
  op: "Prod"
  input: "parameter_count/Shape_3"
  input: "parameter_count/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_4"
  op: "Prod"
  input: "parameter_count/Shape_4"
  input: "parameter_count/Const_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "parameter_count/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_5"
  op: "Prod"
  input: "parameter_count/Shape_5"
  input: "parameter_count/Const_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "parameter_count/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_6"
  op: "Prod"
  input: "parameter_count/Shape_6"
  input: "parameter_count/Const_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "parameter_count/Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_7"
  op: "Prod"
  input: "parameter_count/Shape_7"
  input: "parameter_count/Const_7"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_8"
  op: "Prod"
  input: "parameter_count/Shape_8"
  input: "parameter_count/Const_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_9"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "parameter_count/Const_9"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_9"
  op: "Prod"
  input: "parameter_count/Shape_9"
  input: "parameter_count/Const_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_10"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "parameter_count/Const_10"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_10"
  op: "Prod"
  input: "parameter_count/Shape_10"
  input: "parameter_count/Const_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_11"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "parameter_count/Const_11"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_11"
  op: "Prod"
  input: "parameter_count/Shape_11"
  input: "parameter_count/Const_11"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_12"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_12"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_12"
  op: "Prod"
  input: "parameter_count/Shape_12"
  input: "parameter_count/Const_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_13"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_13"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_13"
  op: "Prod"
  input: "parameter_count/Shape_13"
  input: "parameter_count/Const_13"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_14"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_14"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_14"
  op: "Prod"
  input: "parameter_count/Shape_14"
  input: "parameter_count/Const_14"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_15"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_15"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_15"
  op: "Prod"
  input: "parameter_count/Shape_15"
  input: "parameter_count/Const_15"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_16"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_16"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_16"
  op: "Prod"
  input: "parameter_count/Shape_16"
  input: "parameter_count/Const_16"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_17"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_17"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_17"
  op: "Prod"
  input: "parameter_count/Shape_17"
  input: "parameter_count/Const_17"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_18"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_18"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_18"
  op: "Prod"
  input: "parameter_count/Shape_18"
  input: "parameter_count/Const_18"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_19"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_19"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_19"
  op: "Prod"
  input: "parameter_count/Shape_19"
  input: "parameter_count/Const_19"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_20"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_20"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_20"
  op: "Prod"
  input: "parameter_count/Shape_20"
  input: "parameter_count/Const_20"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_21"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_21"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_21"
  op: "Prod"
  input: "parameter_count/Shape_21"
  input: "parameter_count/Const_21"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_22"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_22"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_22"
  op: "Prod"
  input: "parameter_count/Shape_22"
  input: "parameter_count/Const_22"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_23"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_23"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_23"
  op: "Prod"
  input: "parameter_count/Shape_23"
  input: "parameter_count/Const_23"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_24"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_24"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_24"
  op: "Prod"
  input: "parameter_count/Shape_24"
  input: "parameter_count/Const_24"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_25"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_25"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_25"
  op: "Prod"
  input: "parameter_count/Shape_25"
  input: "parameter_count/Const_25"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_26"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_26"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_26"
  op: "Prod"
  input: "parameter_count/Shape_26"
  input: "parameter_count/Const_26"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_27"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_27"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_27"
  op: "Prod"
  input: "parameter_count/Shape_27"
  input: "parameter_count/Const_27"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_28"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_28"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_28"
  op: "Prod"
  input: "parameter_count/Shape_28"
  input: "parameter_count/Const_28"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_29"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_29"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_29"
  op: "Prod"
  input: "parameter_count/Shape_29"
  input: "parameter_count/Const_29"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_30"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_30"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_30"
  op: "Prod"
  input: "parameter_count/Shape_30"
  input: "parameter_count/Const_30"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_31"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_31"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_31"
  op: "Prod"
  input: "parameter_count/Shape_31"
  input: "parameter_count/Const_31"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_32"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_32"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_32"
  op: "Prod"
  input: "parameter_count/Shape_32"
  input: "parameter_count/Const_32"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_33"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_33"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_33"
  op: "Prod"
  input: "parameter_count/Shape_33"
  input: "parameter_count/Const_33"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_34"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_34"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_34"
  op: "Prod"
  input: "parameter_count/Shape_34"
  input: "parameter_count/Const_34"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_35"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_35"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_35"
  op: "Prod"
  input: "parameter_count/Shape_35"
  input: "parameter_count/Const_35"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_36"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_36"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_36"
  op: "Prod"
  input: "parameter_count/Shape_36"
  input: "parameter_count/Const_36"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_37"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_37"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_37"
  op: "Prod"
  input: "parameter_count/Shape_37"
  input: "parameter_count/Const_37"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_38"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_38"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_38"
  op: "Prod"
  input: "parameter_count/Shape_38"
  input: "parameter_count/Const_38"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_39"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_39"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_39"
  op: "Prod"
  input: "parameter_count/Shape_39"
  input: "parameter_count/Const_39"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_40"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_40"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_40"
  op: "Prod"
  input: "parameter_count/Shape_40"
  input: "parameter_count/Const_40"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_41"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_41"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_41"
  op: "Prod"
  input: "parameter_count/Shape_41"
  input: "parameter_count/Const_41"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_42"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_42"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_42"
  op: "Prod"
  input: "parameter_count/Shape_42"
  input: "parameter_count/Const_42"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_43"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_43"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_43"
  op: "Prod"
  input: "parameter_count/Shape_43"
  input: "parameter_count/Const_43"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_44"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_44"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_44"
  op: "Prod"
  input: "parameter_count/Shape_44"
  input: "parameter_count/Const_44"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_45"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_45"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_45"
  op: "Prod"
  input: "parameter_count/Shape_45"
  input: "parameter_count/Const_45"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_46"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_46"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_46"
  op: "Prod"
  input: "parameter_count/Shape_46"
  input: "parameter_count/Const_46"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_47"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_47"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_47"
  op: "Prod"
  input: "parameter_count/Shape_47"
  input: "parameter_count/Const_47"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_48"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_48"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_48"
  op: "Prod"
  input: "parameter_count/Shape_48"
  input: "parameter_count/Const_48"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_49"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "parameter_count/Const_49"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_49"
  op: "Prod"
  input: "parameter_count/Shape_49"
  input: "parameter_count/Const_49"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_50"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "parameter_count/Const_50"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_50"
  op: "Prod"
  input: "parameter_count/Shape_50"
  input: "parameter_count/Const_50"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_51"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "parameter_count/Const_51"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_51"
  op: "Prod"
  input: "parameter_count/Shape_51"
  input: "parameter_count/Const_51"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_52"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_52"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_52"
  op: "Prod"
  input: "parameter_count/Shape_52"
  input: "parameter_count/Const_52"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_53"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "parameter_count/Const_53"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_53"
  op: "Prod"
  input: "parameter_count/Shape_53"
  input: "parameter_count/Const_53"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_54"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "parameter_count/Const_54"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_54"
  op: "Prod"
  input: "parameter_count/Shape_54"
  input: "parameter_count/Const_54"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_55"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "parameter_count/Const_55"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_55"
  op: "Prod"
  input: "parameter_count/Shape_55"
  input: "parameter_count/Const_55"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_56"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_56"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_56"
  op: "Prod"
  input: "parameter_count/Shape_56"
  input: "parameter_count/Const_56"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_57"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "parameter_count/Const_57"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_57"
  op: "Prod"
  input: "parameter_count/Shape_57"
  input: "parameter_count/Const_57"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_58"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "parameter_count/Const_58"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_58"
  op: "Prod"
  input: "parameter_count/Shape_58"
  input: "parameter_count/Const_58"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_59"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "parameter_count/Const_59"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_59"
  op: "Prod"
  input: "parameter_count/Shape_59"
  input: "parameter_count/Const_59"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_60"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_60"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_60"
  op: "Prod"
  input: "parameter_count/Shape_60"
  input: "parameter_count/Const_60"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_61"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "parameter_count/Const_61"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_61"
  op: "Prod"
  input: "parameter_count/Shape_61"
  input: "parameter_count/Const_61"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_62"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "parameter_count/Const_62"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_62"
  op: "Prod"
  input: "parameter_count/Shape_62"
  input: "parameter_count/Const_62"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_63"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "parameter_count/Const_63"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_63"
  op: "Prod"
  input: "parameter_count/Shape_63"
  input: "parameter_count/Const_63"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_64"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\020\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_64"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_64"
  op: "Prod"
  input: "parameter_count/Shape_64"
  input: "parameter_count/Const_64"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_65"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "parameter_count/Const_65"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_65"
  op: "Prod"
  input: "parameter_count/Shape_65"
  input: "parameter_count/Const_65"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_66"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "parameter_count/Const_66"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_66"
  op: "Prod"
  input: "parameter_count/Shape_66"
  input: "parameter_count/Const_66"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_67"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "parameter_count/Const_67"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_67"
  op: "Prod"
  input: "parameter_count/Shape_67"
  input: "parameter_count/Const_67"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Rank/packed"
  op: "Pack"
  input: "parameter_count/Prod"
  input: "parameter_count/Prod_1"
  input: "parameter_count/Prod_2"
  input: "parameter_count/Prod_3"
  input: "parameter_count/Prod_4"
  input: "parameter_count/Prod_5"
  input: "parameter_count/Prod_6"
  input: "parameter_count/Prod_7"
  input: "parameter_count/Prod_8"
  input: "parameter_count/Prod_9"
  input: "parameter_count/Prod_10"
  input: "parameter_count/Prod_11"
  input: "parameter_count/Prod_12"
  input: "parameter_count/Prod_13"
  input: "parameter_count/Prod_14"
  input: "parameter_count/Prod_15"
  input: "parameter_count/Prod_16"
  input: "parameter_count/Prod_17"
  input: "parameter_count/Prod_18"
  input: "parameter_count/Prod_19"
  input: "parameter_count/Prod_20"
  input: "parameter_count/Prod_21"
  input: "parameter_count/Prod_22"
  input: "parameter_count/Prod_23"
  input: "parameter_count/Prod_24"
  input: "parameter_count/Prod_25"
  input: "parameter_count/Prod_26"
  input: "parameter_count/Prod_27"
  input: "parameter_count/Prod_28"
  input: "parameter_count/Prod_29"
  input: "parameter_count/Prod_30"
  input: "parameter_count/Prod_31"
  input: "parameter_count/Prod_32"
  input: "parameter_count/Prod_33"
  input: "parameter_count/Prod_34"
  input: "parameter_count/Prod_35"
  input: "parameter_count/Prod_36"
  input: "parameter_count/Prod_37"
  input: "parameter_count/Prod_38"
  input: "parameter_count/Prod_39"
  input: "parameter_count/Prod_40"
  input: "parameter_count/Prod_41"
  input: "parameter_count/Prod_42"
  input: "parameter_count/Prod_43"
  input: "parameter_count/Prod_44"
  input: "parameter_count/Prod_45"
  input: "parameter_count/Prod_46"
  input: "parameter_count/Prod_47"
  input: "parameter_count/Prod_48"
  input: "parameter_count/Prod_49"
  input: "parameter_count/Prod_50"
  input: "parameter_count/Prod_51"
  input: "parameter_count/Prod_52"
  input: "parameter_count/Prod_53"
  input: "parameter_count/Prod_54"
  input: "parameter_count/Prod_55"
  input: "parameter_count/Prod_56"
  input: "parameter_count/Prod_57"
  input: "parameter_count/Prod_58"
  input: "parameter_count/Prod_59"
  input: "parameter_count/Prod_60"
  input: "parameter_count/Prod_61"
  input: "parameter_count/Prod_62"
  input: "parameter_count/Prod_63"
  input: "parameter_count/Prod_64"
  input: "parameter_count/Prod_65"
  input: "parameter_count/Prod_66"
  input: "parameter_count/Prod_67"
  attr {
    key: "N"
    value {
      i: 68
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 68
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "parameter_count/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "parameter_count/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "parameter_count/range"
  op: "Range"
  input: "parameter_count/range/start"
  input: "parameter_count/Rank"
  input: "parameter_count/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "parameter_count/Sum/input"
  op: "Pack"
  input: "parameter_count/Prod"
  input: "parameter_count/Prod_1"
  input: "parameter_count/Prod_2"
  input: "parameter_count/Prod_3"
  input: "parameter_count/Prod_4"
  input: "parameter_count/Prod_5"
  input: "parameter_count/Prod_6"
  input: "parameter_count/Prod_7"
  input: "parameter_count/Prod_8"
  input: "parameter_count/Prod_9"
  input: "parameter_count/Prod_10"
  input: "parameter_count/Prod_11"
  input: "parameter_count/Prod_12"
  input: "parameter_count/Prod_13"
  input: "parameter_count/Prod_14"
  input: "parameter_count/Prod_15"
  input: "parameter_count/Prod_16"
  input: "parameter_count/Prod_17"
  input: "parameter_count/Prod_18"
  input: "parameter_count/Prod_19"
  input: "parameter_count/Prod_20"
  input: "parameter_count/Prod_21"
  input: "parameter_count/Prod_22"
  input: "parameter_count/Prod_23"
  input: "parameter_count/Prod_24"
  input: "parameter_count/Prod_25"
  input: "parameter_count/Prod_26"
  input: "parameter_count/Prod_27"
  input: "parameter_count/Prod_28"
  input: "parameter_count/Prod_29"
  input: "parameter_count/Prod_30"
  input: "parameter_count/Prod_31"
  input: "parameter_count/Prod_32"
  input: "parameter_count/Prod_33"
  input: "parameter_count/Prod_34"
  input: "parameter_count/Prod_35"
  input: "parameter_count/Prod_36"
  input: "parameter_count/Prod_37"
  input: "parameter_count/Prod_38"
  input: "parameter_count/Prod_39"
  input: "parameter_count/Prod_40"
  input: "parameter_count/Prod_41"
  input: "parameter_count/Prod_42"
  input: "parameter_count/Prod_43"
  input: "parameter_count/Prod_44"
  input: "parameter_count/Prod_45"
  input: "parameter_count/Prod_46"
  input: "parameter_count/Prod_47"
  input: "parameter_count/Prod_48"
  input: "parameter_count/Prod_49"
  input: "parameter_count/Prod_50"
  input: "parameter_count/Prod_51"
  input: "parameter_count/Prod_52"
  input: "parameter_count/Prod_53"
  input: "parameter_count/Prod_54"
  input: "parameter_count/Prod_55"
  input: "parameter_count/Prod_56"
  input: "parameter_count/Prod_57"
  input: "parameter_count/Prod_58"
  input: "parameter_count/Prod_59"
  input: "parameter_count/Prod_60"
  input: "parameter_count/Prod_61"
  input: "parameter_count/Prod_62"
  input: "parameter_count/Prod_63"
  input: "parameter_count/Prod_64"
  input: "parameter_count/Prod_65"
  input: "parameter_count/Prod_66"
  input: "parameter_count/Prod_67"
  attr {
    key: "N"
    value {
      i: 68
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 68
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "parameter_count/Sum"
  op: "Sum"
  input: "parameter_count/Sum/input"
  input: "parameter_count/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 69
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 69
          }
        }
        string_val: "MaskNet//batch_normalization/beta"
        string_val: "MaskNet//batch_normalization/gamma"
        string_val: "MaskNet//batch_normalization_1/beta"
        string_val: "MaskNet//batch_normalization_1/gamma"
        string_val: "MaskNet//batch_normalization_10/beta"
        string_val: "MaskNet//batch_normalization_10/gamma"
        string_val: "MaskNet//batch_normalization_11/beta"
        string_val: "MaskNet//batch_normalization_11/gamma"
        string_val: "MaskNet//batch_normalization_12/beta"
        string_val: "MaskNet//batch_normalization_12/gamma"
        string_val: "MaskNet//batch_normalization_13/beta"
        string_val: "MaskNet//batch_normalization_13/gamma"
        string_val: "MaskNet//batch_normalization_14/beta"
        string_val: "MaskNet//batch_normalization_14/gamma"
        string_val: "MaskNet//batch_normalization_2/beta"
        string_val: "MaskNet//batch_normalization_2/gamma"
        string_val: "MaskNet//batch_normalization_3/beta"
        string_val: "MaskNet//batch_normalization_3/gamma"
        string_val: "MaskNet//batch_normalization_4/beta"
        string_val: "MaskNet//batch_normalization_4/gamma"
        string_val: "MaskNet//batch_normalization_5/beta"
        string_val: "MaskNet//batch_normalization_5/gamma"
        string_val: "MaskNet//batch_normalization_6/beta"
        string_val: "MaskNet//batch_normalization_6/gamma"
        string_val: "MaskNet//batch_normalization_7/beta"
        string_val: "MaskNet//batch_normalization_7/gamma"
        string_val: "MaskNet//batch_normalization_8/beta"
        string_val: "MaskNet//batch_normalization_8/gamma"
        string_val: "MaskNet//batch_normalization_9/beta"
        string_val: "MaskNet//batch_normalization_9/gamma"
        string_val: "MaskNet//conv1/bias"
        string_val: "MaskNet//conv1/kernel"
        string_val: "MaskNet//conv10_atrous/bias"
        string_val: "MaskNet//conv10_atrous/kernel"
        string_val: "MaskNet//conv11/bias"
        string_val: "MaskNet//conv11/kernel"
        string_val: "MaskNet//conv12/bias"
        string_val: "MaskNet//conv12/kernel"
        string_val: "MaskNet//conv13_upsample/batch_normalization/beta"
        string_val: "MaskNet//conv13_upsample/batch_normalization/gamma"
        string_val: "MaskNet//conv13_upsample/conv13_upsample_conv/bias"
        string_val: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
        string_val: "MaskNet//conv14/bias"
        string_val: "MaskNet//conv14/kernel"
        string_val: "MaskNet//conv15_upsample/batch_normalization/beta"
        string_val: "MaskNet//conv15_upsample/batch_normalization/gamma"
        string_val: "MaskNet//conv15_upsample/conv15_upsample_conv/bias"
        string_val: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
        string_val: "MaskNet//conv16/bias"
        string_val: "MaskNet//conv16/kernel"
        string_val: "MaskNet//conv17/bias"
        string_val: "MaskNet//conv17/kernel"
        string_val: "MaskNet//conv2_downsample/bias"
        string_val: "MaskNet//conv2_downsample/kernel"
        string_val: "MaskNet//conv3/bias"
        string_val: "MaskNet//conv3/kernel"
        string_val: "MaskNet//conv4_downsample/bias"
        string_val: "MaskNet//conv4_downsample/kernel"
        string_val: "MaskNet//conv5/bias"
        string_val: "MaskNet//conv5/kernel"
        string_val: "MaskNet//conv6/bias"
        string_val: "MaskNet//conv6/kernel"
        string_val: "MaskNet//conv7_atrous/bias"
        string_val: "MaskNet//conv7_atrous/kernel"
        string_val: "MaskNet//conv8_atrous/bias"
        string_val: "MaskNet//conv8_atrous/kernel"
        string_val: "MaskNet//conv9_atrous/bias"
        string_val: "MaskNet//conv9_atrous/kernel"
        string_val: "train_op/global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 69
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 69
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "MaskNet//batch_normalization/beta"
  input: "MaskNet//batch_normalization/gamma"
  input: "MaskNet//batch_normalization_1/beta"
  input: "MaskNet//batch_normalization_1/gamma"
  input: "MaskNet//batch_normalization_10/beta"
  input: "MaskNet//batch_normalization_10/gamma"
  input: "MaskNet//batch_normalization_11/beta"
  input: "MaskNet//batch_normalization_11/gamma"
  input: "MaskNet//batch_normalization_12/beta"
  input: "MaskNet//batch_normalization_12/gamma"
  input: "MaskNet//batch_normalization_13/beta"
  input: "MaskNet//batch_normalization_13/gamma"
  input: "MaskNet//batch_normalization_14/beta"
  input: "MaskNet//batch_normalization_14/gamma"
  input: "MaskNet//batch_normalization_2/beta"
  input: "MaskNet//batch_normalization_2/gamma"
  input: "MaskNet//batch_normalization_3/beta"
  input: "MaskNet//batch_normalization_3/gamma"
  input: "MaskNet//batch_normalization_4/beta"
  input: "MaskNet//batch_normalization_4/gamma"
  input: "MaskNet//batch_normalization_5/beta"
  input: "MaskNet//batch_normalization_5/gamma"
  input: "MaskNet//batch_normalization_6/beta"
  input: "MaskNet//batch_normalization_6/gamma"
  input: "MaskNet//batch_normalization_7/beta"
  input: "MaskNet//batch_normalization_7/gamma"
  input: "MaskNet//batch_normalization_8/beta"
  input: "MaskNet//batch_normalization_8/gamma"
  input: "MaskNet//batch_normalization_9/beta"
  input: "MaskNet//batch_normalization_9/gamma"
  input: "MaskNet//conv1/bias"
  input: "MaskNet//conv1/kernel"
  input: "MaskNet//conv10_atrous/bias"
  input: "MaskNet//conv10_atrous/kernel"
  input: "MaskNet//conv11/bias"
  input: "MaskNet//conv11/kernel"
  input: "MaskNet//conv12/bias"
  input: "MaskNet//conv12/kernel"
  input: "MaskNet//conv13_upsample/batch_normalization/beta"
  input: "MaskNet//conv13_upsample/batch_normalization/gamma"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/bias"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
  input: "MaskNet//conv14/bias"
  input: "MaskNet//conv14/kernel"
  input: "MaskNet//conv15_upsample/batch_normalization/beta"
  input: "MaskNet//conv15_upsample/batch_normalization/gamma"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/bias"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
  input: "MaskNet//conv16/bias"
  input: "MaskNet//conv16/kernel"
  input: "MaskNet//conv17/bias"
  input: "MaskNet//conv17/kernel"
  input: "MaskNet//conv2_downsample/bias"
  input: "MaskNet//conv2_downsample/kernel"
  input: "MaskNet//conv3/bias"
  input: "MaskNet//conv3/kernel"
  input: "MaskNet//conv4_downsample/bias"
  input: "MaskNet//conv4_downsample/kernel"
  input: "MaskNet//conv5/bias"
  input: "MaskNet//conv5/kernel"
  input: "MaskNet//conv6/bias"
  input: "MaskNet//conv6/kernel"
  input: "MaskNet//conv7_atrous/bias"
  input: "MaskNet//conv7_atrous/kernel"
  input: "MaskNet//conv8_atrous/bias"
  input: "MaskNet//conv8_atrous/kernel"
  input: "MaskNet//conv9_atrous/bias"
  input: "MaskNet//conv9_atrous/kernel"
  input: "train_op/global_step"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT32
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 69
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 69
          }
        }
        string_val: "MaskNet//batch_normalization/beta"
        string_val: "MaskNet//batch_normalization/gamma"
        string_val: "MaskNet//batch_normalization_1/beta"
        string_val: "MaskNet//batch_normalization_1/gamma"
        string_val: "MaskNet//batch_normalization_10/beta"
        string_val: "MaskNet//batch_normalization_10/gamma"
        string_val: "MaskNet//batch_normalization_11/beta"
        string_val: "MaskNet//batch_normalization_11/gamma"
        string_val: "MaskNet//batch_normalization_12/beta"
        string_val: "MaskNet//batch_normalization_12/gamma"
        string_val: "MaskNet//batch_normalization_13/beta"
        string_val: "MaskNet//batch_normalization_13/gamma"
        string_val: "MaskNet//batch_normalization_14/beta"
        string_val: "MaskNet//batch_normalization_14/gamma"
        string_val: "MaskNet//batch_normalization_2/beta"
        string_val: "MaskNet//batch_normalization_2/gamma"
        string_val: "MaskNet//batch_normalization_3/beta"
        string_val: "MaskNet//batch_normalization_3/gamma"
        string_val: "MaskNet//batch_normalization_4/beta"
        string_val: "MaskNet//batch_normalization_4/gamma"
        string_val: "MaskNet//batch_normalization_5/beta"
        string_val: "MaskNet//batch_normalization_5/gamma"
        string_val: "MaskNet//batch_normalization_6/beta"
        string_val: "MaskNet//batch_normalization_6/gamma"
        string_val: "MaskNet//batch_normalization_7/beta"
        string_val: "MaskNet//batch_normalization_7/gamma"
        string_val: "MaskNet//batch_normalization_8/beta"
        string_val: "MaskNet//batch_normalization_8/gamma"
        string_val: "MaskNet//batch_normalization_9/beta"
        string_val: "MaskNet//batch_normalization_9/gamma"
        string_val: "MaskNet//conv1/bias"
        string_val: "MaskNet//conv1/kernel"
        string_val: "MaskNet//conv10_atrous/bias"
        string_val: "MaskNet//conv10_atrous/kernel"
        string_val: "MaskNet//conv11/bias"
        string_val: "MaskNet//conv11/kernel"
        string_val: "MaskNet//conv12/bias"
        string_val: "MaskNet//conv12/kernel"
        string_val: "MaskNet//conv13_upsample/batch_normalization/beta"
        string_val: "MaskNet//conv13_upsample/batch_normalization/gamma"
        string_val: "MaskNet//conv13_upsample/conv13_upsample_conv/bias"
        string_val: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
        string_val: "MaskNet//conv14/bias"
        string_val: "MaskNet//conv14/kernel"
        string_val: "MaskNet//conv15_upsample/batch_normalization/beta"
        string_val: "MaskNet//conv15_upsample/batch_normalization/gamma"
        string_val: "MaskNet//conv15_upsample/conv15_upsample_conv/bias"
        string_val: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
        string_val: "MaskNet//conv16/bias"
        string_val: "MaskNet//conv16/kernel"
        string_val: "MaskNet//conv17/bias"
        string_val: "MaskNet//conv17/kernel"
        string_val: "MaskNet//conv2_downsample/bias"
        string_val: "MaskNet//conv2_downsample/kernel"
        string_val: "MaskNet//conv3/bias"
        string_val: "MaskNet//conv3/kernel"
        string_val: "MaskNet//conv4_downsample/bias"
        string_val: "MaskNet//conv4_downsample/kernel"
        string_val: "MaskNet//conv5/bias"
        string_val: "MaskNet//conv5/kernel"
        string_val: "MaskNet//conv6/bias"
        string_val: "MaskNet//conv6/kernel"
        string_val: "MaskNet//conv7_atrous/bias"
        string_val: "MaskNet//conv7_atrous/kernel"
        string_val: "MaskNet//conv8_atrous/bias"
        string_val: "MaskNet//conv8_atrous/kernel"
        string_val: "MaskNet//conv9_atrous/bias"
        string_val: "MaskNet//conv9_atrous/kernel"
        string_val: "train_op/global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 69
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 69
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT32
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "MaskNet//batch_normalization/beta"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "MaskNet//batch_normalization/gamma"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "MaskNet//batch_normalization_1/beta"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "MaskNet//batch_normalization_1/gamma"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "MaskNet//batch_normalization_10/beta"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "MaskNet//batch_normalization_10/gamma"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "MaskNet//batch_normalization_11/beta"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "MaskNet//batch_normalization_11/gamma"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "MaskNet//batch_normalization_12/beta"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "MaskNet//batch_normalization_12/gamma"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "MaskNet//batch_normalization_13/beta"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "MaskNet//batch_normalization_13/gamma"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "MaskNet//batch_normalization_14/beta"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "MaskNet//batch_normalization_14/gamma"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "MaskNet//batch_normalization_2/beta"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "MaskNet//batch_normalization_2/gamma"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "MaskNet//batch_normalization_3/beta"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "MaskNet//batch_normalization_3/gamma"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "MaskNet//batch_normalization_4/beta"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "MaskNet//batch_normalization_4/gamma"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "MaskNet//batch_normalization_5/beta"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "MaskNet//batch_normalization_5/gamma"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "MaskNet//batch_normalization_6/beta"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "MaskNet//batch_normalization_6/gamma"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "MaskNet//batch_normalization_7/beta"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "MaskNet//batch_normalization_7/gamma"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "MaskNet//batch_normalization_8/beta"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "MaskNet//batch_normalization_8/gamma"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "MaskNet//batch_normalization_9/beta"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "MaskNet//batch_normalization_9/gamma"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "MaskNet//conv1/bias"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "MaskNet//conv1/kernel"
  input: "save/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "MaskNet//conv10_atrous/bias"
  input: "save/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "MaskNet//conv10_atrous/kernel"
  input: "save/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "MaskNet//conv11/bias"
  input: "save/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_35"
  op: "Assign"
  input: "MaskNet//conv11/kernel"
  input: "save/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_36"
  op: "Assign"
  input: "MaskNet//conv12/bias"
  input: "save/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_37"
  op: "Assign"
  input: "MaskNet//conv12/kernel"
  input: "save/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_38"
  op: "Assign"
  input: "MaskNet//conv13_upsample/batch_normalization/beta"
  input: "save/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_39"
  op: "Assign"
  input: "MaskNet//conv13_upsample/batch_normalization/gamma"
  input: "save/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_40"
  op: "Assign"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/bias"
  input: "save/RestoreV2:40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_41"
  op: "Assign"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
  input: "save/RestoreV2:41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_42"
  op: "Assign"
  input: "MaskNet//conv14/bias"
  input: "save/RestoreV2:42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_43"
  op: "Assign"
  input: "MaskNet//conv14/kernel"
  input: "save/RestoreV2:43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_44"
  op: "Assign"
  input: "MaskNet//conv15_upsample/batch_normalization/beta"
  input: "save/RestoreV2:44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_45"
  op: "Assign"
  input: "MaskNet//conv15_upsample/batch_normalization/gamma"
  input: "save/RestoreV2:45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_46"
  op: "Assign"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/bias"
  input: "save/RestoreV2:46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_47"
  op: "Assign"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
  input: "save/RestoreV2:47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_48"
  op: "Assign"
  input: "MaskNet//conv16/bias"
  input: "save/RestoreV2:48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_49"
  op: "Assign"
  input: "MaskNet//conv16/kernel"
  input: "save/RestoreV2:49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_50"
  op: "Assign"
  input: "MaskNet//conv17/bias"
  input: "save/RestoreV2:50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_51"
  op: "Assign"
  input: "MaskNet//conv17/kernel"
  input: "save/RestoreV2:51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_52"
  op: "Assign"
  input: "MaskNet//conv2_downsample/bias"
  input: "save/RestoreV2:52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_53"
  op: "Assign"
  input: "MaskNet//conv2_downsample/kernel"
  input: "save/RestoreV2:53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_54"
  op: "Assign"
  input: "MaskNet//conv3/bias"
  input: "save/RestoreV2:54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_55"
  op: "Assign"
  input: "MaskNet//conv3/kernel"
  input: "save/RestoreV2:55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_56"
  op: "Assign"
  input: "MaskNet//conv4_downsample/bias"
  input: "save/RestoreV2:56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_57"
  op: "Assign"
  input: "MaskNet//conv4_downsample/kernel"
  input: "save/RestoreV2:57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_58"
  op: "Assign"
  input: "MaskNet//conv5/bias"
  input: "save/RestoreV2:58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_59"
  op: "Assign"
  input: "MaskNet//conv5/kernel"
  input: "save/RestoreV2:59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_60"
  op: "Assign"
  input: "MaskNet//conv6/bias"
  input: "save/RestoreV2:60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_61"
  op: "Assign"
  input: "MaskNet//conv6/kernel"
  input: "save/RestoreV2:61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_62"
  op: "Assign"
  input: "MaskNet//conv7_atrous/bias"
  input: "save/RestoreV2:62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_63"
  op: "Assign"
  input: "MaskNet//conv7_atrous/kernel"
  input: "save/RestoreV2:63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_64"
  op: "Assign"
  input: "MaskNet//conv8_atrous/bias"
  input: "save/RestoreV2:64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_65"
  op: "Assign"
  input: "MaskNet//conv8_atrous/kernel"
  input: "save/RestoreV2:65"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_66"
  op: "Assign"
  input: "MaskNet//conv9_atrous/bias"
  input: "save/RestoreV2:66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_67"
  op: "Assign"
  input: "MaskNet//conv9_atrous/kernel"
  input: "save/RestoreV2:67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_68"
  op: "Assign"
  input: "train_op/global_step"
  input: "save/RestoreV2:68"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_2"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_3"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_35"
  input: "^save/Assign_36"
  input: "^save/Assign_37"
  input: "^save/Assign_38"
  input: "^save/Assign_39"
  input: "^save/Assign_4"
  input: "^save/Assign_40"
  input: "^save/Assign_41"
  input: "^save/Assign_42"
  input: "^save/Assign_43"
  input: "^save/Assign_44"
  input: "^save/Assign_45"
  input: "^save/Assign_46"
  input: "^save/Assign_47"
  input: "^save/Assign_48"
  input: "^save/Assign_49"
  input: "^save/Assign_5"
  input: "^save/Assign_50"
  input: "^save/Assign_51"
  input: "^save/Assign_52"
  input: "^save/Assign_53"
  input: "^save/Assign_54"
  input: "^save/Assign_55"
  input: "^save/Assign_56"
  input: "^save/Assign_57"
  input: "^save/Assign_58"
  input: "^save/Assign_59"
  input: "^save/Assign_6"
  input: "^save/Assign_60"
  input: "^save/Assign_61"
  input: "^save/Assign_62"
  input: "^save/Assign_63"
  input: "^save/Assign_64"
  input: "^save/Assign_65"
  input: "^save/Assign_66"
  input: "^save/Assign_67"
  input: "^save/Assign_68"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "MaskNet//conv1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "MaskNet//conv1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "MaskNet//conv2_downsample/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "MaskNet//conv2_downsample/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_1/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_1/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_1/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_1/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "MaskNet//conv3/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "MaskNet//conv3/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_2/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_2/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_2/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_2/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "MaskNet//conv4_downsample/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "MaskNet//conv4_downsample/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_3/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_3/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_3/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_3/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "MaskNet//conv5/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "MaskNet//conv5/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_4/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_4/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_4/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_4/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "MaskNet//conv6/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "MaskNet//conv6/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_5/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_5/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_5/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_5/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "MaskNet//conv7_atrous/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "MaskNet//conv7_atrous/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_6/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_6/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_6/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_6/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "MaskNet//conv8_atrous/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "MaskNet//conv8_atrous/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_7/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_7/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_7/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_7/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "MaskNet//conv9_atrous/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "MaskNet//conv9_atrous/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_8/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_8/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_8/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_8/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "MaskNet//conv10_atrous/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "MaskNet//conv10_atrous/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_9/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_57"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_9/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_58"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_9/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_59"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_9/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_60"
  op: "IsVariableInitialized"
  input: "MaskNet//conv11/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_61"
  op: "IsVariableInitialized"
  input: "MaskNet//conv11/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_62"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_10/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_63"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_10/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_64"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_10/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_65"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_10/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_66"
  op: "IsVariableInitialized"
  input: "MaskNet//conv12/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_67"
  op: "IsVariableInitialized"
  input: "MaskNet//conv12/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_68"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_11/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_69"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_11/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_70"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_11/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_71"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_11/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_72"
  op: "IsVariableInitialized"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_73"
  op: "IsVariableInitialized"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_74"
  op: "IsVariableInitialized"
  input: "MaskNet//conv13_upsample/batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_75"
  op: "IsVariableInitialized"
  input: "MaskNet//conv13_upsample/batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_76"
  op: "IsVariableInitialized"
  input: "MaskNet//conv13_upsample/batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_77"
  op: "IsVariableInitialized"
  input: "MaskNet//conv13_upsample/batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_78"
  op: "IsVariableInitialized"
  input: "MaskNet//conv14/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_79"
  op: "IsVariableInitialized"
  input: "MaskNet//conv14/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_80"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_12/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_81"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_12/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_82"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_12/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_83"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_12/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_84"
  op: "IsVariableInitialized"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_85"
  op: "IsVariableInitialized"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_86"
  op: "IsVariableInitialized"
  input: "MaskNet//conv15_upsample/batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_87"
  op: "IsVariableInitialized"
  input: "MaskNet//conv15_upsample/batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_88"
  op: "IsVariableInitialized"
  input: "MaskNet//conv15_upsample/batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_89"
  op: "IsVariableInitialized"
  input: "MaskNet//conv15_upsample/batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_90"
  op: "IsVariableInitialized"
  input: "MaskNet//conv16/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_91"
  op: "IsVariableInitialized"
  input: "MaskNet//conv16/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_92"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_13/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_93"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_13/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_94"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_13/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_95"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_13/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_96"
  op: "IsVariableInitialized"
  input: "MaskNet//conv17/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_97"
  op: "IsVariableInitialized"
  input: "MaskNet//conv17/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_98"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_14/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_99"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_14/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_100"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_14/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_101"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_14/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_102"
  op: "IsVariableInitialized"
  input: "train_op/global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_103"
  op: "IsVariableInitialized"
  input: "train_op/beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_104"
  op: "IsVariableInitialized"
  input: "train_op/beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_105"
  op: "IsVariableInitialized"
  input: "MaskNet//conv1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_106"
  op: "IsVariableInitialized"
  input: "MaskNet//conv1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_107"
  op: "IsVariableInitialized"
  input: "MaskNet//conv1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_108"
  op: "IsVariableInitialized"
  input: "MaskNet//conv1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_109"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_110"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_111"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_112"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_113"
  op: "IsVariableInitialized"
  input: "MaskNet//conv2_downsample/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_114"
  op: "IsVariableInitialized"
  input: "MaskNet//conv2_downsample/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_115"
  op: "IsVariableInitialized"
  input: "MaskNet//conv2_downsample/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_116"
  op: "IsVariableInitialized"
  input: "MaskNet//conv2_downsample/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv2_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_117"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_1/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_118"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_1/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_119"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_1/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_120"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_1/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_121"
  op: "IsVariableInitialized"
  input: "MaskNet//conv3/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_122"
  op: "IsVariableInitialized"
  input: "MaskNet//conv3/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_123"
  op: "IsVariableInitialized"
  input: "MaskNet//conv3/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_124"
  op: "IsVariableInitialized"
  input: "MaskNet//conv3/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv3/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_125"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_2/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_126"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_2/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_127"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_2/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_128"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_2/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_129"
  op: "IsVariableInitialized"
  input: "MaskNet//conv4_downsample/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_130"
  op: "IsVariableInitialized"
  input: "MaskNet//conv4_downsample/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_131"
  op: "IsVariableInitialized"
  input: "MaskNet//conv4_downsample/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_132"
  op: "IsVariableInitialized"
  input: "MaskNet//conv4_downsample/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv4_downsample/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_133"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_3/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_134"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_3/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_135"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_3/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_136"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_3/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_137"
  op: "IsVariableInitialized"
  input: "MaskNet//conv5/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_138"
  op: "IsVariableInitialized"
  input: "MaskNet//conv5/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_139"
  op: "IsVariableInitialized"
  input: "MaskNet//conv5/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_140"
  op: "IsVariableInitialized"
  input: "MaskNet//conv5/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv5/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_141"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_4/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_142"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_4/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_143"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_4/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_144"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_4/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_145"
  op: "IsVariableInitialized"
  input: "MaskNet//conv6/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_146"
  op: "IsVariableInitialized"
  input: "MaskNet//conv6/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_147"
  op: "IsVariableInitialized"
  input: "MaskNet//conv6/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_148"
  op: "IsVariableInitialized"
  input: "MaskNet//conv6/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv6/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_149"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_5/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_150"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_5/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_151"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_5/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_152"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_5/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_153"
  op: "IsVariableInitialized"
  input: "MaskNet//conv7_atrous/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_154"
  op: "IsVariableInitialized"
  input: "MaskNet//conv7_atrous/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_155"
  op: "IsVariableInitialized"
  input: "MaskNet//conv7_atrous/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_156"
  op: "IsVariableInitialized"
  input: "MaskNet//conv7_atrous/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv7_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_157"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_6/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_158"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_6/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_159"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_6/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_160"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_6/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_161"
  op: "IsVariableInitialized"
  input: "MaskNet//conv8_atrous/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_162"
  op: "IsVariableInitialized"
  input: "MaskNet//conv8_atrous/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_163"
  op: "IsVariableInitialized"
  input: "MaskNet//conv8_atrous/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_164"
  op: "IsVariableInitialized"
  input: "MaskNet//conv8_atrous/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv8_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_165"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_7/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_166"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_7/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_167"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_7/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_168"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_7/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_169"
  op: "IsVariableInitialized"
  input: "MaskNet//conv9_atrous/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_170"
  op: "IsVariableInitialized"
  input: "MaskNet//conv9_atrous/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_171"
  op: "IsVariableInitialized"
  input: "MaskNet//conv9_atrous/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_172"
  op: "IsVariableInitialized"
  input: "MaskNet//conv9_atrous/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv9_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_173"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_8/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_174"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_8/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_175"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_8/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_176"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_8/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_177"
  op: "IsVariableInitialized"
  input: "MaskNet//conv10_atrous/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_178"
  op: "IsVariableInitialized"
  input: "MaskNet//conv10_atrous/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_179"
  op: "IsVariableInitialized"
  input: "MaskNet//conv10_atrous/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_180"
  op: "IsVariableInitialized"
  input: "MaskNet//conv10_atrous/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv10_atrous/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_181"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_9/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_182"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_9/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_183"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_9/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_184"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_9/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_185"
  op: "IsVariableInitialized"
  input: "MaskNet//conv11/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_186"
  op: "IsVariableInitialized"
  input: "MaskNet//conv11/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_187"
  op: "IsVariableInitialized"
  input: "MaskNet//conv11/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_188"
  op: "IsVariableInitialized"
  input: "MaskNet//conv11/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv11/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_189"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_10/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_190"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_10/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_191"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_10/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_192"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_10/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_193"
  op: "IsVariableInitialized"
  input: "MaskNet//conv12/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_194"
  op: "IsVariableInitialized"
  input: "MaskNet//conv12/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_195"
  op: "IsVariableInitialized"
  input: "MaskNet//conv12/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_196"
  op: "IsVariableInitialized"
  input: "MaskNet//conv12/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv12/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_197"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_11/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_198"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_11/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_199"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_11/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_200"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_11/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_201"
  op: "IsVariableInitialized"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_202"
  op: "IsVariableInitialized"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_203"
  op: "IsVariableInitialized"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_204"
  op: "IsVariableInitialized"
  input: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/conv13_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_205"
  op: "IsVariableInitialized"
  input: "MaskNet//conv13_upsample/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_206"
  op: "IsVariableInitialized"
  input: "MaskNet//conv13_upsample/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_207"
  op: "IsVariableInitialized"
  input: "MaskNet//conv13_upsample/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_208"
  op: "IsVariableInitialized"
  input: "MaskNet//conv13_upsample/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv13_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_209"
  op: "IsVariableInitialized"
  input: "MaskNet//conv14/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_210"
  op: "IsVariableInitialized"
  input: "MaskNet//conv14/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_211"
  op: "IsVariableInitialized"
  input: "MaskNet//conv14/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_212"
  op: "IsVariableInitialized"
  input: "MaskNet//conv14/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv14/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_213"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_12/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_214"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_12/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_215"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_12/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_216"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_12/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_217"
  op: "IsVariableInitialized"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_218"
  op: "IsVariableInitialized"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_219"
  op: "IsVariableInitialized"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_220"
  op: "IsVariableInitialized"
  input: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/conv15_upsample_conv/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_221"
  op: "IsVariableInitialized"
  input: "MaskNet//conv15_upsample/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_222"
  op: "IsVariableInitialized"
  input: "MaskNet//conv15_upsample/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_223"
  op: "IsVariableInitialized"
  input: "MaskNet//conv15_upsample/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_224"
  op: "IsVariableInitialized"
  input: "MaskNet//conv15_upsample/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv15_upsample/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_225"
  op: "IsVariableInitialized"
  input: "MaskNet//conv16/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_226"
  op: "IsVariableInitialized"
  input: "MaskNet//conv16/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_227"
  op: "IsVariableInitialized"
  input: "MaskNet//conv16/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_228"
  op: "IsVariableInitialized"
  input: "MaskNet//conv16/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv16/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_229"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_13/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_230"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_13/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_231"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_13/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_232"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_13/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_233"
  op: "IsVariableInitialized"
  input: "MaskNet//conv17/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_234"
  op: "IsVariableInitialized"
  input: "MaskNet//conv17/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_235"
  op: "IsVariableInitialized"
  input: "MaskNet//conv17/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_236"
  op: "IsVariableInitialized"
  input: "MaskNet//conv17/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//conv17/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_237"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_14/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_238"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_14/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_239"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_14/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_240"
  op: "IsVariableInitialized"
  input: "MaskNet//batch_normalization_14/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MaskNet//batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  input: "report_uninitialized_variables/IsVariableInitialized_22"
  input: "report_uninitialized_variables/IsVariableInitialized_23"
  input: "report_uninitialized_variables/IsVariableInitialized_24"
  input: "report_uninitialized_variables/IsVariableInitialized_25"
  input: "report_uninitialized_variables/IsVariableInitialized_26"
  input: "report_uninitialized_variables/IsVariableInitialized_27"
  input: "report_uninitialized_variables/IsVariableInitialized_28"
  input: "report_uninitialized_variables/IsVariableInitialized_29"
  input: "report_uninitialized_variables/IsVariableInitialized_30"
  input: "report_uninitialized_variables/IsVariableInitialized_31"
  input: "report_uninitialized_variables/IsVariableInitialized_32"
  input: "report_uninitialized_variables/IsVariableInitialized_33"
  input: "report_uninitialized_variables/IsVariableInitialized_34"
  input: "report_uninitialized_variables/IsVariableInitialized_35"
  input: "report_uninitialized_variables/IsVariableInitialized_36"
  input: "report_uninitialized_variables/IsVariableInitialized_37"
  input: "report_uninitialized_variables/IsVariableInitialized_38"
  input: "report_uninitialized_variables/IsVariableInitialized_39"
  input: "report_uninitialized_variables/IsVariableInitialized_40"
  input: "report_uninitialized_variables/IsVariableInitialized_41"
  input: "report_uninitialized_variables/IsVariableInitialized_42"
  input: "report_uninitialized_variables/IsVariableInitialized_43"
  input: "report_uninitialized_variables/IsVariableInitialized_44"
  input: "report_uninitialized_variables/IsVariableInitialized_45"
  input: "report_uninitialized_variables/IsVariableInitialized_46"
  input: "report_uninitialized_variables/IsVariableInitialized_47"
  input: "report_uninitialized_variables/IsVariableInitialized_48"
  input: "report_uninitialized_variables/IsVariableInitialized_49"
  input: "report_uninitialized_variables/IsVariableInitialized_50"
  input: "report_uninitialized_variables/IsVariableInitialized_51"
  input: "report_uninitialized_variables/IsVariableInitialized_52"
  input: "report_uninitialized_variables/IsVariableInitialized_53"
  input: "report_uninitialized_variables/IsVariableInitialized_54"
  input: "report_uninitialized_variables/IsVariableInitialized_55"
  input: "report_uninitialized_variables/IsVariableInitialized_56"
  input: "report_uninitialized_variables/IsVariableInitialized_57"
  input: "report_uninitialized_variables/IsVariableInitialized_58"
  input: "report_uninitialized_variables/IsVariableInitialized_59"
  input: "report_uninitialized_variables/IsVariableInitialized_60"
  input: "report_uninitialized_variables/IsVariableInitialized_61"
  input: "report_uninitialized_variables/IsVariableInitialized_62"
  input: "report_uninitialized_variables/IsVariableInitialized_63"
  input: "report_uninitialized_variables/IsVariableInitialized_64"
  input: "report_uninitialized_variables/IsVariableInitialized_65"
  input: "report_uninitialized_variables/IsVariableInitialized_66"
  input: "report_uninitialized_variables/IsVariableInitialized_67"
  input: "report_uninitialized_variables/IsVariableInitialized_68"
  input: "report_uninitialized_variables/IsVariableInitialized_69"
  input: "report_uninitialized_variables/IsVariableInitialized_70"
  input: "report_uninitialized_variables/IsVariableInitialized_71"
  input: "report_uninitialized_variables/IsVariableInitialized_72"
  input: "report_uninitialized_variables/IsVariableInitialized_73"
  input: "report_uninitialized_variables/IsVariableInitialized_74"
  input: "report_uninitialized_variables/IsVariableInitialized_75"
  input: "report_uninitialized_variables/IsVariableInitialized_76"
  input: "report_uninitialized_variables/IsVariableInitialized_77"
  input: "report_uninitialized_variables/IsVariableInitialized_78"
  input: "report_uninitialized_variables/IsVariableInitialized_79"
  input: "report_uninitialized_variables/IsVariableInitialized_80"
  input: "report_uninitialized_variables/IsVariableInitialized_81"
  input: "report_uninitialized_variables/IsVariableInitialized_82"
  input: "report_uninitialized_variables/IsVariableInitialized_83"
  input: "report_uninitialized_variables/IsVariableInitialized_84"
  input: "report_uninitialized_variables/IsVariableInitialized_85"
  input: "report_uninitialized_variables/IsVariableInitialized_86"
  input: "report_uninitialized_variables/IsVariableInitialized_87"
  input: "report_uninitialized_variables/IsVariableInitialized_88"
  input: "report_uninitialized_variables/IsVariableInitialized_89"
  input: "report_uninitialized_variables/IsVariableInitialized_90"
  input: "report_uninitialized_variables/IsVariableInitialized_91"
  input: "report_uninitialized_variables/IsVariableInitialized_92"
  input: "report_uninitialized_variables/IsVariableInitialized_93"
  input: "report_uninitialized_variables/IsVariableInitialized_94"
  input: "report_uninitialized_variables/IsVariableInitialized_95"
  input: "report_uninitialized_variables/IsVariableInitialized_96"
  input: "report_uninitialized_variables/IsVariableInitialized_97"
  input: "report_uninitialized_variables/IsVariableInitialized_98"
  input: "report_uninitialized_variables/IsVariableInitialized_99"
  input: "report_uninitialized_variables/IsVariableInitialized_100"
  input: "report_uninitialized_variables/IsVariableInitialized_101"
  input: "report_uninitialized_variables/IsVariableInitialized_102"
  input: "report_uninitialized_variables/IsVariableInitialized_103"
  input: "report_uninitialized_variables/IsVariableInitialized_104"
  input: "report_uninitialized_variables/IsVariableInitialized_105"
  input: "report_uninitialized_variables/IsVariableInitialized_106"
  input: "report_uninitialized_variables/IsVariableInitialized_107"
  input: "report_uninitialized_variables/IsVariableInitialized_108"
  input: "report_uninitialized_variables/IsVariableInitialized_109"
  input: "report_uninitialized_variables/IsVariableInitialized_110"
  input: "report_uninitialized_variables/IsVariableInitialized_111"
  input: "report_uninitialized_variables/IsVariableInitialized_112"
  input: "report_uninitialized_variables/IsVariableInitialized_113"
  input: "report_uninitialized_variables/IsVariableInitialized_114"
  input: "report_uninitialized_variables/IsVariableInitialized_115"
  input: "report_uninitialized_variables/IsVariableInitialized_116"
  input: "report_uninitialized_variables/IsVariableInitialized_117"
  input: "report_uninitialized_variables/IsVariableInitialized_118"
  input: "report_uninitialized_variables/IsVariableInitialized_119"
  input: "report_uninitialized_variables/IsVariableInitialized_120"
  input: "report_uninitialized_variables/IsVariableInitialized_121"
  input: "report_uninitialized_variables/IsVariableInitialized_122"
  input: "report_uninitialized_variables/IsVariableInitialized_123"
  input: "report_uninitialized_variables/IsVariableInitialized_124"
  input: "report_uninitialized_variables/IsVariableInitialized_125"
  input: "report_uninitialized_variables/IsVariableInitialized_126"
  input: "report_uninitialized_variables/IsVariableInitialized_127"
  input: "report_uninitialized_variables/IsVariableInitialized_128"
  input: "report_uninitialized_variables/IsVariableInitialized_129"
  input: "report_uninitialized_variables/IsVariableInitialized_130"
  input: "report_uninitialized_variables/IsVariableInitialized_131"
  input: "report_uninitialized_variables/IsVariableInitialized_132"
  input: "report_uninitialized_variables/IsVariableInitialized_133"
  input: "report_uninitialized_variables/IsVariableInitialized_134"
  input: "report_uninitialized_variables/IsVariableInitialized_135"
  input: "report_uninitialized_variables/IsVariableInitialized_136"
  input: "report_uninitialized_variables/IsVariableInitialized_137"
  input: "report_uninitialized_variables/IsVariableInitialized_138"
  input: "report_uninitialized_variables/IsVariableInitialized_139"
  input: "report_uninitialized_variables/IsVariableInitialized_140"
  input: "report_uninitialized_variables/IsVariableInitialized_141"
  input: "report_uninitialized_variables/IsVariableInitialized_142"
  input: "report_uninitialized_variables/IsVariableInitialized_143"
  input: "report_uninitialized_variables/IsVariableInitialized_144"
  input: "report_uninitialized_variables/IsVariableInitialized_145"
  input: "report_uninitialized_variables/IsVariableInitialized_146"
  input: "report_uninitialized_variables/IsVariableInitialized_147"
  input: "report_uninitialized_variables/IsVariableInitialized_148"
  input: "report_uninitialized_variables/IsVariableInitialized_149"
  input: "report_uninitialized_variables/IsVariableInitialized_150"
  input: "report_uninitialized_variables/IsVariableInitialized_151"
  input: "report_uninitialized_variables/IsVariableInitialized_152"
  input: "report_uninitialized_variables/IsVariableInitialized_153"
  input: "report_uninitialized_variables/IsVariableInitialized_154"
  input: "report_uninitialized_variables/IsVariableInitialized_155"
  input: "report_uninitialized_variables/IsVariableInitialized_156"
  input: "report_uninitialized_variables/IsVariableInitialized_157"
  input: "report_uninitialized_variables/IsVariableInitialized_158"
  input: "report_uninitialized_variables/IsVariableInitialized_159"
  input: "report_uninitialized_variables/IsVariableInitialized_160"
  input: "report_uninitialized_variables/IsVariableInitialized_161"
  input: "report_uninitialized_variables/IsVariableInitialized_162"
  input: "report_uninitialized_variables/IsVariableInitialized_163"
  input: "report_uninitialized_variables/IsVariableInitialized_164"
  input: "report_uninitialized_variables/IsVariableInitialized_165"
  input: "report_uninitialized_variables/IsVariableInitialized_166"
  input: "report_uninitialized_variables/IsVariableInitialized_167"
  input: "report_uninitialized_variables/IsVariableInitialized_168"
  input: "report_uninitialized_variables/IsVariableInitialized_169"
  input: "report_uninitialized_variables/IsVariableInitialized_170"
  input: "report_uninitialized_variables/IsVariableInitialized_171"
  input: "report_uninitialized_variables/IsVariableInitialized_172"
  input: "report_uninitialized_variables/IsVariableInitialized_173"
  input: "report_uninitialized_variables/IsVariableInitialized_174"
  input: "report_uninitialized_variables/IsVariableInitialized_175"
  input: "report_uninitialized_variables/IsVariableInitialized_176"
  input: "report_uninitialized_variables/IsVariableInitialized_177"
  input: "report_uninitialized_variables/IsVariableInitialized_178"
  input: "report_uninitialized_variables/IsVariableInitialized_179"
  input: "report_uninitialized_variables/IsVariableInitialized_180"
  input: "report_uninitialized_variables/IsVariableInitialized_181"
  input: "report_uninitialized_variables/IsVariableInitialized_182"
  input: "report_uninitialized_variables/IsVariableInitialized_183"
  input: "report_uninitialized_variables/IsVariableInitialized_184"
  input: "report_uninitialized_variables/IsVariableInitialized_185"
  input: "report_uninitialized_variables/IsVariableInitialized_186"
  input: "report_uninitialized_variables/IsVariableInitialized_187"
  input: "report_uninitialized_variables/IsVariableInitialized_188"
  input: "report_uninitialized_variables/IsVariableInitialized_189"
  input: "report_uninitialized_variables/IsVariableInitialized_190"
  input: "report_uninitialized_variables/IsVariableInitialized_191"
  input: "report_uninitialized_variables/IsVariableInitialized_192"
  input: "report_uninitialized_variables/IsVariableInitialized_193"
  input: "report_uninitialized_variables/IsVariableInitialized_194"
  input: "report_uninitialized_variables/IsVariableInitialized_195"
  input: "report_uninitialized_variables/IsVariableInitialized_196"
  input: "report_uninitialized_variables/IsVariableInitialized_197"
  input: "report_uninitialized_variables/IsVariableInitialized_198"
  input: "report_uninitialized_variables/IsVariableInitialized_199"
  input: "report_uninitialized_variables/IsVariableInitialized_200"
  input: "report_uninitialized_variables/IsVariableInitialized_201"
  input: "report_uninitialized_variables/IsVariableInitialized_202"
  input: "report_uninitialized_variables/IsVariableInitialized_203"
  input: "report_uninitialized_variables/IsVariableInitialized_204"
  input: "report_uninitialized_variables/IsVariableInitialized_205"
  input: "report_uninitialized_variables/IsVariableInitialized_206"
  input: "report_uninitialized_variables/IsVariableInitialized_207"
  input: "report_uninitialized_variables/IsVariableInitialized_208"
  input: "report_uninitialized_variables/IsVariableInitialized_209"
  input: "report_uninitialized_variables/IsVariableInitialized_210"
  input: "report_uninitialized_variables/IsVariableInitialized_211"
  input: "report_uninitialized_variables/IsVariableInitialized_212"
  input: "report_uninitialized_variables/IsVariableInitialized_213"
  input: "report_uninitialized_variables/IsVariableInitialized_214"
  input: "report_uninitialized_variables/IsVariableInitialized_215"
  input: "report_uninitialized_variables/IsVariableInitialized_216"
  input: "report_uninitialized_variables/IsVariableInitialized_217"
  input: "report_uninitialized_variables/IsVariableInitialized_218"
  input: "report_uninitialized_variables/IsVariableInitialized_219"
  input: "report_uninitialized_variables/IsVariableInitialized_220"
  input: "report_uninitialized_variables/IsVariableInitialized_221"
  input: "report_uninitialized_variables/IsVariableInitialized_222"
  input: "report_uninitialized_variables/IsVariableInitialized_223"
  input: "report_uninitialized_variables/IsVariableInitialized_224"
  input: "report_uninitialized_variables/IsVariableInitialized_225"
  input: "report_uninitialized_variables/IsVariableInitialized_226"
  input: "report_uninitialized_variables/IsVariableInitialized_227"
  input: "report_uninitialized_variables/IsVariableInitialized_228"
  input: "report_uninitialized_variables/IsVariableInitialized_229"
  input: "report_uninitialized_variables/IsVariableInitialized_230"
  input: "report_uninitialized_variables/IsVariableInitialized_231"
  input: "report_uninitialized_variables/IsVariableInitialized_232"
  input: "report_uninitialized_variables/IsVariableInitialized_233"
  input: "report_uninitialized_variables/IsVariableInitialized_234"
  input: "report_uninitialized_variables/IsVariableInitialized_235"
  input: "report_uninitialized_variables/IsVariableInitialized_236"
  input: "report_uninitialized_variables/IsVariableInitialized_237"
  input: "report_uninitialized_variables/IsVariableInitialized_238"
  input: "report_uninitialized_variables/IsVariableInitialized_239"
  input: "report_uninitialized_variables/IsVariableInitialized_240"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 241
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 241
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 241
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 241
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 241
          }
        }
        string_val: "MaskNet//conv1/kernel"
        string_val: "MaskNet//conv1/bias"
        string_val: "MaskNet//batch_normalization/gamma"
        string_val: "MaskNet//batch_normalization/beta"
        string_val: "MaskNet//batch_normalization/moving_mean"
        string_val: "MaskNet//batch_normalization/moving_variance"
        string_val: "MaskNet//conv2_downsample/kernel"
        string_val: "MaskNet//conv2_downsample/bias"
        string_val: "MaskNet//batch_normalization_1/gamma"
        string_val: "MaskNet//batch_normalization_1/beta"
        string_val: "MaskNet//batch_normalization_1/moving_mean"
        string_val: "MaskNet//batch_normalization_1/moving_variance"
        string_val: "MaskNet//conv3/kernel"
        string_val: "MaskNet//conv3/bias"
        string_val: "MaskNet//batch_normalization_2/gamma"
        string_val: "MaskNet//batch_normalization_2/beta"
        string_val: "MaskNet//batch_normalization_2/moving_mean"
        string_val: "MaskNet//batch_normalization_2/moving_variance"
        string_val: "MaskNet//conv4_downsample/kernel"
        string_val: "MaskNet//conv4_downsample/bias"
        string_val: "MaskNet//batch_normalization_3/gamma"
        string_val: "MaskNet//batch_normalization_3/beta"
        string_val: "MaskNet//batch_normalization_3/moving_mean"
        string_val: "MaskNet//batch_normalization_3/moving_variance"
        string_val: "MaskNet//conv5/kernel"
        string_val: "MaskNet//conv5/bias"
        string_val: "MaskNet//batch_normalization_4/gamma"
        string_val: "MaskNet//batch_normalization_4/beta"
        string_val: "MaskNet//batch_normalization_4/moving_mean"
        string_val: "MaskNet//batch_normalization_4/moving_variance"
        string_val: "MaskNet//conv6/kernel"
        string_val: "MaskNet//conv6/bias"
        string_val: "MaskNet//batch_normalization_5/gamma"
        string_val: "MaskNet//batch_normalization_5/beta"
        string_val: "MaskNet//batch_normalization_5/moving_mean"
        string_val: "MaskNet//batch_normalization_5/moving_variance"
        string_val: "MaskNet//conv7_atrous/kernel"
        string_val: "MaskNet//conv7_atrous/bias"
        string_val: "MaskNet//batch_normalization_6/gamma"
        string_val: "MaskNet//batch_normalization_6/beta"
        string_val: "MaskNet//batch_normalization_6/moving_mean"
        string_val: "MaskNet//batch_normalization_6/moving_variance"
        string_val: "MaskNet//conv8_atrous/kernel"
        string_val: "MaskNet//conv8_atrous/bias"
        string_val: "MaskNet//batch_normalization_7/gamma"
        string_val: "MaskNet//batch_normalization_7/beta"
        string_val: "MaskNet//batch_normalization_7/moving_mean"
        string_val: "MaskNet//batch_normalization_7/moving_variance"
        string_val: "MaskNet//conv9_atrous/kernel"
        string_val: "MaskNet//conv9_atrous/bias"
        string_val: "MaskNet//batch_normalization_8/gamma"
        string_val: "MaskNet//batch_normalization_8/beta"
        string_val: "MaskNet//batch_normalization_8/moving_mean"
        string_val: "MaskNet//batch_normalization_8/moving_variance"
        string_val: "MaskNet//conv10_atrous/kernel"
        string_val: "MaskNet//conv10_atrous/bias"
        string_val: "MaskNet//batch_normalization_9/gamma"
        string_val: "MaskNet//batch_normalization_9/beta"
        string_val: "MaskNet//batch_normalization_9/moving_mean"
        string_val: "MaskNet//batch_normalization_9/moving_variance"
        string_val: "MaskNet//conv11/kernel"
        string_val: "MaskNet//conv11/bias"
        string_val: "MaskNet//batch_normalization_10/gamma"
        string_val: "MaskNet//batch_normalization_10/beta"
        string_val: "MaskNet//batch_normalization_10/moving_mean"
        string_val: "MaskNet//batch_normalization_10/moving_variance"
        string_val: "MaskNet//conv12/kernel"
        string_val: "MaskNet//conv12/bias"
        string_val: "MaskNet//batch_normalization_11/gamma"
        string_val: "MaskNet//batch_normalization_11/beta"
        string_val: "MaskNet//batch_normalization_11/moving_mean"
        string_val: "MaskNet//batch_normalization_11/moving_variance"
        string_val: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel"
        string_val: "MaskNet//conv13_upsample/conv13_upsample_conv/bias"
        string_val: "MaskNet//conv13_upsample/batch_normalization/gamma"
        string_val: "MaskNet//conv13_upsample/batch_normalization/beta"
        string_val: "MaskNet//conv13_upsample/batch_normalization/moving_mean"
        string_val: "MaskNet//conv13_upsample/batch_normalization/moving_variance"
        string_val: "MaskNet//conv14/kernel"
        string_val: "MaskNet//conv14/bias"
        string_val: "MaskNet//batch_normalization_12/gamma"
        string_val: "MaskNet//batch_normalization_12/beta"
        string_val: "MaskNet//batch_normalization_12/moving_mean"
        string_val: "MaskNet//batch_normalization_12/moving_variance"
        string_val: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel"
        string_val: "MaskNet//conv15_upsample/conv15_upsample_conv/bias"
        string_val: "MaskNet//conv15_upsample/batch_normalization/gamma"
        string_val: "MaskNet//conv15_upsample/batch_normalization/beta"
        string_val: "MaskNet//conv15_upsample/batch_normalization/moving_mean"
        string_val: "MaskNet//conv15_upsample/batch_normalization/moving_variance"
        string_val: "MaskNet//conv16/kernel"
        string_val: "MaskNet//conv16/bias"
        string_val: "MaskNet//batch_normalization_13/gamma"
        string_val: "MaskNet//batch_normalization_13/beta"
        string_val: "MaskNet//batch_normalization_13/moving_mean"
        string_val: "MaskNet//batch_normalization_13/moving_variance"
        string_val: "MaskNet//conv17/kernel"
        string_val: "MaskNet//conv17/bias"
        string_val: "MaskNet//batch_normalization_14/gamma"
        string_val: "MaskNet//batch_normalization_14/beta"
        string_val: "MaskNet//batch_normalization_14/moving_mean"
        string_val: "MaskNet//batch_normalization_14/moving_variance"
        string_val: "train_op/global_step"
        string_val: "train_op/beta1_power"
        string_val: "train_op/beta2_power"
        string_val: "MaskNet//conv1/kernel/Adam"
        string_val: "MaskNet//conv1/kernel/Adam_1"
        string_val: "MaskNet//conv1/bias/Adam"
        string_val: "MaskNet//conv1/bias/Adam_1"
        string_val: "MaskNet//batch_normalization/gamma/Adam"
        string_val: "MaskNet//batch_normalization/gamma/Adam_1"
        string_val: "MaskNet//batch_normalization/beta/Adam"
        string_val: "MaskNet//batch_normalization/beta/Adam_1"
        string_val: "MaskNet//conv2_downsample/kernel/Adam"
        string_val: "MaskNet//conv2_downsample/kernel/Adam_1"
        string_val: "MaskNet//conv2_downsample/bias/Adam"
        string_val: "MaskNet//conv2_downsample/bias/Adam_1"
        string_val: "MaskNet//batch_normalization_1/gamma/Adam"
        string_val: "MaskNet//batch_normalization_1/gamma/Adam_1"
        string_val: "MaskNet//batch_normalization_1/beta/Adam"
        string_val: "MaskNet//batch_normalization_1/beta/Adam_1"
        string_val: "MaskNet//conv3/kernel/Adam"
        string_val: "MaskNet//conv3/kernel/Adam_1"
        string_val: "MaskNet//conv3/bias/Adam"
        string_val: "MaskNet//conv3/bias/Adam_1"
        string_val: "MaskNet//batch_normalization_2/gamma/Adam"
        string_val: "MaskNet//batch_normalization_2/gamma/Adam_1"
        string_val: "MaskNet//batch_normalization_2/beta/Adam"
        string_val: "MaskNet//batch_normalization_2/beta/Adam_1"
        string_val: "MaskNet//conv4_downsample/kernel/Adam"
        string_val: "MaskNet//conv4_downsample/kernel/Adam_1"
        string_val: "MaskNet//conv4_downsample/bias/Adam"
        string_val: "MaskNet//conv4_downsample/bias/Adam_1"
        string_val: "MaskNet//batch_normalization_3/gamma/Adam"
        string_val: "MaskNet//batch_normalization_3/gamma/Adam_1"
        string_val: "MaskNet//batch_normalization_3/beta/Adam"
        string_val: "MaskNet//batch_normalization_3/beta/Adam_1"
        string_val: "MaskNet//conv5/kernel/Adam"
        string_val: "MaskNet//conv5/kernel/Adam_1"
        string_val: "MaskNet//conv5/bias/Adam"
        string_val: "MaskNet//conv5/bias/Adam_1"
        string_val: "MaskNet//batch_normalization_4/gamma/Adam"
        string_val: "MaskNet//batch_normalization_4/gamma/Adam_1"
        string_val: "MaskNet//batch_normalization_4/beta/Adam"
        string_val: "MaskNet//batch_normalization_4/beta/Adam_1"
        string_val: "MaskNet//conv6/kernel/Adam"
        string_val: "MaskNet//conv6/kernel/Adam_1"
        string_val: "MaskNet//conv6/bias/Adam"
        string_val: "MaskNet//conv6/bias/Adam_1"
        string_val: "MaskNet//batch_normalization_5/gamma/Adam"
        string_val: "MaskNet//batch_normalization_5/gamma/Adam_1"
        string_val: "MaskNet//batch_normalization_5/beta/Adam"
        string_val: "MaskNet//batch_normalization_5/beta/Adam_1"
        string_val: "MaskNet//conv7_atrous/kernel/Adam"
        string_val: "MaskNet//conv7_atrous/kernel/Adam_1"
        string_val: "MaskNet//conv7_atrous/bias/Adam"
        string_val: "MaskNet//conv7_atrous/bias/Adam_1"
        string_val: "MaskNet//batch_normalization_6/gamma/Adam"
        string_val: "MaskNet//batch_normalization_6/gamma/Adam_1"
        string_val: "MaskNet//batch_normalization_6/beta/Adam"
        string_val: "MaskNet//batch_normalization_6/beta/Adam_1"
        string_val: "MaskNet//conv8_atrous/kernel/Adam"
        string_val: "MaskNet//conv8_atrous/kernel/Adam_1"
        string_val: "MaskNet//conv8_atrous/bias/Adam"
        string_val: "MaskNet//conv8_atrous/bias/Adam_1"
        string_val: "MaskNet//batch_normalization_7/gamma/Adam"
        string_val: "MaskNet//batch_normalization_7/gamma/Adam_1"
        string_val: "MaskNet//batch_normalization_7/beta/Adam"
        string_val: "MaskNet//batch_normalization_7/beta/Adam_1"
        string_val: "MaskNet//conv9_atrous/kernel/Adam"
        string_val: "MaskNet//conv9_atrous/kernel/Adam_1"
        string_val: "MaskNet//conv9_atrous/bias/Adam"
        string_val: "MaskNet//conv9_atrous/bias/Adam_1"
        string_val: "MaskNet//batch_normalization_8/gamma/Adam"
        string_val: "MaskNet//batch_normalization_8/gamma/Adam_1"
        string_val: "MaskNet//batch_normalization_8/beta/Adam"
        string_val: "MaskNet//batch_normalization_8/beta/Adam_1"
        string_val: "MaskNet//conv10_atrous/kernel/Adam"
        string_val: "MaskNet//conv10_atrous/kernel/Adam_1"
        string_val: "MaskNet//conv10_atrous/bias/Adam"
        string_val: "MaskNet//conv10_atrous/bias/Adam_1"
        string_val: "MaskNet//batch_normalization_9/gamma/Adam"
        string_val: "MaskNet//batch_normalization_9/gamma/Adam_1"
        string_val: "MaskNet//batch_normalization_9/beta/Adam"
        string_val: "MaskNet//batch_normalization_9/beta/Adam_1"
        string_val: "MaskNet//conv11/kernel/Adam"
        string_val: "MaskNet//conv11/kernel/Adam_1"
        string_val: "MaskNet//conv11/bias/Adam"
        string_val: "MaskNet//conv11/bias/Adam_1"
        string_val: "MaskNet//batch_normalization_10/gamma/Adam"
        string_val: "MaskNet//batch_normalization_10/gamma/Adam_1"
        string_val: "MaskNet//batch_normalization_10/beta/Adam"
        string_val: "MaskNet//batch_normalization_10/beta/Adam_1"
        string_val: "MaskNet//conv12/kernel/Adam"
        string_val: "MaskNet//conv12/kernel/Adam_1"
        string_val: "MaskNet//conv12/bias/Adam"
        string_val: "MaskNet//conv12/bias/Adam_1"
        string_val: "MaskNet//batch_normalization_11/gamma/Adam"
        string_val: "MaskNet//batch_normalization_11/gamma/Adam_1"
        string_val: "MaskNet//batch_normalization_11/beta/Adam"
        string_val: "MaskNet//batch_normalization_11/beta/Adam_1"
        string_val: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam"
        string_val: "MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam_1"
        string_val: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/Adam"
        string_val: "MaskNet//conv13_upsample/conv13_upsample_conv/bias/Adam_1"
        string_val: "MaskNet//conv13_upsample/batch_normalization/gamma/Adam"
        string_val: "MaskNet//conv13_upsample/batch_normalization/gamma/Adam_1"
        string_val: "MaskNet//conv13_upsample/batch_normalization/beta/Adam"
        string_val: "MaskNet//conv13_upsample/batch_normalization/beta/Adam_1"
        string_val: "MaskNet//conv14/kernel/Adam"
        string_val: "MaskNet//conv14/kernel/Adam_1"
        string_val: "MaskNet//conv14/bias/Adam"
        string_val: "MaskNet//conv14/bias/Adam_1"
        string_val: "MaskNet//batch_normalization_12/gamma/Adam"
        string_val: "MaskNet//batch_normalization_12/gamma/Adam_1"
        string_val: "MaskNet//batch_normalization_12/beta/Adam"
        string_val: "MaskNet//batch_normalization_12/beta/Adam_1"
        string_val: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam"
        string_val: "MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam_1"
        string_val: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/Adam"
        string_val: "MaskNet//conv15_upsample/conv15_upsample_conv/bias/Adam_1"
        string_val: "MaskNet//conv15_upsample/batch_normalization/gamma/Adam"
        string_val: "MaskNet//conv15_upsample/batch_normalization/gamma/Adam_1"
        string_val: "MaskNet//conv15_upsample/batch_normalization/beta/Adam"
        string_val: "MaskNet//conv15_upsample/batch_normalization/beta/Adam_1"
        string_val: "MaskNet//conv16/kernel/Adam"
        string_val: "MaskNet//conv16/kernel/Adam_1"
        string_val: "MaskNet//conv16/bias/Adam"
        string_val: "MaskNet//conv16/bias/Adam_1"
        string_val: "MaskNet//batch_normalization_13/gamma/Adam"
        string_val: "MaskNet//batch_normalization_13/gamma/Adam_1"
        string_val: "MaskNet//batch_normalization_13/beta/Adam"
        string_val: "MaskNet//batch_normalization_13/beta/Adam_1"
        string_val: "MaskNet//conv17/kernel/Adam"
        string_val: "MaskNet//conv17/kernel/Adam_1"
        string_val: "MaskNet//conv17/bias/Adam"
        string_val: "MaskNet//conv17/bias/Adam_1"
        string_val: "MaskNet//batch_normalization_14/gamma/Adam"
        string_val: "MaskNet//batch_normalization_14/gamma/Adam_1"
        string_val: "MaskNet//batch_normalization_14/beta/Adam"
        string_val: "MaskNet//batch_normalization_14/beta/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 241
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 241
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 241
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 241
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 241
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^MaskNet//batch_normalization/beta/Adam/Assign"
  input: "^MaskNet//batch_normalization/beta/Adam_1/Assign"
  input: "^MaskNet//batch_normalization/beta/Assign"
  input: "^MaskNet//batch_normalization/gamma/Adam/Assign"
  input: "^MaskNet//batch_normalization/gamma/Adam_1/Assign"
  input: "^MaskNet//batch_normalization/gamma/Assign"
  input: "^MaskNet//batch_normalization/moving_mean/Assign"
  input: "^MaskNet//batch_normalization/moving_variance/Assign"
  input: "^MaskNet//batch_normalization_1/beta/Adam/Assign"
  input: "^MaskNet//batch_normalization_1/beta/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_1/beta/Assign"
  input: "^MaskNet//batch_normalization_1/gamma/Adam/Assign"
  input: "^MaskNet//batch_normalization_1/gamma/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_1/gamma/Assign"
  input: "^MaskNet//batch_normalization_1/moving_mean/Assign"
  input: "^MaskNet//batch_normalization_1/moving_variance/Assign"
  input: "^MaskNet//batch_normalization_10/beta/Adam/Assign"
  input: "^MaskNet//batch_normalization_10/beta/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_10/beta/Assign"
  input: "^MaskNet//batch_normalization_10/gamma/Adam/Assign"
  input: "^MaskNet//batch_normalization_10/gamma/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_10/gamma/Assign"
  input: "^MaskNet//batch_normalization_10/moving_mean/Assign"
  input: "^MaskNet//batch_normalization_10/moving_variance/Assign"
  input: "^MaskNet//batch_normalization_11/beta/Adam/Assign"
  input: "^MaskNet//batch_normalization_11/beta/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_11/beta/Assign"
  input: "^MaskNet//batch_normalization_11/gamma/Adam/Assign"
  input: "^MaskNet//batch_normalization_11/gamma/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_11/gamma/Assign"
  input: "^MaskNet//batch_normalization_11/moving_mean/Assign"
  input: "^MaskNet//batch_normalization_11/moving_variance/Assign"
  input: "^MaskNet//batch_normalization_12/beta/Adam/Assign"
  input: "^MaskNet//batch_normalization_12/beta/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_12/beta/Assign"
  input: "^MaskNet//batch_normalization_12/gamma/Adam/Assign"
  input: "^MaskNet//batch_normalization_12/gamma/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_12/gamma/Assign"
  input: "^MaskNet//batch_normalization_12/moving_mean/Assign"
  input: "^MaskNet//batch_normalization_12/moving_variance/Assign"
  input: "^MaskNet//batch_normalization_13/beta/Adam/Assign"
  input: "^MaskNet//batch_normalization_13/beta/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_13/beta/Assign"
  input: "^MaskNet//batch_normalization_13/gamma/Adam/Assign"
  input: "^MaskNet//batch_normalization_13/gamma/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_13/gamma/Assign"
  input: "^MaskNet//batch_normalization_13/moving_mean/Assign"
  input: "^MaskNet//batch_normalization_13/moving_variance/Assign"
  input: "^MaskNet//batch_normalization_14/beta/Adam/Assign"
  input: "^MaskNet//batch_normalization_14/beta/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_14/beta/Assign"
  input: "^MaskNet//batch_normalization_14/gamma/Adam/Assign"
  input: "^MaskNet//batch_normalization_14/gamma/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_14/gamma/Assign"
  input: "^MaskNet//batch_normalization_14/moving_mean/Assign"
  input: "^MaskNet//batch_normalization_14/moving_variance/Assign"
  input: "^MaskNet//batch_normalization_2/beta/Adam/Assign"
  input: "^MaskNet//batch_normalization_2/beta/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_2/beta/Assign"
  input: "^MaskNet//batch_normalization_2/gamma/Adam/Assign"
  input: "^MaskNet//batch_normalization_2/gamma/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_2/gamma/Assign"
  input: "^MaskNet//batch_normalization_2/moving_mean/Assign"
  input: "^MaskNet//batch_normalization_2/moving_variance/Assign"
  input: "^MaskNet//batch_normalization_3/beta/Adam/Assign"
  input: "^MaskNet//batch_normalization_3/beta/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_3/beta/Assign"
  input: "^MaskNet//batch_normalization_3/gamma/Adam/Assign"
  input: "^MaskNet//batch_normalization_3/gamma/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_3/gamma/Assign"
  input: "^MaskNet//batch_normalization_3/moving_mean/Assign"
  input: "^MaskNet//batch_normalization_3/moving_variance/Assign"
  input: "^MaskNet//batch_normalization_4/beta/Adam/Assign"
  input: "^MaskNet//batch_normalization_4/beta/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_4/beta/Assign"
  input: "^MaskNet//batch_normalization_4/gamma/Adam/Assign"
  input: "^MaskNet//batch_normalization_4/gamma/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_4/gamma/Assign"
  input: "^MaskNet//batch_normalization_4/moving_mean/Assign"
  input: "^MaskNet//batch_normalization_4/moving_variance/Assign"
  input: "^MaskNet//batch_normalization_5/beta/Adam/Assign"
  input: "^MaskNet//batch_normalization_5/beta/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_5/beta/Assign"
  input: "^MaskNet//batch_normalization_5/gamma/Adam/Assign"
  input: "^MaskNet//batch_normalization_5/gamma/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_5/gamma/Assign"
  input: "^MaskNet//batch_normalization_5/moving_mean/Assign"
  input: "^MaskNet//batch_normalization_5/moving_variance/Assign"
  input: "^MaskNet//batch_normalization_6/beta/Adam/Assign"
  input: "^MaskNet//batch_normalization_6/beta/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_6/beta/Assign"
  input: "^MaskNet//batch_normalization_6/gamma/Adam/Assign"
  input: "^MaskNet//batch_normalization_6/gamma/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_6/gamma/Assign"
  input: "^MaskNet//batch_normalization_6/moving_mean/Assign"
  input: "^MaskNet//batch_normalization_6/moving_variance/Assign"
  input: "^MaskNet//batch_normalization_7/beta/Adam/Assign"
  input: "^MaskNet//batch_normalization_7/beta/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_7/beta/Assign"
  input: "^MaskNet//batch_normalization_7/gamma/Adam/Assign"
  input: "^MaskNet//batch_normalization_7/gamma/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_7/gamma/Assign"
  input: "^MaskNet//batch_normalization_7/moving_mean/Assign"
  input: "^MaskNet//batch_normalization_7/moving_variance/Assign"
  input: "^MaskNet//batch_normalization_8/beta/Adam/Assign"
  input: "^MaskNet//batch_normalization_8/beta/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_8/beta/Assign"
  input: "^MaskNet//batch_normalization_8/gamma/Adam/Assign"
  input: "^MaskNet//batch_normalization_8/gamma/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_8/gamma/Assign"
  input: "^MaskNet//batch_normalization_8/moving_mean/Assign"
  input: "^MaskNet//batch_normalization_8/moving_variance/Assign"
  input: "^MaskNet//batch_normalization_9/beta/Adam/Assign"
  input: "^MaskNet//batch_normalization_9/beta/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_9/beta/Assign"
  input: "^MaskNet//batch_normalization_9/gamma/Adam/Assign"
  input: "^MaskNet//batch_normalization_9/gamma/Adam_1/Assign"
  input: "^MaskNet//batch_normalization_9/gamma/Assign"
  input: "^MaskNet//batch_normalization_9/moving_mean/Assign"
  input: "^MaskNet//batch_normalization_9/moving_variance/Assign"
  input: "^MaskNet//conv1/bias/Adam/Assign"
  input: "^MaskNet//conv1/bias/Adam_1/Assign"
  input: "^MaskNet//conv1/bias/Assign"
  input: "^MaskNet//conv1/kernel/Adam/Assign"
  input: "^MaskNet//conv1/kernel/Adam_1/Assign"
  input: "^MaskNet//conv1/kernel/Assign"
  input: "^MaskNet//conv10_atrous/bias/Adam/Assign"
  input: "^MaskNet//conv10_atrous/bias/Adam_1/Assign"
  input: "^MaskNet//conv10_atrous/bias/Assign"
  input: "^MaskNet//conv10_atrous/kernel/Adam/Assign"
  input: "^MaskNet//conv10_atrous/kernel/Adam_1/Assign"
  input: "^MaskNet//conv10_atrous/kernel/Assign"
  input: "^MaskNet//conv11/bias/Adam/Assign"
  input: "^MaskNet//conv11/bias/Adam_1/Assign"
  input: "^MaskNet//conv11/bias/Assign"
  input: "^MaskNet//conv11/kernel/Adam/Assign"
  input: "^MaskNet//conv11/kernel/Adam_1/Assign"
  input: "^MaskNet//conv11/kernel/Assign"
  input: "^MaskNet//conv12/bias/Adam/Assign"
  input: "^MaskNet//conv12/bias/Adam_1/Assign"
  input: "^MaskNet//conv12/bias/Assign"
  input: "^MaskNet//conv12/kernel/Adam/Assign"
  input: "^MaskNet//conv12/kernel/Adam_1/Assign"
  input: "^MaskNet//conv12/kernel/Assign"
  input: "^MaskNet//conv13_upsample/batch_normalization/beta/Adam/Assign"
  input: "^MaskNet//conv13_upsample/batch_normalization/beta/Adam_1/Assign"
  input: "^MaskNet//conv13_upsample/batch_normalization/beta/Assign"
  input: "^MaskNet//conv13_upsample/batch_normalization/gamma/Adam/Assign"
  input: "^MaskNet//conv13_upsample/batch_normalization/gamma/Adam_1/Assign"
  input: "^MaskNet//conv13_upsample/batch_normalization/gamma/Assign"
  input: "^MaskNet//conv13_upsample/batch_normalization/moving_mean/Assign"
  input: "^MaskNet//conv13_upsample/batch_normalization/moving_variance/Assign"
  input: "^MaskNet//conv13_upsample/conv13_upsample_conv/bias/Adam/Assign"
  input: "^MaskNet//conv13_upsample/conv13_upsample_conv/bias/Adam_1/Assign"
  input: "^MaskNet//conv13_upsample/conv13_upsample_conv/bias/Assign"
  input: "^MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam/Assign"
  input: "^MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Adam_1/Assign"
  input: "^MaskNet//conv13_upsample/conv13_upsample_conv/kernel/Assign"
  input: "^MaskNet//conv14/bias/Adam/Assign"
  input: "^MaskNet//conv14/bias/Adam_1/Assign"
  input: "^MaskNet//conv14/bias/Assign"
  input: "^MaskNet//conv14/kernel/Adam/Assign"
  input: "^MaskNet//conv14/kernel/Adam_1/Assign"
  input: "^MaskNet//conv14/kernel/Assign"
  input: "^MaskNet//conv15_upsample/batch_normalization/beta/Adam/Assign"
  input: "^MaskNet//conv15_upsample/batch_normalization/beta/Adam_1/Assign"
  input: "^MaskNet//conv15_upsample/batch_normalization/beta/Assign"
  input: "^MaskNet//conv15_upsample/batch_normalization/gamma/Adam/Assign"
  input: "^MaskNet//conv15_upsample/batch_normalization/gamma/Adam_1/Assign"
  input: "^MaskNet//conv15_upsample/batch_normalization/gamma/Assign"
  input: "^MaskNet//conv15_upsample/batch_normalization/moving_mean/Assign"
  input: "^MaskNet//conv15_upsample/batch_normalization/moving_variance/Assign"
  input: "^MaskNet//conv15_upsample/conv15_upsample_conv/bias/Adam/Assign"
  input: "^MaskNet//conv15_upsample/conv15_upsample_conv/bias/Adam_1/Assign"
  input: "^MaskNet//conv15_upsample/conv15_upsample_conv/bias/Assign"
  input: "^MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam/Assign"
  input: "^MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Adam_1/Assign"
  input: "^MaskNet//conv15_upsample/conv15_upsample_conv/kernel/Assign"
  input: "^MaskNet//conv16/bias/Adam/Assign"
  input: "^MaskNet//conv16/bias/Adam_1/Assign"
  input: "^MaskNet//conv16/bias/Assign"
  input: "^MaskNet//conv16/kernel/Adam/Assign"
  input: "^MaskNet//conv16/kernel/Adam_1/Assign"
  input: "^MaskNet//conv16/kernel/Assign"
  input: "^MaskNet//conv17/bias/Adam/Assign"
  input: "^MaskNet//conv17/bias/Adam_1/Assign"
  input: "^MaskNet//conv17/bias/Assign"
  input: "^MaskNet//conv17/kernel/Adam/Assign"
  input: "^MaskNet//conv17/kernel/Adam_1/Assign"
  input: "^MaskNet//conv17/kernel/Assign"
  input: "^MaskNet//conv2_downsample/bias/Adam/Assign"
  input: "^MaskNet//conv2_downsample/bias/Adam_1/Assign"
  input: "^MaskNet//conv2_downsample/bias/Assign"
  input: "^MaskNet//conv2_downsample/kernel/Adam/Assign"
  input: "^MaskNet//conv2_downsample/kernel/Adam_1/Assign"
  input: "^MaskNet//conv2_downsample/kernel/Assign"
  input: "^MaskNet//conv3/bias/Adam/Assign"
  input: "^MaskNet//conv3/bias/Adam_1/Assign"
  input: "^MaskNet//conv3/bias/Assign"
  input: "^MaskNet//conv3/kernel/Adam/Assign"
  input: "^MaskNet//conv3/kernel/Adam_1/Assign"
  input: "^MaskNet//conv3/kernel/Assign"
  input: "^MaskNet//conv4_downsample/bias/Adam/Assign"
  input: "^MaskNet//conv4_downsample/bias/Adam_1/Assign"
  input: "^MaskNet//conv4_downsample/bias/Assign"
  input: "^MaskNet//conv4_downsample/kernel/Adam/Assign"
  input: "^MaskNet//conv4_downsample/kernel/Adam_1/Assign"
  input: "^MaskNet//conv4_downsample/kernel/Assign"
  input: "^MaskNet//conv5/bias/Adam/Assign"
  input: "^MaskNet//conv5/bias/Adam_1/Assign"
  input: "^MaskNet//conv5/bias/Assign"
  input: "^MaskNet//conv5/kernel/Adam/Assign"
  input: "^MaskNet//conv5/kernel/Adam_1/Assign"
  input: "^MaskNet//conv5/kernel/Assign"
  input: "^MaskNet//conv6/bias/Adam/Assign"
  input: "^MaskNet//conv6/bias/Adam_1/Assign"
  input: "^MaskNet//conv6/bias/Assign"
  input: "^MaskNet//conv6/kernel/Adam/Assign"
  input: "^MaskNet//conv6/kernel/Adam_1/Assign"
  input: "^MaskNet//conv6/kernel/Assign"
  input: "^MaskNet//conv7_atrous/bias/Adam/Assign"
  input: "^MaskNet//conv7_atrous/bias/Adam_1/Assign"
  input: "^MaskNet//conv7_atrous/bias/Assign"
  input: "^MaskNet//conv7_atrous/kernel/Adam/Assign"
  input: "^MaskNet//conv7_atrous/kernel/Adam_1/Assign"
  input: "^MaskNet//conv7_atrous/kernel/Assign"
  input: "^MaskNet//conv8_atrous/bias/Adam/Assign"
  input: "^MaskNet//conv8_atrous/bias/Adam_1/Assign"
  input: "^MaskNet//conv8_atrous/bias/Assign"
  input: "^MaskNet//conv8_atrous/kernel/Adam/Assign"
  input: "^MaskNet//conv8_atrous/kernel/Adam_1/Assign"
  input: "^MaskNet//conv8_atrous/kernel/Assign"
  input: "^MaskNet//conv9_atrous/bias/Adam/Assign"
  input: "^MaskNet//conv9_atrous/bias/Adam_1/Assign"
  input: "^MaskNet//conv9_atrous/bias/Assign"
  input: "^MaskNet//conv9_atrous/kernel/Adam/Assign"
  input: "^MaskNet//conv9_atrous/kernel/Adam_1/Assign"
  input: "^MaskNet//conv9_atrous/kernel/Assign"
  input: "^train_op/beta1_power/Assign"
  input: "^train_op/beta2_power/Assign"
  input: "^train_op/global_step/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init_1"
  input: "^init_all_tables"
}
library {
  function {
    signature {
      name: "cond_true_72"
      input_arg {
        name: "cond_resize_squeeze"
        type: DT_FLOAT
      }
      input_arg {
        name: "cond_resize_1_squeeze"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "cond"
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node_def {
      name: "random_uniform/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "random_uniform/min"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "random_uniform"
      op: "RandomUniformInt"
      input: "random_uniform/shape:output:0"
      input: "random_uniform/min:output:0"
      input: "Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tout"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "seed"
        value {
          i: 8964
        }
      }
      attr {
        key: "seed2"
        value {
          i: 3
        }
      }
    }
    node_def {
      name: "Equal/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "Equal"
      op: "Equal"
      input: "random_uniform:output:0"
      input: "Equal/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "cond"
      op: "If"
      input: "Equal:z:0"
      input: "cond_resize_squeeze"
      input: "cond_resize_1_squeeze"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "cond_false_82"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "cond_true_81"
          }
        }
      }
    }
    node_def {
      name: "cond/Identity"
      op: "Identity"
      input: "cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "cond/Identity_1"
      op: "Identity"
      input: "cond:output:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "cond/Identity:output:0"
      input: "^cond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "cond/Identity_1:output:0"
      input: "^cond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 384
            }
            dim {
              size: 640
            }
            dim {
              size: 3
            }
          }
          shape {
            dim {
              size: 384
            }
            dim {
              size: 640
            }
            dim {
              size: 3
            }
          }
        }
      }
    }
    control_ret {
      key: "cond"
      value: "cond"
    }
    arg_attr {
      value {
      }
    }
    arg_attr {
      key: 1
      value {
      }
    }
  }
  function {
    signature {
      name: "cond_false_125"
      input_arg {
        name: "strided_slice_resize_squeeze"
        type: DT_FLOAT
      }
      input_arg {
        name: "strided_slice_1_resize_1_squeeze"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "strided_slice_resize_squeeze"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 7
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 7
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "strided_slice_1_resize_1_squeeze"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 7
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 7
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 384
            }
            dim {
              size: 640
            }
            dim {
              size: 3
            }
          }
          shape {
            dim {
              size: 384
            }
            dim {
              size: 640
            }
            dim {
              size: 3
            }
          }
        }
      }
    }
    arg_attr {
      value {
      }
    }
    arg_attr {
      key: 1
      value {
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_map_Davis2016Reader.test_dataset_map_325"
      input_arg {
        name: "args_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_3"
        type: DT_STRING
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "args_0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "args_0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "mul/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "mul/x:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "add"
      op: "Add"
      input: "mul:z:0"
      input: "strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "strided_slice:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Cast_1"
      op: "Cast"
      input: "add:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "GatherV2/params"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 462
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 462
              }
            }
            string_val: "../images/images/silk_spot/img_04_4406743300_00595.jpg"
            string_val: "../images/images/punching_hole/img_06_424799300_01133.jpg"
            string_val: "../images/images/silk_spot/img_04_SIS001577_00040.jpg"
            string_val: "../images/images/oil_spot/img_04_436163100_00010.jpg"
            string_val: "../images/images/crescent_gap/img_04_425502300_00018.jpg"
            string_val: "../images/images/welding_line/img_08_425382400_00001.jpg"
            string_val: "../images/images/water_spot/img_01_4403565100_00012.jpg"
            string_val: "../images/images/water_spot/img_01_425006200_00175.jpg"
            string_val: "../images/images/inclusion/img_06_425237000_00664.jpg"
            string_val: "../images/images/inclusion/img_02_425503000_00020.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00436.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00223.jpg"
            string_val: "../images/images/welding_line/img_03_425613500_00597.jpg"
            string_val: "../images/images/welding_line/img_04_4402787600_00001.jpg"
            string_val: "../images/images/oil_spot/img_07_4405168700_00711.jpg"
            string_val: "../images/images/crescent_gap/img_05_425640000_00634.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00547.jpg"
            string_val: "../images/images/water_spot/img_08_4403744200_01175.jpg"
            string_val: "../images/images/oil_spot/img_07_3437011100_00683.jpg"
            string_val: "../images/images/waist_folding/img_06_424826800_00500.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00145.jpg"
            string_val: "../images/images/crescent_gap/img_08_424826300_00950.jpg"
            string_val: "../images/images/waist_folding/img_06_3436814000_00679.jpg"
            string_val: "../images/images/punching_hole/img_03_425616500_00769.jpg"
            string_val: "../images/images/punching_hole/img_03_425501700_00018.jpg"
            string_val: "../images/images/crescent_gap/img_08_424799600_00001.jpg"
            string_val: "../images/images/inclusion/img_02_425503800_00019.jpg"
            string_val: "../images/images/silk_spot/img_01_SIS001522_00045.jpg"
            string_val: "../images/images/silk_spot/img_05_4406645900_00038.jpg"
            string_val: "../images/images/silk_spot/img_03_436152900_00585.jpg"
            string_val: "../images/images/welding_line/img_02_425614400_00001.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00065.jpg"
            string_val: "../images/images/water_spot/img_02_425237600_00302.jpg"
            string_val: "../images/images/welding_line/img_07_425390100_00053.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00317.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00503.jpg"
            string_val: "../images/images/silk_spot/img_06_4406645900_00475.jpg"
            string_val: "../images/images/silk_spot/img_03_425505400_01033.jpg"
            string_val: "../images/images/punching_hole/img_06_3403399100_01155.jpg"
            string_val: "../images/images/crease/img_02_425613700_00758.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00246.jpg"
            string_val: "../images/images/water_spot/img_01_425000300_00103.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00481.jpg"
            string_val: "../images/images/punching_hole/img_03_425613500_00001.jpg"
            string_val: "../images/images/silk_spot/img_04_4406645900_00824.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00774.jpg"
            string_val: "../images/images/crescent_gap/img_01_425505100_00017.jpg"
            string_val: "../images/images/inclusion/img_03_425501800_01148.jpg"
            string_val: "../images/images/waist_folding/img_07_4405376800_00038.jpg"
            string_val: "../images/images/water_spot/img_02_4403466900_00011.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00664.jpg"
            string_val: "../images/images/crescent_gap/img_05_425503600_00053.jpg"
            string_val: "../images/images/water_spot/img_02_3436813700_00798.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00730.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00539.jpg"
            string_val: "../images/images/welding_line/img_01_425382400_00001.jpg"
            string_val: "../images/images/silk_spot/img_06_4406645900_00490.jpg"
            string_val: "../images/images/inclusion/img_03_4401440300_00347.jpg"
            string_val: "../images/images/inclusion/img_07_425008500_00314.jpg"
            string_val: "../images/images/crescent_gap/img_04_425003700_00002.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00801.jpg"
            string_val: "../images/images/punching_hole/img_06_3403402100_00857.jpg"
            string_val: "../images/images/oil_spot/img_07_3437011100_00684.jpg"
            string_val: "../images/images/waist_folding/img_06_4402830700_01162.jpg"
            string_val: "../images/images/silk_spot/img_03_425508400_00380.jpg"
            string_val: "../images/images/water_spot/img_02_4403466100_00013.jpg"
            string_val: "../images/images/oil_spot/img_03_3402617700_00456.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00558.jpg"
            string_val: "../images/images/crease/img_04_4402117000_00004.jpg"
            string_val: "../images/images/water_spot/img_07_425508300_00927.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00669.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00054.jpg"
            string_val: "../images/images/silk_spot/img_03_436150300_00328.jpg"
            string_val: "../images/images/punching_hole/img_03_425637500_00653.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00809.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00285.jpg"
            string_val: "../images/images/crescent_gap/img_04_425501700_00018.jpg"
            string_val: "../images/images/silk_spot/img_05_4406645900_00040.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00614.jpg"
            string_val: "../images/images/water_spot/img_01_425008000_00002.jpg"
            string_val: "../images/images/silk_spot/img_03_SIS001577_00019.jpg"
            string_val: "../images/images/oil_spot/img_03_3402617400_00941.jpg"
            string_val: "../images/images/silk_spot/img_03_436184600_00799.jpg"
            string_val: "../images/images/punching_hole/img_06_425639800_00873.jpg"
            string_val: "../images/images/silk_spot/img_04_4406645900_00543.jpg"
            string_val: "../images/images/inclusion/img_06_425237000_00660.jpg"
            string_val: "../images/images/punching_hole/img_06_425616500_00769.jpg"
            string_val: "../images/images/inclusion/img_02_425392000_00996.jpg"
            string_val: "../images/images/crescent_gap/img_07_4406645900_00002.jpg"
            string_val: "../images/images/welding_line/img_04_425382400_00001.jpg"
            string_val: "../images/images/silk_spot/img_03_436184600_00797.jpg"
            string_val: "../images/images/oil_spot/img_06_425502300_01409.jpg"
            string_val: "../images/images/silk_spot/img_01_SIS001577_00049.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00194.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00716.jpg"
            string_val: "../images/images/punching_hole/img_03_3403331900_01545.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00810.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00531.jpg"
            string_val: "../images/images/water_spot/img_02_3436813700_00270.jpg"
            string_val: "../images/images/silk_spot/img_06_4406743300_00033.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00411.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00786.jpg"
            string_val: "../images/images/silk_spot/img_03_436184600_00779.jpg"
            string_val: "../images/images/punching_hole/img_03_3403403300_00700.jpg"
            string_val: "../images/images/punching_hole/img_06_425644300_00598.jpg"
            string_val: "../images/images/silk_spot/img_04_4406645900_00808.jpg"
            string_val: "../images/images/crescent_gap/img_01_425503000_00017.jpg"
            string_val: "../images/images/silk_spot/img_02_4404580600_00661.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00080.jpg"
            string_val: "../images/images/welding_line/img_07_425613700_00782.jpg"
            string_val: "../images/images/water_spot/img_03_424826800_00420.jpg"
            string_val: "../images/images/oil_spot/img_03_3437006100_00013.jpg"
            string_val: "../images/images/welding_line/img_07_3402617400_01102.jpg"
            string_val: "../images/images/water_spot/img_02_4404580000_00041.jpg"
            string_val: "../images/images/crescent_gap/img_01_425006200_01173.jpg"
            string_val: "../images/images/crescent_gap/img_08_425503400_00053.jpg"
            string_val: "../images/images/inclusion/img_04_4402622500_00364.jpg"
            string_val: "../images/images/water_spot/img_04_425237600_00360.jpg"
            string_val: "../images/images/inclusion/img_06_425237000_00661.jpg"
            string_val: "../images/images/inclusion/img_03_3402617100_00120.jpg"
            string_val: "../images/images/punching_hole/img_03_425507200_00018.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00855.jpg"
            string_val: "../images/images/welding_line/img_02_425507000_00018.jpg"
            string_val: "../images/images/silk_spot/img_02_425243400_00057.jpg"
            string_val: "../images/images/silk_spot/img_01_3436815300_00473.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00056.jpg"
            string_val: "../images/images/oil_spot/img_07_435974600_00213.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00476.jpg"
            string_val: "../images/images/waist_folding/img_06_436185800_00735.jpg"
            string_val: "../images/images/oil_spot/img_03_425507000_00925.jpg"
            string_val: "../images/images/punching_hole/img_03_425614700_00712.jpg"
            string_val: "../images/images/inclusion/img_02_425613800_00034.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00434.jpg"
            string_val: "../images/images/water_spot/img_02_4403465900_00043.jpg"
            string_val: "../images/images/oil_spot/img_02_425507200_01515.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00817.jpg"
            string_val: "../images/images/punching_hole/img_03_424826300_00949.jpg"
            string_val: "../images/images/waist_folding/img_03_4404374100_01295.jpg"
            string_val: "../images/images/inclusion/img_02_425502300_00338.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00211.jpg"
            string_val: "../images/images/water_spot/img_01_424995500_00255.jpg"
            string_val: "../images/images/silk_spot/img_01_4406743300_00804.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00339.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00053.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00441.jpg"
            string_val: "../images/images/water_spot/img_03_424798500_00466.jpg"
            string_val: "../images/images/oil_spot/img_08_425391700_00188.jpg"
            string_val: "../images/images/silk_spot/img_07_424714400_00011.jpg"
            string_val: "../images/images/waist_folding/img_07_436164700_01536.jpg"
            string_val: "../images/images/punching_hole/img_03_425638500_00716.jpg"
            string_val: "../images/images/punching_hole/img_03_4406562900_00002.jpg"
            string_val: "../images/images/water_spot/img_01_425007600_00674.jpg"
            string_val: "../images/images/punching_hole/img_03_3403400200_00567.jpg"
            string_val: "../images/images/water_spot/img_01_4403565100_00007.jpg"
            string_val: "../images/images/welding_line/img_06_3403337800_00766.jpg"
            string_val: "../images/images/inclusion/img_04_425503200_00019.jpg"
            string_val: "../images/images/punching_hole/img_06_425503800_00052.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00159.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00046.jpg"
            string_val: "../images/images/waist_folding/img_07_424826800_00492.jpg"
            string_val: "../images/images/oil_spot/img_01_435974400_00005.jpg"
            string_val: "../images/images/oil_spot/img_06_425503400_00049.jpg"
            string_val: "../images/images/crescent_gap/img_08_425502700_00052.jpg"
            string_val: "../images/images/waist_folding/img_07_3436814000_00684.jpg"
            string_val: "../images/images/punching_hole/img_03_3403399500_00888.jpg"
            string_val: "../images/images/silk_spot/img_02_SIS001522_00031.jpg"
            string_val: "../images/images/inclusion/img_06_425507200_00976.jpg"
            string_val: "../images/images/water_spot/img_05_4402766800_00515.jpg"
            string_val: "../images/images/inclusion/img_03_3402617700_00653.jpg"
            string_val: "../images/images/crescent_gap/img_05_425502200_00054.jpg"
            string_val: "../images/images/water_spot/img_04_424826100_00528.jpg"
            string_val: "../images/images/rolled_pit/img_02_4402117200_00004.jpg"
            string_val: "../images/images/welding_line/img_02_425616500_00770.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00771.jpg"
            string_val: "../images/images/silk_spot/img_05_4406645900_00585.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00819.jpg"
            string_val: "../images/images/welding_line/img_07_425637500_00653.jpg"
            string_val: "../images/images/silk_spot/img_04_425243100_00677.jpg"
            string_val: "../images/images/crescent_gap/img_08_425006600_00930.jpg"
            string_val: "../images/images/inclusion/img_05_425502300_00026.jpg"
            string_val: "../images/images/water_spot/img_01_425241500_00995.jpg"
            string_val: "../images/images/silk_spot/img_06_4406743300_00036.jpg"
            string_val: "../images/images/silk_spot/img_03_436152900_00557.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00527.jpg"
            string_val: "../images/images/punching_hole/img_03_425504800_00018.jpg"
            string_val: "../images/images/welding_line/img_02_4402852500_01045.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00391.jpg"
            string_val: "../images/images/crescent_gap/img_08_425505100_00052.jpg"
            string_val: "../images/images/waist_folding/img_07_436164700_01551.jpg"
            string_val: "../images/images/crease/img_02_4406783500_00010.jpg"
            string_val: "../images/images/silk_spot/img_03_436150300_00317.jpg"
            string_val: "../images/images/inclusion/img_07_425508700_00362.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00328.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00435.jpg"
            string_val: "../images/images/welding_line/img_01_4402818600_00001.jpg"
            string_val: "../images/images/punching_hole/img_03_425616200_00001.jpg"
            string_val: "../images/images/crescent_gap/img_08_425007500_01452.jpg"
            string_val: "../images/images/oil_spot/img_06_425502300_01406.jpg"
            string_val: "../images/images/punching_hole/img_06_425615200_00639.jpg"
            string_val: "../images/images/inclusion/img_02_3436816100_00148.jpg"
            string_val: "../images/images/crescent_gap/img_01_425006100_00947.jpg"
            string_val: "../images/images/oil_spot/img_02_424799200_00250.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00410.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00322.jpg"
            string_val: "../images/images/water_spot/img_01_425000300_00520.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00321.jpg"
            string_val: "../images/images/rolled_pit/img_07_427199900_00007.jpg"
            string_val: "../images/images/water_spot/img_01_425243600_00848.jpg"
            string_val: "../images/images/crescent_gap/img_01_425637900_00899.jpg"
            string_val: "../images/images/rolled_pit/img_03_3437006900_00002.jpg"
            string_val: "../images/images/punching_hole/img_03_425644200_00680.jpg"
            string_val: "../images/images/water_spot/img_02_4403466100_00011.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00661.jpg"
            string_val: "../images/images/oil_spot/img_03_3437006500_00033.jpg"
            string_val: "../images/images/waist_folding/img_07_4402719200_00026.jpg"
            string_val: "../images/images/crescent_gap/img_01_425007500_01453.jpg"
            string_val: "../images/images/crescent_gap/img_05_425608200_00814.jpg"
            string_val: "../images/images/crescent_gap/img_05_425504800_00052.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00661.jpg"
            string_val: "../images/images/crescent_gap/img_08_4406772100_00002.jpg"
            string_val: "../images/images/water_spot/img_02_4406772100_00673.jpg"
            string_val: "../images/images/oil_spot/img_07_3437011100_00685.jpg"
            string_val: "../images/images/silk_spot/img_06_4406645900_00451.jpg"
            string_val: "../images/images/oil_spot/img_02_425507200_01514.jpg"
            string_val: "../images/images/punching_hole/img_06_425644200_00680.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00772.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00693.jpg"
            string_val: "../images/images/welding_line/img_07_3403335700_01048.jpg"
            string_val: "../images/images/punching_hole/img_03_424992300_00001.jpg"
            string_val: "../images/images/crescent_gap/img_01_425503100_00017.jpg"
            string_val: "../images/images/punching_hole/img_02_425640000_00634.jpg"
            string_val: "../images/images/oil_spot/img_04_436163100_00039.jpg"
            string_val: "../images/images/welding_line/img_07_3403403900_00809.jpg"
            string_val: "../images/images/punching_hole/img_06_425508700_00053.jpg"
            string_val: "../images/images/crescent_gap/img_01_436067700_00689.jpg"
            string_val: "../images/images/waist_folding/img_06_3436814000_00007.jpg"
            string_val: "../images/images/welding_line/img_04_425380900_00001.jpg"
            string_val: "../images/images/waist_folding/img_07_4404374100_01349.jpg"
            string_val: "../images/images/welding_line/img_07_4404710300_00877.jpg"
            string_val: "../images/images/crescent_gap/img_06_425390700_00051.jpg"
            string_val: "../images/images/waist_folding/img_07_4405133600_00039.jpg"
            string_val: "../images/images/punching_hole/img_06_425506800_00054.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00793.jpg"
            string_val: "../images/images/silk_spot/img_06_3436814300_00056.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00660.jpg"
            string_val: "../images/images/punching_hole/img_03_425609500_00001.jpg"
            string_val: "../images/images/waist_folding/img_06_425614600_00414.jpg"
            string_val: "../images/images/inclusion/img_02_425501100_00688.jpg"
            string_val: "../images/images/rolled_pit/img_02_427146700_00002.jpg"
            string_val: "../images/images/crescent_gap/img_08_425391800_00054.jpg"
            string_val: "../images/images/crescent_gap/img_04_424799600_00001.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00197.jpg"
            string_val: "../images/images/silk_spot/img_04_SIS001577_00045.jpg"
            string_val: "../images/images/inclusion/img_03_3402617100_00119.jpg"
            string_val: "../images/images/waist_folding/img_07_3436814000_00010.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00425.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00458.jpg"
            string_val: "../images/images/crescent_gap/img_01_425006400_00001.jpg"
            string_val: "../images/images/waist_folding/img_06_424826800_00502.jpg"
            string_val: "../images/images/welding_line/img_03_425501100_00018.jpg"
            string_val: "../images/images/water_spot/img_01_425241600_00283.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00092.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00433.jpg"
            string_val: "../images/images/welding_line/img_07_4404893900_00568.jpg"
            string_val: "../images/images/crease/img_07_425004200_00982.jpg"
            string_val: "../images/images/welding_line/img_01_425638500_00001.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00191.jpg"
            string_val: "../images/images/water_spot/img_02_3436813700_00788.jpg"
            string_val: "../images/images/silk_spot/img_01_425243200_00439.jpg"
            string_val: "../images/images/crease/img_08_427199900_01134.jpg"
            string_val: "../images/images/welding_line/img_01_425507000_00018.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00420.jpg"
            string_val: "../images/images/inclusion/img_02_3402617100_00366.jpg"
            string_val: "../images/images/silk_spot/img_02_SIS001533_00311.jpg"
            string_val: "../images/images/oil_spot/img_06_425502300_01408.jpg"
            string_val: "../images/images/welding_line/img_03_436068600_00001.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00546.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00655.jpg"
            string_val: "../images/images/crescent_gap/img_04_424799200_00001.jpg"
            string_val: "../images/images/inclusion/img_05_425504900_00057.jpg"
            string_val: "../images/images/punching_hole/img_02_425644200_00681.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00183.jpg"
            string_val: "../images/images/punching_hole/img_02_425613600_00582.jpg"
            string_val: "../images/images/welding_line/img_03_425506300_00018.jpg"
            string_val: "../images/images/crease/img_05_4405381400_00774.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00913.jpg"
            string_val: "../images/images/oil_spot/img_04_436163100_00021.jpg"
            string_val: "../images/images/crescent_gap/img_04_424825700_00001.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00688.jpg"
            string_val: "../images/images/punching_hole/img_03_425613700_00782.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00277.jpg"
            string_val: "../images/images/crescent_gap/img_01_425008500_00874.jpg"
            string_val: "../images/images/waist_folding/img_06_3436814000_00683.jpg"
            string_val: "../images/images/water_spot/img_02_424799300_00146.jpg"
            string_val: "../images/images/waist_folding/img_06_436164700_01537.jpg"
            string_val: "../images/images/welding_line/img_03_436184600_00002.jpg"
            string_val: "../images/images/oil_spot/img_01_425614600_00428.jpg"
            string_val: "../images/images/welding_line/img_06_4403068400_01288.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00063.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00074.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00576.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00518.jpg"
            string_val: "../images/images/water_spot/img_03_424992300_00520.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00320.jpg"
            string_val: "../images/images/inclusion/img_06_425392500_00834.jpg"
            string_val: "../images/images/silk_spot/img_04_SIS001577_00052.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00325.jpg"
            string_val: "../images/images/crescent_gap/img_01_425609500_00001.jpg"
            string_val: "../images/images/inclusion/img_03_425501800_01220.jpg"
            string_val: "../images/images/silk_spot/img_02_SIS001564_01335.jpg"
            string_val: "../images/images/inclusion/img_07_425504800_00992.jpg"
            string_val: "../images/images/oil_spot/img_06_425502300_01397.jpg"
            string_val: "../images/images/punching_hole/img_06_425614700_00694.jpg"
            string_val: "../images/images/silk_spot/img_03_436150300_00330.jpg"
            string_val: "../images/images/crease/img_03_SIS001559_00006.jpg"
            string_val: "../images/images/water_spot/img_02_4403466700_00014.jpg"
            string_val: "../images/images/inclusion/img_06_425237000_00834.jpg"
            string_val: "../images/images/crescent_gap/img_05_425613500_00596.jpg"
            string_val: "../images/images/silk_spot/img_06_4406645900_00492.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00463.jpg"
            string_val: "../images/images/rolled_pit/img_03_4402724500_01238.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00676.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00071.jpg"
            string_val: "../images/images/crescent_gap/img_04_425503000_00017.jpg"
            string_val: "../images/images/silk_spot/img_01_4406743300_00461.jpg"
            string_val: "../images/images/welding_line/img_05_4405356600_00896.jpg"
            string_val: "../images/images/crescent_gap/img_08_425008500_00873.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00771.jpg"
            string_val: "../images/images/punching_hole/img_03_425502600_00017.jpg"
            string_val: "../images/images/crescent_gap/img_01_425007500_01452.jpg"
            string_val: "../images/images/crescent_gap/img_08_425608200_00006.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00267.jpg"
            string_val: "../images/images/waist_folding/img_07_436164700_01538.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00273.jpg"
            string_val: "../images/images/silk_spot/img_02_3436786500_00143.jpg"
            string_val: "../images/images/crescent_gap/img_03_SIS001561_01569.jpg"
            string_val: "../images/images/water_spot/img_01_425006600_00499.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00467.jpg"
            string_val: "../images/images/oil_spot/img_04_436163100_00008.jpg"
            string_val: "../images/images/silk_spot/img_02_425243200_00536.jpg"
            string_val: "../images/images/crescent_gap/img_01_425503100_00018.jpg"
            string_val: "../images/images/punching_hole/img_03_3403397500_01395.jpg"
            string_val: "../images/images/oil_spot/img_02_425613800_00218.jpg"
            string_val: "../images/images/waist_folding/img_06_3436814000_00688.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00045.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00313.jpg"
            string_val: "../images/images/punching_hole/img_03_425503400_00017.jpg"
            string_val: "../images/images/inclusion/img_08_425508300_00656.jpg"
            string_val: "../images/images/punching_hole/img_06_3403399600_00739.jpg"
            string_val: "../images/images/oil_spot/img_07_435974600_00223.jpg"
            string_val: "../images/images/water_spot/img_01_425007600_00126.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00179.jpg"
            string_val: "../images/images/inclusion/img_02_3436816100_00153.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00039.jpg"
            string_val: "../images/images/oil_spot/img_02_425507000_00913.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00704.jpg"
            string_val: "../images/images/silk_spot/img_02_4406562900_00755.jpg"
            string_val: "../images/images/water_spot/img_01_425241600_00041.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00335.jpg"
            string_val: "../images/images/welding_line/img_06_425505500_00052.jpg"
            string_val: "../images/images/crescent_gap/img_08_425638500_00713.jpg"
            string_val: "../images/images/waist_folding/img_06_436164700_01556.jpg"
            string_val: "../images/images/oil_spot/img_08_425508100_01398.jpg"
            string_val: "../images/images/silk_spot/img_06_425243200_00116.jpg"
            string_val: "../images/images/silk_spot/img_04_SIS001577_00046.jpg"
            string_val: "../images/images/water_spot/img_01_425244100_00682.jpg"
            string_val: "../images/images/oil_spot/img_01_433354400_00040.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00659.jpg"
            string_val: "../images/images/welding_line/img_07_3403334800_00898.jpg"
            string_val: "../images/images/silk_spot/img_03_436152900_00543.jpg"
            string_val: "../images/images/silk_spot/img_04_4406743300_00004.jpg"
            string_val: "../images/images/water_spot/img_02_436183700_00098.jpg"
            string_val: "../images/images/welding_line/img_03_436185500_00005.jpg"
            string_val: "../images/images/welding_line/img_02_436164700_00001.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00156.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00555.jpg"
            string_val: "../images/images/crescent_gap/img_04_425501800_00018.jpg"
            string_val: "../images/images/waist_folding/img_07_3437006500_00761.jpg"
            string_val: "../images/images/water_spot/img_02_4406772100_00305.jpg"
            string_val: "../images/images/silk_spot/img_03_436152900_00535.jpg"
            string_val: "../images/images/waist_folding/img_07_424826800_00493.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00056.jpg"
            string_val: "../images/images/welding_line/img_03_3402616100_00002.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00692.jpg"
            string_val: "../images/images/water_spot/img_03_424992300_00514.jpg"
            string_val: "../images/images/crescent_gap/img_05_425502600_00052.jpg"
            string_val: "../images/images/water_spot/img_02_4406772100_00404.jpg"
            string_val: "../images/images/inclusion/img_06_4405000800_01031.jpg"
            string_val: "../images/images/silk_spot/img_03_4406645900_00009.jpg"
            string_val: "../images/images/welding_line/img_06_SIS002344_00834.jpg"
            string_val: "../images/images/welding_line/img_07_425613800_00786.jpg"
            string_val: "../images/images/punching_hole/img_03_4406424600_00002.jpg"
            string_val: "../images/images/inclusion/img_03_425503100_00068.jpg"
            string_val: "../images/images/inclusion/img_03_3402617500_00138.jpg"
            string_val: "../images/images/water_spot/img_02_4406446700_00001.jpg"
            string_val: "../images/images/crescent_gap/img_01_425503400_00018.jpg"
            string_val: "../images/images/rolled_pit/img_02_4402116500_00005.jpg"
            string_val: "../images/images/water_spot/img_02_3436813700_00307.jpg"
            string_val: "../images/images/crescent_gap/img_01_424826100_00001.jpg"
            string_val: "../images/images/inclusion/img_03_425501800_01160.jpg"
            string_val: "../images/images/crease/img_02_4406783500_00004.jpg"
            string_val: "../images/images/inclusion/img_08_425608200_00504.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00523.jpg"
            string_val: "../images/images/silk_spot/img_04_436068100_00089.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00691.jpg"
            string_val: "../images/images/crescent_gap/img_08_425503800_00053.jpg"
            string_val: "../images/images/inclusion/img_07_4406645900_00339.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00266.jpg"
            string_val: "../images/images/punching_hole/img_06_3403399900_01007.jpg"
            string_val: "../images/images/crescent_gap/img_04_425505000_00018.jpg"
            string_val: "../images/images/welding_line/img_02_436149500_00939.jpg"
            string_val: "../images/images/inclusion/img_08_425508100_01624.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00381.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00111.jpg"
            string_val: "../images/images/crescent_gap/img_04_425608200_00001.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00424.jpg"
            string_val: "../images/images/oil_spot/img_08_425391700_00095.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00042.jpg"
            string_val: "../images/images/crescent_gap/img_01_3402617700_00001.jpg"
            string_val: "../images/images/inclusion/img_08_425639900_00613.jpg"
            string_val: "../images/images/punching_hole/img_03_3403404300_01219.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00312.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00041.jpg"
            string_val: "../images/images/silk_spot/img_01_SIS001577_00020.jpg"
            string_val: "../images/images/water_spot/img_02_424799200_00450.jpg"
            string_val: "../images/images/punching_hole/img_06_425506100_00051.jpg"
            string_val: "../images/images/water_spot/img_03_424825900_00211.jpg"
            string_val: "../images/images/inclusion/img_02_4402623300_00026.jpg"
            string_val: "../images/images/inclusion/img_06_4402625300_00109.jpg"
            string_val: "../images/images/welding_line/img_02_436185000_00016.jpg"
            string_val: "../images/images/inclusion/img_06_4402625300_00104.jpg"
            string_val: "../images/images/water_spot/img_02_3436813700_00298.jpg"
            string_val: "../images/images/silk_spot/img_04_425005700_00169.jpg"
            string_val: "../images/images/silk_spot/img_02_4406645900_00894.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00343.jpg"
            string_val: "../images/images/punching_hole/img_03_436153600_01213.jpg"
            string_val: "../images/images/crease/img_07_4405965200_00151.jpg"
            string_val: "../images/images/inclusion/img_03_3402617400_00898.jpg"
            string_val: "../images/images/silk_spot/img_03_436184600_00793.jpg"
            string_val: "../images/images/crease/img_03_4405964400_00010.jpg"
            string_val: "../images/images/welding_line/img_07_436164700_01555.jpg"
            string_val: "../images/images/silk_spot/img_04_4406645900_00678.jpg"
            string_val: "../images/images/punching_hole/img_06_3403333900_00758.jpg"
            string_val: "../images/images/punching_hole/img_03_3403392000_01070.jpg"
            string_val: "../images/images/water_spot/img_01_425007600_00599.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00570.jpg"
            string_val: "../images/images/oil_spot/img_02_425507000_00931.jpg"
            string_val: "../images/images/waist_folding/img_07_3436814000_00006.jpg"
            string_val: "../images/images/inclusion/img_08_425506100_00400.jpg"
            string_val: "../images/images/oil_spot/img_03_4403465900_00023.jpg"
            string_val: "../images/images/welding_line/img_01_425506400_00018.jpg"
            string_val: "../images/images/water_spot/img_03_4403466500_00029.jpg"
            string_val: "../images/images/crescent_gap/img_05_425502600_00053.jpg"
            string_val: "../images/images/welding_line/img_04_425508100_00018.jpg"
            string_val: "../images/images/inclusion/img_01_4406743300_00935.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00420.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00519.jpg"
            string_val: "../images/images/water_spot/img_01_425000300_00630.jpg"
            string_val: "../images/images/oil_spot/img_08_425507600_00361.jpg"
            string_val: "../images/images/oil_spot/img_08_425391700_00187.jpg"
            string_val: "../images/images/crescent_gap/img_01_425616200_00001.jpg"
            string_val: "../images/images/oil_spot/img_06_425502300_01399.jpg"
          }
        }
      }
    }
    node_def {
      name: "GatherV2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "GatherV2"
      op: "GatherV2"
      input: "GatherV2/params:output:0"
      input: "Cast:y:0"
      input: "GatherV2/axis:output:0"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "batch_dims"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "GatherV2_1/params"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 462
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 462
              }
            }
            string_val: "../images/images/silk_spot/img_04_4406743300_00595.jpg"
            string_val: "../images/images/punching_hole/img_06_424799300_01133.jpg"
            string_val: "../images/images/silk_spot/img_04_SIS001577_00040.jpg"
            string_val: "../images/images/oil_spot/img_04_436163100_00010.jpg"
            string_val: "../images/images/crescent_gap/img_04_425502300_00018.jpg"
            string_val: "../images/images/welding_line/img_08_425382400_00001.jpg"
            string_val: "../images/images/water_spot/img_01_4403565100_00012.jpg"
            string_val: "../images/images/water_spot/img_01_425006200_00175.jpg"
            string_val: "../images/images/inclusion/img_06_425237000_00664.jpg"
            string_val: "../images/images/inclusion/img_02_425503000_00020.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00436.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00223.jpg"
            string_val: "../images/images/welding_line/img_03_425613500_00597.jpg"
            string_val: "../images/images/welding_line/img_04_4402787600_00001.jpg"
            string_val: "../images/images/oil_spot/img_07_4405168700_00711.jpg"
            string_val: "../images/images/crescent_gap/img_05_425640000_00634.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00547.jpg"
            string_val: "../images/images/water_spot/img_08_4403744200_01175.jpg"
            string_val: "../images/images/oil_spot/img_07_3437011100_00683.jpg"
            string_val: "../images/images/waist_folding/img_06_424826800_00500.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00145.jpg"
            string_val: "../images/images/crescent_gap/img_08_424826300_00950.jpg"
            string_val: "../images/images/waist_folding/img_06_3436814000_00679.jpg"
            string_val: "../images/images/punching_hole/img_03_425616500_00769.jpg"
            string_val: "../images/images/punching_hole/img_03_425501700_00018.jpg"
            string_val: "../images/images/crescent_gap/img_08_424799600_00001.jpg"
            string_val: "../images/images/inclusion/img_02_425503800_00019.jpg"
            string_val: "../images/images/silk_spot/img_01_SIS001522_00045.jpg"
            string_val: "../images/images/silk_spot/img_05_4406645900_00038.jpg"
            string_val: "../images/images/silk_spot/img_03_436152900_00585.jpg"
            string_val: "../images/images/welding_line/img_02_425614400_00001.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00065.jpg"
            string_val: "../images/images/water_spot/img_02_425237600_00302.jpg"
            string_val: "../images/images/welding_line/img_07_425390100_00053.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00317.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00503.jpg"
            string_val: "../images/images/silk_spot/img_06_4406645900_00475.jpg"
            string_val: "../images/images/silk_spot/img_03_425505400_01033.jpg"
            string_val: "../images/images/punching_hole/img_06_3403399100_01155.jpg"
            string_val: "../images/images/crease/img_02_425613700_00758.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00246.jpg"
            string_val: "../images/images/water_spot/img_01_425000300_00103.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00481.jpg"
            string_val: "../images/images/punching_hole/img_03_425613500_00001.jpg"
            string_val: "../images/images/silk_spot/img_04_4406645900_00824.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00774.jpg"
            string_val: "../images/images/crescent_gap/img_01_425505100_00017.jpg"
            string_val: "../images/images/inclusion/img_03_425501800_01148.jpg"
            string_val: "../images/images/waist_folding/img_07_4405376800_00038.jpg"
            string_val: "../images/images/water_spot/img_02_4403466900_00011.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00664.jpg"
            string_val: "../images/images/crescent_gap/img_05_425503600_00053.jpg"
            string_val: "../images/images/water_spot/img_02_3436813700_00798.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00730.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00539.jpg"
            string_val: "../images/images/welding_line/img_01_425382400_00001.jpg"
            string_val: "../images/images/silk_spot/img_06_4406645900_00490.jpg"
            string_val: "../images/images/inclusion/img_03_4401440300_00347.jpg"
            string_val: "../images/images/inclusion/img_07_425008500_00314.jpg"
            string_val: "../images/images/crescent_gap/img_04_425003700_00002.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00801.jpg"
            string_val: "../images/images/punching_hole/img_06_3403402100_00857.jpg"
            string_val: "../images/images/oil_spot/img_07_3437011100_00684.jpg"
            string_val: "../images/images/waist_folding/img_06_4402830700_01162.jpg"
            string_val: "../images/images/silk_spot/img_03_425508400_00380.jpg"
            string_val: "../images/images/water_spot/img_02_4403466100_00013.jpg"
            string_val: "../images/images/oil_spot/img_03_3402617700_00456.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00558.jpg"
            string_val: "../images/images/crease/img_04_4402117000_00004.jpg"
            string_val: "../images/images/water_spot/img_07_425508300_00927.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00669.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00054.jpg"
            string_val: "../images/images/silk_spot/img_03_436150300_00328.jpg"
            string_val: "../images/images/punching_hole/img_03_425637500_00653.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00809.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00285.jpg"
            string_val: "../images/images/crescent_gap/img_04_425501700_00018.jpg"
            string_val: "../images/images/silk_spot/img_05_4406645900_00040.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00614.jpg"
            string_val: "../images/images/water_spot/img_01_425008000_00002.jpg"
            string_val: "../images/images/silk_spot/img_03_SIS001577_00019.jpg"
            string_val: "../images/images/oil_spot/img_03_3402617400_00941.jpg"
            string_val: "../images/images/silk_spot/img_03_436184600_00799.jpg"
            string_val: "../images/images/punching_hole/img_06_425639800_00873.jpg"
            string_val: "../images/images/silk_spot/img_04_4406645900_00543.jpg"
            string_val: "../images/images/inclusion/img_06_425237000_00660.jpg"
            string_val: "../images/images/punching_hole/img_06_425616500_00769.jpg"
            string_val: "../images/images/inclusion/img_02_425392000_00996.jpg"
            string_val: "../images/images/crescent_gap/img_07_4406645900_00002.jpg"
            string_val: "../images/images/welding_line/img_04_425382400_00001.jpg"
            string_val: "../images/images/silk_spot/img_03_436184600_00797.jpg"
            string_val: "../images/images/oil_spot/img_06_425502300_01409.jpg"
            string_val: "../images/images/silk_spot/img_01_SIS001577_00049.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00194.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00716.jpg"
            string_val: "../images/images/punching_hole/img_03_3403331900_01545.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00810.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00531.jpg"
            string_val: "../images/images/water_spot/img_02_3436813700_00270.jpg"
            string_val: "../images/images/silk_spot/img_06_4406743300_00033.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00411.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00786.jpg"
            string_val: "../images/images/silk_spot/img_03_436184600_00779.jpg"
            string_val: "../images/images/punching_hole/img_03_3403403300_00700.jpg"
            string_val: "../images/images/punching_hole/img_06_425644300_00598.jpg"
            string_val: "../images/images/silk_spot/img_04_4406645900_00808.jpg"
            string_val: "../images/images/crescent_gap/img_01_425503000_00017.jpg"
            string_val: "../images/images/silk_spot/img_02_4404580600_00661.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00080.jpg"
            string_val: "../images/images/welding_line/img_07_425613700_00782.jpg"
            string_val: "../images/images/water_spot/img_03_424826800_00420.jpg"
            string_val: "../images/images/oil_spot/img_03_3437006100_00013.jpg"
            string_val: "../images/images/welding_line/img_07_3402617400_01102.jpg"
            string_val: "../images/images/water_spot/img_02_4404580000_00041.jpg"
            string_val: "../images/images/crescent_gap/img_01_425006200_01173.jpg"
            string_val: "../images/images/crescent_gap/img_08_425503400_00053.jpg"
            string_val: "../images/images/inclusion/img_04_4402622500_00364.jpg"
            string_val: "../images/images/water_spot/img_04_425237600_00360.jpg"
            string_val: "../images/images/inclusion/img_06_425237000_00661.jpg"
            string_val: "../images/images/inclusion/img_03_3402617100_00120.jpg"
            string_val: "../images/images/punching_hole/img_03_425507200_00018.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00855.jpg"
            string_val: "../images/images/welding_line/img_02_425507000_00018.jpg"
            string_val: "../images/images/silk_spot/img_02_425243400_00057.jpg"
            string_val: "../images/images/silk_spot/img_01_3436815300_00473.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00056.jpg"
            string_val: "../images/images/oil_spot/img_07_435974600_00213.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00476.jpg"
            string_val: "../images/images/waist_folding/img_06_436185800_00735.jpg"
            string_val: "../images/images/oil_spot/img_03_425507000_00925.jpg"
            string_val: "../images/images/punching_hole/img_03_425614700_00712.jpg"
            string_val: "../images/images/inclusion/img_02_425613800_00034.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00434.jpg"
            string_val: "../images/images/water_spot/img_02_4403465900_00043.jpg"
            string_val: "../images/images/oil_spot/img_02_425507200_01515.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00817.jpg"
            string_val: "../images/images/punching_hole/img_03_424826300_00949.jpg"
            string_val: "../images/images/waist_folding/img_03_4404374100_01295.jpg"
            string_val: "../images/images/inclusion/img_02_425502300_00338.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00211.jpg"
            string_val: "../images/images/water_spot/img_01_424995500_00255.jpg"
            string_val: "../images/images/silk_spot/img_01_4406743300_00804.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00339.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00053.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00441.jpg"
            string_val: "../images/images/water_spot/img_03_424798500_00466.jpg"
            string_val: "../images/images/oil_spot/img_08_425391700_00188.jpg"
            string_val: "../images/images/silk_spot/img_07_424714400_00011.jpg"
            string_val: "../images/images/waist_folding/img_07_436164700_01536.jpg"
            string_val: "../images/images/punching_hole/img_03_425638500_00716.jpg"
            string_val: "../images/images/punching_hole/img_03_4406562900_00002.jpg"
            string_val: "../images/images/water_spot/img_01_425007600_00674.jpg"
            string_val: "../images/images/punching_hole/img_03_3403400200_00567.jpg"
            string_val: "../images/images/water_spot/img_01_4403565100_00007.jpg"
            string_val: "../images/images/welding_line/img_06_3403337800_00766.jpg"
            string_val: "../images/images/inclusion/img_04_425503200_00019.jpg"
            string_val: "../images/images/punching_hole/img_06_425503800_00052.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00159.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00046.jpg"
            string_val: "../images/images/waist_folding/img_07_424826800_00492.jpg"
            string_val: "../images/images/oil_spot/img_01_435974400_00005.jpg"
            string_val: "../images/images/oil_spot/img_06_425503400_00049.jpg"
            string_val: "../images/images/crescent_gap/img_08_425502700_00052.jpg"
            string_val: "../images/images/waist_folding/img_07_3436814000_00684.jpg"
            string_val: "../images/images/punching_hole/img_03_3403399500_00888.jpg"
            string_val: "../images/images/silk_spot/img_02_SIS001522_00031.jpg"
            string_val: "../images/images/inclusion/img_06_425507200_00976.jpg"
            string_val: "../images/images/water_spot/img_05_4402766800_00515.jpg"
            string_val: "../images/images/inclusion/img_03_3402617700_00653.jpg"
            string_val: "../images/images/crescent_gap/img_05_425502200_00054.jpg"
            string_val: "../images/images/water_spot/img_04_424826100_00528.jpg"
            string_val: "../images/images/rolled_pit/img_02_4402117200_00004.jpg"
            string_val: "../images/images/welding_line/img_02_425616500_00770.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00771.jpg"
            string_val: "../images/images/silk_spot/img_05_4406645900_00585.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00819.jpg"
            string_val: "../images/images/welding_line/img_07_425637500_00653.jpg"
            string_val: "../images/images/silk_spot/img_04_425243100_00677.jpg"
            string_val: "../images/images/crescent_gap/img_08_425006600_00930.jpg"
            string_val: "../images/images/inclusion/img_05_425502300_00026.jpg"
            string_val: "../images/images/water_spot/img_01_425241500_00995.jpg"
            string_val: "../images/images/silk_spot/img_06_4406743300_00036.jpg"
            string_val: "../images/images/silk_spot/img_03_436152900_00557.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00527.jpg"
            string_val: "../images/images/punching_hole/img_03_425504800_00018.jpg"
            string_val: "../images/images/welding_line/img_02_4402852500_01045.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00391.jpg"
            string_val: "../images/images/crescent_gap/img_08_425505100_00052.jpg"
            string_val: "../images/images/waist_folding/img_07_436164700_01551.jpg"
            string_val: "../images/images/crease/img_02_4406783500_00010.jpg"
            string_val: "../images/images/silk_spot/img_03_436150300_00317.jpg"
            string_val: "../images/images/inclusion/img_07_425508700_00362.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00328.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00435.jpg"
            string_val: "../images/images/welding_line/img_01_4402818600_00001.jpg"
            string_val: "../images/images/punching_hole/img_03_425616200_00001.jpg"
            string_val: "../images/images/crescent_gap/img_08_425007500_01452.jpg"
            string_val: "../images/images/oil_spot/img_06_425502300_01406.jpg"
            string_val: "../images/images/punching_hole/img_06_425615200_00639.jpg"
            string_val: "../images/images/inclusion/img_02_3436816100_00148.jpg"
            string_val: "../images/images/crescent_gap/img_01_425006100_00947.jpg"
            string_val: "../images/images/oil_spot/img_02_424799200_00250.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00410.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00322.jpg"
            string_val: "../images/images/water_spot/img_01_425000300_00520.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00321.jpg"
            string_val: "../images/images/rolled_pit/img_07_427199900_00007.jpg"
            string_val: "../images/images/water_spot/img_01_425243600_00848.jpg"
            string_val: "../images/images/crescent_gap/img_01_425637900_00899.jpg"
            string_val: "../images/images/rolled_pit/img_03_3437006900_00002.jpg"
            string_val: "../images/images/punching_hole/img_03_425644200_00680.jpg"
            string_val: "../images/images/water_spot/img_02_4403466100_00011.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00661.jpg"
            string_val: "../images/images/oil_spot/img_03_3437006500_00033.jpg"
            string_val: "../images/images/waist_folding/img_07_4402719200_00026.jpg"
            string_val: "../images/images/crescent_gap/img_01_425007500_01453.jpg"
            string_val: "../images/images/crescent_gap/img_05_425608200_00814.jpg"
            string_val: "../images/images/crescent_gap/img_05_425504800_00052.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00661.jpg"
            string_val: "../images/images/crescent_gap/img_08_4406772100_00002.jpg"
            string_val: "../images/images/water_spot/img_02_4406772100_00673.jpg"
            string_val: "../images/images/oil_spot/img_07_3437011100_00685.jpg"
            string_val: "../images/images/silk_spot/img_06_4406645900_00451.jpg"
            string_val: "../images/images/oil_spot/img_02_425507200_01514.jpg"
            string_val: "../images/images/punching_hole/img_06_425644200_00680.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00772.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00693.jpg"
            string_val: "../images/images/welding_line/img_07_3403335700_01048.jpg"
            string_val: "../images/images/punching_hole/img_03_424992300_00001.jpg"
            string_val: "../images/images/crescent_gap/img_01_425503100_00017.jpg"
            string_val: "../images/images/punching_hole/img_02_425640000_00634.jpg"
            string_val: "../images/images/oil_spot/img_04_436163100_00039.jpg"
            string_val: "../images/images/welding_line/img_07_3403403900_00809.jpg"
            string_val: "../images/images/punching_hole/img_06_425508700_00053.jpg"
            string_val: "../images/images/crescent_gap/img_01_436067700_00689.jpg"
            string_val: "../images/images/waist_folding/img_06_3436814000_00007.jpg"
            string_val: "../images/images/welding_line/img_04_425380900_00001.jpg"
            string_val: "../images/images/waist_folding/img_07_4404374100_01349.jpg"
            string_val: "../images/images/welding_line/img_07_4404710300_00877.jpg"
            string_val: "../images/images/crescent_gap/img_06_425390700_00051.jpg"
            string_val: "../images/images/waist_folding/img_07_4405133600_00039.jpg"
            string_val: "../images/images/punching_hole/img_06_425506800_00054.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00793.jpg"
            string_val: "../images/images/silk_spot/img_06_3436814300_00056.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00660.jpg"
            string_val: "../images/images/punching_hole/img_03_425609500_00001.jpg"
            string_val: "../images/images/waist_folding/img_06_425614600_00414.jpg"
            string_val: "../images/images/inclusion/img_02_425501100_00688.jpg"
            string_val: "../images/images/rolled_pit/img_02_427146700_00002.jpg"
            string_val: "../images/images/crescent_gap/img_08_425391800_00054.jpg"
            string_val: "../images/images/crescent_gap/img_04_424799600_00001.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00197.jpg"
            string_val: "../images/images/silk_spot/img_04_SIS001577_00045.jpg"
            string_val: "../images/images/inclusion/img_03_3402617100_00119.jpg"
            string_val: "../images/images/waist_folding/img_07_3436814000_00010.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00425.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00458.jpg"
            string_val: "../images/images/crescent_gap/img_01_425006400_00001.jpg"
            string_val: "../images/images/waist_folding/img_06_424826800_00502.jpg"
            string_val: "../images/images/welding_line/img_03_425501100_00018.jpg"
            string_val: "../images/images/water_spot/img_01_425241600_00283.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00092.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00433.jpg"
            string_val: "../images/images/welding_line/img_07_4404893900_00568.jpg"
            string_val: "../images/images/crease/img_07_425004200_00982.jpg"
            string_val: "../images/images/welding_line/img_01_425638500_00001.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00191.jpg"
            string_val: "../images/images/water_spot/img_02_3436813700_00788.jpg"
            string_val: "../images/images/silk_spot/img_01_425243200_00439.jpg"
            string_val: "../images/images/crease/img_08_427199900_01134.jpg"
            string_val: "../images/images/welding_line/img_01_425507000_00018.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00420.jpg"
            string_val: "../images/images/inclusion/img_02_3402617100_00366.jpg"
            string_val: "../images/images/silk_spot/img_02_SIS001533_00311.jpg"
            string_val: "../images/images/oil_spot/img_06_425502300_01408.jpg"
            string_val: "../images/images/welding_line/img_03_436068600_00001.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00546.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00655.jpg"
            string_val: "../images/images/crescent_gap/img_04_424799200_00001.jpg"
            string_val: "../images/images/inclusion/img_05_425504900_00057.jpg"
            string_val: "../images/images/punching_hole/img_02_425644200_00681.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00183.jpg"
            string_val: "../images/images/punching_hole/img_02_425613600_00582.jpg"
            string_val: "../images/images/welding_line/img_03_425506300_00018.jpg"
            string_val: "../images/images/crease/img_05_4405381400_00774.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00913.jpg"
            string_val: "../images/images/oil_spot/img_04_436163100_00021.jpg"
            string_val: "../images/images/crescent_gap/img_04_424825700_00001.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00688.jpg"
            string_val: "../images/images/punching_hole/img_03_425613700_00782.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00277.jpg"
            string_val: "../images/images/crescent_gap/img_01_425008500_00874.jpg"
            string_val: "../images/images/waist_folding/img_06_3436814000_00683.jpg"
            string_val: "../images/images/water_spot/img_02_424799300_00146.jpg"
            string_val: "../images/images/waist_folding/img_06_436164700_01537.jpg"
            string_val: "../images/images/welding_line/img_03_436184600_00002.jpg"
            string_val: "../images/images/oil_spot/img_01_425614600_00428.jpg"
            string_val: "../images/images/welding_line/img_06_4403068400_01288.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00063.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00074.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00576.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00518.jpg"
            string_val: "../images/images/water_spot/img_03_424992300_00520.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00320.jpg"
            string_val: "../images/images/inclusion/img_06_425392500_00834.jpg"
            string_val: "../images/images/silk_spot/img_04_SIS001577_00052.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00325.jpg"
            string_val: "../images/images/crescent_gap/img_01_425609500_00001.jpg"
            string_val: "../images/images/inclusion/img_03_425501800_01220.jpg"
            string_val: "../images/images/silk_spot/img_02_SIS001564_01335.jpg"
            string_val: "../images/images/inclusion/img_07_425504800_00992.jpg"
            string_val: "../images/images/oil_spot/img_06_425502300_01397.jpg"
            string_val: "../images/images/punching_hole/img_06_425614700_00694.jpg"
            string_val: "../images/images/silk_spot/img_03_436150300_00330.jpg"
            string_val: "../images/images/crease/img_03_SIS001559_00006.jpg"
            string_val: "../images/images/water_spot/img_02_4403466700_00014.jpg"
            string_val: "../images/images/inclusion/img_06_425237000_00834.jpg"
            string_val: "../images/images/crescent_gap/img_05_425613500_00596.jpg"
            string_val: "../images/images/silk_spot/img_06_4406645900_00492.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00463.jpg"
            string_val: "../images/images/rolled_pit/img_03_4402724500_01238.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00676.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00071.jpg"
            string_val: "../images/images/crescent_gap/img_04_425503000_00017.jpg"
            string_val: "../images/images/silk_spot/img_01_4406743300_00461.jpg"
            string_val: "../images/images/welding_line/img_05_4405356600_00896.jpg"
            string_val: "../images/images/crescent_gap/img_08_425008500_00873.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00771.jpg"
            string_val: "../images/images/punching_hole/img_03_425502600_00017.jpg"
            string_val: "../images/images/crescent_gap/img_01_425007500_01452.jpg"
            string_val: "../images/images/crescent_gap/img_08_425608200_00006.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00267.jpg"
            string_val: "../images/images/waist_folding/img_07_436164700_01538.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00273.jpg"
            string_val: "../images/images/silk_spot/img_02_3436786500_00143.jpg"
            string_val: "../images/images/crescent_gap/img_03_SIS001561_01569.jpg"
            string_val: "../images/images/water_spot/img_01_425006600_00499.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00467.jpg"
            string_val: "../images/images/oil_spot/img_04_436163100_00008.jpg"
            string_val: "../images/images/silk_spot/img_02_425243200_00536.jpg"
            string_val: "../images/images/crescent_gap/img_01_425503100_00018.jpg"
            string_val: "../images/images/punching_hole/img_03_3403397500_01395.jpg"
            string_val: "../images/images/oil_spot/img_02_425613800_00218.jpg"
            string_val: "../images/images/waist_folding/img_06_3436814000_00688.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00045.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00313.jpg"
            string_val: "../images/images/punching_hole/img_03_425503400_00017.jpg"
            string_val: "../images/images/inclusion/img_08_425508300_00656.jpg"
            string_val: "../images/images/punching_hole/img_06_3403399600_00739.jpg"
            string_val: "../images/images/oil_spot/img_07_435974600_00223.jpg"
            string_val: "../images/images/water_spot/img_01_425007600_00126.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00179.jpg"
            string_val: "../images/images/inclusion/img_02_3436816100_00153.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00039.jpg"
            string_val: "../images/images/oil_spot/img_02_425507000_00913.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00704.jpg"
            string_val: "../images/images/silk_spot/img_02_4406562900_00755.jpg"
            string_val: "../images/images/water_spot/img_01_425241600_00041.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00335.jpg"
            string_val: "../images/images/welding_line/img_06_425505500_00052.jpg"
            string_val: "../images/images/crescent_gap/img_08_425638500_00713.jpg"
            string_val: "../images/images/waist_folding/img_06_436164700_01556.jpg"
            string_val: "../images/images/oil_spot/img_08_425508100_01398.jpg"
            string_val: "../images/images/silk_spot/img_06_425243200_00116.jpg"
            string_val: "../images/images/silk_spot/img_04_SIS001577_00046.jpg"
            string_val: "../images/images/water_spot/img_01_425244100_00682.jpg"
            string_val: "../images/images/oil_spot/img_01_433354400_00040.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00659.jpg"
            string_val: "../images/images/welding_line/img_07_3403334800_00898.jpg"
            string_val: "../images/images/silk_spot/img_03_436152900_00543.jpg"
            string_val: "../images/images/silk_spot/img_04_4406743300_00004.jpg"
            string_val: "../images/images/water_spot/img_02_436183700_00098.jpg"
            string_val: "../images/images/welding_line/img_03_436185500_00005.jpg"
            string_val: "../images/images/welding_line/img_02_436164700_00001.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00156.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00555.jpg"
            string_val: "../images/images/crescent_gap/img_04_425501800_00018.jpg"
            string_val: "../images/images/waist_folding/img_07_3437006500_00761.jpg"
            string_val: "../images/images/water_spot/img_02_4406772100_00305.jpg"
            string_val: "../images/images/silk_spot/img_03_436152900_00535.jpg"
            string_val: "../images/images/waist_folding/img_07_424826800_00493.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00056.jpg"
            string_val: "../images/images/welding_line/img_03_3402616100_00002.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00692.jpg"
            string_val: "../images/images/water_spot/img_03_424992300_00514.jpg"
            string_val: "../images/images/crescent_gap/img_05_425502600_00052.jpg"
            string_val: "../images/images/water_spot/img_02_4406772100_00404.jpg"
            string_val: "../images/images/inclusion/img_06_4405000800_01031.jpg"
            string_val: "../images/images/silk_spot/img_03_4406645900_00009.jpg"
            string_val: "../images/images/welding_line/img_06_SIS002344_00834.jpg"
            string_val: "../images/images/welding_line/img_07_425613800_00786.jpg"
            string_val: "../images/images/punching_hole/img_03_4406424600_00002.jpg"
            string_val: "../images/images/inclusion/img_03_425503100_00068.jpg"
            string_val: "../images/images/inclusion/img_03_3402617500_00138.jpg"
            string_val: "../images/images/water_spot/img_02_4406446700_00001.jpg"
            string_val: "../images/images/crescent_gap/img_01_425503400_00018.jpg"
            string_val: "../images/images/rolled_pit/img_02_4402116500_00005.jpg"
            string_val: "../images/images/water_spot/img_02_3436813700_00307.jpg"
            string_val: "../images/images/crescent_gap/img_01_424826100_00001.jpg"
            string_val: "../images/images/inclusion/img_03_425501800_01160.jpg"
            string_val: "../images/images/crease/img_02_4406783500_00004.jpg"
            string_val: "../images/images/inclusion/img_08_425608200_00504.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00523.jpg"
            string_val: "../images/images/silk_spot/img_04_436068100_00089.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00691.jpg"
            string_val: "../images/images/crescent_gap/img_08_425503800_00053.jpg"
            string_val: "../images/images/inclusion/img_07_4406645900_00339.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00266.jpg"
            string_val: "../images/images/punching_hole/img_06_3403399900_01007.jpg"
            string_val: "../images/images/crescent_gap/img_04_425505000_00018.jpg"
            string_val: "../images/images/welding_line/img_02_436149500_00939.jpg"
            string_val: "../images/images/inclusion/img_08_425508100_01624.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00381.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00111.jpg"
            string_val: "../images/images/crescent_gap/img_04_425608200_00001.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00424.jpg"
            string_val: "../images/images/oil_spot/img_08_425391700_00095.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00042.jpg"
            string_val: "../images/images/crescent_gap/img_01_3402617700_00001.jpg"
            string_val: "../images/images/inclusion/img_08_425639900_00613.jpg"
            string_val: "../images/images/punching_hole/img_03_3403404300_01219.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00312.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00041.jpg"
            string_val: "../images/images/silk_spot/img_01_SIS001577_00020.jpg"
            string_val: "../images/images/water_spot/img_02_424799200_00450.jpg"
            string_val: "../images/images/punching_hole/img_06_425506100_00051.jpg"
            string_val: "../images/images/water_spot/img_03_424825900_00211.jpg"
            string_val: "../images/images/inclusion/img_02_4402623300_00026.jpg"
            string_val: "../images/images/inclusion/img_06_4402625300_00109.jpg"
            string_val: "../images/images/welding_line/img_02_436185000_00016.jpg"
            string_val: "../images/images/inclusion/img_06_4402625300_00104.jpg"
            string_val: "../images/images/water_spot/img_02_3436813700_00298.jpg"
            string_val: "../images/images/silk_spot/img_04_425005700_00169.jpg"
            string_val: "../images/images/silk_spot/img_02_4406645900_00894.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00343.jpg"
            string_val: "../images/images/punching_hole/img_03_436153600_01213.jpg"
            string_val: "../images/images/crease/img_07_4405965200_00151.jpg"
            string_val: "../images/images/inclusion/img_03_3402617400_00898.jpg"
            string_val: "../images/images/silk_spot/img_03_436184600_00793.jpg"
            string_val: "../images/images/crease/img_03_4405964400_00010.jpg"
            string_val: "../images/images/welding_line/img_07_436164700_01555.jpg"
            string_val: "../images/images/silk_spot/img_04_4406645900_00678.jpg"
            string_val: "../images/images/punching_hole/img_06_3403333900_00758.jpg"
            string_val: "../images/images/punching_hole/img_03_3403392000_01070.jpg"
            string_val: "../images/images/water_spot/img_01_425007600_00599.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00570.jpg"
            string_val: "../images/images/oil_spot/img_02_425507000_00931.jpg"
            string_val: "../images/images/waist_folding/img_07_3436814000_00006.jpg"
            string_val: "../images/images/inclusion/img_08_425506100_00400.jpg"
            string_val: "../images/images/oil_spot/img_03_4403465900_00023.jpg"
            string_val: "../images/images/welding_line/img_01_425506400_00018.jpg"
            string_val: "../images/images/water_spot/img_03_4403466500_00029.jpg"
            string_val: "../images/images/crescent_gap/img_05_425502600_00053.jpg"
            string_val: "../images/images/welding_line/img_04_425508100_00018.jpg"
            string_val: "../images/images/inclusion/img_01_4406743300_00935.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00420.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00519.jpg"
            string_val: "../images/images/water_spot/img_01_425000300_00630.jpg"
            string_val: "../images/images/oil_spot/img_08_425507600_00361.jpg"
            string_val: "../images/images/oil_spot/img_08_425391700_00187.jpg"
            string_val: "../images/images/crescent_gap/img_01_425616200_00001.jpg"
            string_val: "../images/images/oil_spot/img_06_425502300_01399.jpg"
          }
        }
      }
    }
    node_def {
      name: "GatherV2_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "GatherV2_1"
      op: "GatherV2"
      input: "GatherV2_1/params:output:0"
      input: "Cast:y:0"
      input: "GatherV2_1/axis:output:0"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "batch_dims"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "GatherV2_2/params"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 462
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 462
              }
            }
            string_val: "../images/images/silk_spot/img_04_4406743300_00595.jpg"
            string_val: "../images/images/punching_hole/img_06_424799300_01133.jpg"
            string_val: "../images/images/silk_spot/img_04_SIS001577_00040.jpg"
            string_val: "../images/images/oil_spot/img_04_436163100_00010.jpg"
            string_val: "../images/images/crescent_gap/img_04_425502300_00018.jpg"
            string_val: "../images/images/welding_line/img_08_425382400_00001.jpg"
            string_val: "../images/images/water_spot/img_01_4403565100_00012.jpg"
            string_val: "../images/images/water_spot/img_01_425006200_00175.jpg"
            string_val: "../images/images/inclusion/img_06_425237000_00664.jpg"
            string_val: "../images/images/inclusion/img_02_425503000_00020.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00436.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00223.jpg"
            string_val: "../images/images/welding_line/img_03_425613500_00597.jpg"
            string_val: "../images/images/welding_line/img_04_4402787600_00001.jpg"
            string_val: "../images/images/oil_spot/img_07_4405168700_00711.jpg"
            string_val: "../images/images/crescent_gap/img_05_425640000_00634.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00547.jpg"
            string_val: "../images/images/water_spot/img_08_4403744200_01175.jpg"
            string_val: "../images/images/oil_spot/img_07_3437011100_00683.jpg"
            string_val: "../images/images/waist_folding/img_06_424826800_00500.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00145.jpg"
            string_val: "../images/images/crescent_gap/img_08_424826300_00950.jpg"
            string_val: "../images/images/waist_folding/img_06_3436814000_00679.jpg"
            string_val: "../images/images/punching_hole/img_03_425616500_00769.jpg"
            string_val: "../images/images/punching_hole/img_03_425501700_00018.jpg"
            string_val: "../images/images/crescent_gap/img_08_424799600_00001.jpg"
            string_val: "../images/images/inclusion/img_02_425503800_00019.jpg"
            string_val: "../images/images/silk_spot/img_01_SIS001522_00045.jpg"
            string_val: "../images/images/silk_spot/img_05_4406645900_00038.jpg"
            string_val: "../images/images/silk_spot/img_03_436152900_00585.jpg"
            string_val: "../images/images/welding_line/img_02_425614400_00001.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00065.jpg"
            string_val: "../images/images/water_spot/img_02_425237600_00302.jpg"
            string_val: "../images/images/welding_line/img_07_425390100_00053.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00317.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00503.jpg"
            string_val: "../images/images/silk_spot/img_06_4406645900_00475.jpg"
            string_val: "../images/images/silk_spot/img_03_425505400_01033.jpg"
            string_val: "../images/images/punching_hole/img_06_3403399100_01155.jpg"
            string_val: "../images/images/crease/img_02_425613700_00758.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00246.jpg"
            string_val: "../images/images/water_spot/img_01_425000300_00103.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00481.jpg"
            string_val: "../images/images/punching_hole/img_03_425613500_00001.jpg"
            string_val: "../images/images/silk_spot/img_04_4406645900_00824.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00774.jpg"
            string_val: "../images/images/crescent_gap/img_01_425505100_00017.jpg"
            string_val: "../images/images/inclusion/img_03_425501800_01148.jpg"
            string_val: "../images/images/waist_folding/img_07_4405376800_00038.jpg"
            string_val: "../images/images/water_spot/img_02_4403466900_00011.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00664.jpg"
            string_val: "../images/images/crescent_gap/img_05_425503600_00053.jpg"
            string_val: "../images/images/water_spot/img_02_3436813700_00798.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00730.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00539.jpg"
            string_val: "../images/images/welding_line/img_01_425382400_00001.jpg"
            string_val: "../images/images/silk_spot/img_06_4406645900_00490.jpg"
            string_val: "../images/images/inclusion/img_03_4401440300_00347.jpg"
            string_val: "../images/images/inclusion/img_07_425008500_00314.jpg"
            string_val: "../images/images/crescent_gap/img_04_425003700_00002.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00801.jpg"
            string_val: "../images/images/punching_hole/img_06_3403402100_00857.jpg"
            string_val: "../images/images/oil_spot/img_07_3437011100_00684.jpg"
            string_val: "../images/images/waist_folding/img_06_4402830700_01162.jpg"
            string_val: "../images/images/silk_spot/img_03_425508400_00380.jpg"
            string_val: "../images/images/water_spot/img_02_4403466100_00013.jpg"
            string_val: "../images/images/oil_spot/img_03_3402617700_00456.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00558.jpg"
            string_val: "../images/images/crease/img_04_4402117000_00004.jpg"
            string_val: "../images/images/water_spot/img_07_425508300_00927.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00669.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00054.jpg"
            string_val: "../images/images/silk_spot/img_03_436150300_00328.jpg"
            string_val: "../images/images/punching_hole/img_03_425637500_00653.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00809.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00285.jpg"
            string_val: "../images/images/crescent_gap/img_04_425501700_00018.jpg"
            string_val: "../images/images/silk_spot/img_05_4406645900_00040.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00614.jpg"
            string_val: "../images/images/water_spot/img_01_425008000_00002.jpg"
            string_val: "../images/images/silk_spot/img_03_SIS001577_00019.jpg"
            string_val: "../images/images/oil_spot/img_03_3402617400_00941.jpg"
            string_val: "../images/images/silk_spot/img_03_436184600_00799.jpg"
            string_val: "../images/images/punching_hole/img_06_425639800_00873.jpg"
            string_val: "../images/images/silk_spot/img_04_4406645900_00543.jpg"
            string_val: "../images/images/inclusion/img_06_425237000_00660.jpg"
            string_val: "../images/images/punching_hole/img_06_425616500_00769.jpg"
            string_val: "../images/images/inclusion/img_02_425392000_00996.jpg"
            string_val: "../images/images/crescent_gap/img_07_4406645900_00002.jpg"
            string_val: "../images/images/welding_line/img_04_425382400_00001.jpg"
            string_val: "../images/images/silk_spot/img_03_436184600_00797.jpg"
            string_val: "../images/images/oil_spot/img_06_425502300_01409.jpg"
            string_val: "../images/images/silk_spot/img_01_SIS001577_00049.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00194.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00716.jpg"
            string_val: "../images/images/punching_hole/img_03_3403331900_01545.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00810.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00531.jpg"
            string_val: "../images/images/water_spot/img_02_3436813700_00270.jpg"
            string_val: "../images/images/silk_spot/img_06_4406743300_00033.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00411.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00786.jpg"
            string_val: "../images/images/silk_spot/img_03_436184600_00779.jpg"
            string_val: "../images/images/punching_hole/img_03_3403403300_00700.jpg"
            string_val: "../images/images/punching_hole/img_06_425644300_00598.jpg"
            string_val: "../images/images/silk_spot/img_04_4406645900_00808.jpg"
            string_val: "../images/images/crescent_gap/img_01_425503000_00017.jpg"
            string_val: "../images/images/silk_spot/img_02_4404580600_00661.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00080.jpg"
            string_val: "../images/images/welding_line/img_07_425613700_00782.jpg"
            string_val: "../images/images/water_spot/img_03_424826800_00420.jpg"
            string_val: "../images/images/oil_spot/img_03_3437006100_00013.jpg"
            string_val: "../images/images/welding_line/img_07_3402617400_01102.jpg"
            string_val: "../images/images/water_spot/img_02_4404580000_00041.jpg"
            string_val: "../images/images/crescent_gap/img_01_425006200_01173.jpg"
            string_val: "../images/images/crescent_gap/img_08_425503400_00053.jpg"
            string_val: "../images/images/inclusion/img_04_4402622500_00364.jpg"
            string_val: "../images/images/water_spot/img_04_425237600_00360.jpg"
            string_val: "../images/images/inclusion/img_06_425237000_00661.jpg"
            string_val: "../images/images/inclusion/img_03_3402617100_00120.jpg"
            string_val: "../images/images/punching_hole/img_03_425507200_00018.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00855.jpg"
            string_val: "../images/images/welding_line/img_02_425507000_00018.jpg"
            string_val: "../images/images/silk_spot/img_02_425243400_00057.jpg"
            string_val: "../images/images/silk_spot/img_01_3436815300_00473.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00056.jpg"
            string_val: "../images/images/oil_spot/img_07_435974600_00213.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00476.jpg"
            string_val: "../images/images/waist_folding/img_06_436185800_00735.jpg"
            string_val: "../images/images/oil_spot/img_03_425507000_00925.jpg"
            string_val: "../images/images/punching_hole/img_03_425614700_00712.jpg"
            string_val: "../images/images/inclusion/img_02_425613800_00034.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00434.jpg"
            string_val: "../images/images/water_spot/img_02_4403465900_00043.jpg"
            string_val: "../images/images/oil_spot/img_02_425507200_01515.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00817.jpg"
            string_val: "../images/images/punching_hole/img_03_424826300_00949.jpg"
            string_val: "../images/images/waist_folding/img_03_4404374100_01295.jpg"
            string_val: "../images/images/inclusion/img_02_425502300_00338.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00211.jpg"
            string_val: "../images/images/water_spot/img_01_424995500_00255.jpg"
            string_val: "../images/images/silk_spot/img_01_4406743300_00804.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00339.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00053.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00441.jpg"
            string_val: "../images/images/water_spot/img_03_424798500_00466.jpg"
            string_val: "../images/images/oil_spot/img_08_425391700_00188.jpg"
            string_val: "../images/images/silk_spot/img_07_424714400_00011.jpg"
            string_val: "../images/images/waist_folding/img_07_436164700_01536.jpg"
            string_val: "../images/images/punching_hole/img_03_425638500_00716.jpg"
            string_val: "../images/images/punching_hole/img_03_4406562900_00002.jpg"
            string_val: "../images/images/water_spot/img_01_425007600_00674.jpg"
            string_val: "../images/images/punching_hole/img_03_3403400200_00567.jpg"
            string_val: "../images/images/water_spot/img_01_4403565100_00007.jpg"
            string_val: "../images/images/welding_line/img_06_3403337800_00766.jpg"
            string_val: "../images/images/inclusion/img_04_425503200_00019.jpg"
            string_val: "../images/images/punching_hole/img_06_425503800_00052.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00159.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00046.jpg"
            string_val: "../images/images/waist_folding/img_07_424826800_00492.jpg"
            string_val: "../images/images/oil_spot/img_01_435974400_00005.jpg"
            string_val: "../images/images/oil_spot/img_06_425503400_00049.jpg"
            string_val: "../images/images/crescent_gap/img_08_425502700_00052.jpg"
            string_val: "../images/images/waist_folding/img_07_3436814000_00684.jpg"
            string_val: "../images/images/punching_hole/img_03_3403399500_00888.jpg"
            string_val: "../images/images/silk_spot/img_02_SIS001522_00031.jpg"
            string_val: "../images/images/inclusion/img_06_425507200_00976.jpg"
            string_val: "../images/images/water_spot/img_05_4402766800_00515.jpg"
            string_val: "../images/images/inclusion/img_03_3402617700_00653.jpg"
            string_val: "../images/images/crescent_gap/img_05_425502200_00054.jpg"
            string_val: "../images/images/water_spot/img_04_424826100_00528.jpg"
            string_val: "../images/images/rolled_pit/img_02_4402117200_00004.jpg"
            string_val: "../images/images/welding_line/img_02_425616500_00770.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00771.jpg"
            string_val: "../images/images/silk_spot/img_05_4406645900_00585.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00819.jpg"
            string_val: "../images/images/welding_line/img_07_425637500_00653.jpg"
            string_val: "../images/images/silk_spot/img_04_425243100_00677.jpg"
            string_val: "../images/images/crescent_gap/img_08_425006600_00930.jpg"
            string_val: "../images/images/inclusion/img_05_425502300_00026.jpg"
            string_val: "../images/images/water_spot/img_01_425241500_00995.jpg"
            string_val: "../images/images/silk_spot/img_06_4406743300_00036.jpg"
            string_val: "../images/images/silk_spot/img_03_436152900_00557.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00527.jpg"
            string_val: "../images/images/punching_hole/img_03_425504800_00018.jpg"
            string_val: "../images/images/welding_line/img_02_4402852500_01045.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00391.jpg"
            string_val: "../images/images/crescent_gap/img_08_425505100_00052.jpg"
            string_val: "../images/images/waist_folding/img_07_436164700_01551.jpg"
            string_val: "../images/images/crease/img_02_4406783500_00010.jpg"
            string_val: "../images/images/silk_spot/img_03_436150300_00317.jpg"
            string_val: "../images/images/inclusion/img_07_425508700_00362.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00328.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00435.jpg"
            string_val: "../images/images/welding_line/img_01_4402818600_00001.jpg"
            string_val: "../images/images/punching_hole/img_03_425616200_00001.jpg"
            string_val: "../images/images/crescent_gap/img_08_425007500_01452.jpg"
            string_val: "../images/images/oil_spot/img_06_425502300_01406.jpg"
            string_val: "../images/images/punching_hole/img_06_425615200_00639.jpg"
            string_val: "../images/images/inclusion/img_02_3436816100_00148.jpg"
            string_val: "../images/images/crescent_gap/img_01_425006100_00947.jpg"
            string_val: "../images/images/oil_spot/img_02_424799200_00250.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00410.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00322.jpg"
            string_val: "../images/images/water_spot/img_01_425000300_00520.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00321.jpg"
            string_val: "../images/images/rolled_pit/img_07_427199900_00007.jpg"
            string_val: "../images/images/water_spot/img_01_425243600_00848.jpg"
            string_val: "../images/images/crescent_gap/img_01_425637900_00899.jpg"
            string_val: "../images/images/rolled_pit/img_03_3437006900_00002.jpg"
            string_val: "../images/images/punching_hole/img_03_425644200_00680.jpg"
            string_val: "../images/images/water_spot/img_02_4403466100_00011.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00661.jpg"
            string_val: "../images/images/oil_spot/img_03_3437006500_00033.jpg"
            string_val: "../images/images/waist_folding/img_07_4402719200_00026.jpg"
            string_val: "../images/images/crescent_gap/img_01_425007500_01453.jpg"
            string_val: "../images/images/crescent_gap/img_05_425608200_00814.jpg"
            string_val: "../images/images/crescent_gap/img_05_425504800_00052.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00661.jpg"
            string_val: "../images/images/crescent_gap/img_08_4406772100_00002.jpg"
            string_val: "../images/images/water_spot/img_02_4406772100_00673.jpg"
            string_val: "../images/images/oil_spot/img_07_3437011100_00685.jpg"
            string_val: "../images/images/silk_spot/img_06_4406645900_00451.jpg"
            string_val: "../images/images/oil_spot/img_02_425507200_01514.jpg"
            string_val: "../images/images/punching_hole/img_06_425644200_00680.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00772.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00693.jpg"
            string_val: "../images/images/welding_line/img_07_3403335700_01048.jpg"
            string_val: "../images/images/punching_hole/img_03_424992300_00001.jpg"
            string_val: "../images/images/crescent_gap/img_01_425503100_00017.jpg"
            string_val: "../images/images/punching_hole/img_02_425640000_00634.jpg"
            string_val: "../images/images/oil_spot/img_04_436163100_00039.jpg"
            string_val: "../images/images/welding_line/img_07_3403403900_00809.jpg"
            string_val: "../images/images/punching_hole/img_06_425508700_00053.jpg"
            string_val: "../images/images/crescent_gap/img_01_436067700_00689.jpg"
            string_val: "../images/images/waist_folding/img_06_3436814000_00007.jpg"
            string_val: "../images/images/welding_line/img_04_425380900_00001.jpg"
            string_val: "../images/images/waist_folding/img_07_4404374100_01349.jpg"
            string_val: "../images/images/welding_line/img_07_4404710300_00877.jpg"
            string_val: "../images/images/crescent_gap/img_06_425390700_00051.jpg"
            string_val: "../images/images/waist_folding/img_07_4405133600_00039.jpg"
            string_val: "../images/images/punching_hole/img_06_425506800_00054.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00793.jpg"
            string_val: "../images/images/silk_spot/img_06_3436814300_00056.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00660.jpg"
            string_val: "../images/images/punching_hole/img_03_425609500_00001.jpg"
            string_val: "../images/images/waist_folding/img_06_425614600_00414.jpg"
            string_val: "../images/images/inclusion/img_02_425501100_00688.jpg"
            string_val: "../images/images/rolled_pit/img_02_427146700_00002.jpg"
            string_val: "../images/images/crescent_gap/img_08_425391800_00054.jpg"
            string_val: "../images/images/crescent_gap/img_04_424799600_00001.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00197.jpg"
            string_val: "../images/images/silk_spot/img_04_SIS001577_00045.jpg"
            string_val: "../images/images/inclusion/img_03_3402617100_00119.jpg"
            string_val: "../images/images/waist_folding/img_07_3436814000_00010.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00425.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00458.jpg"
            string_val: "../images/images/crescent_gap/img_01_425006400_00001.jpg"
            string_val: "../images/images/waist_folding/img_06_424826800_00502.jpg"
            string_val: "../images/images/welding_line/img_03_425501100_00018.jpg"
            string_val: "../images/images/water_spot/img_01_425241600_00283.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00092.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00433.jpg"
            string_val: "../images/images/welding_line/img_07_4404893900_00568.jpg"
            string_val: "../images/images/crease/img_07_425004200_00982.jpg"
            string_val: "../images/images/welding_line/img_01_425638500_00001.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00191.jpg"
            string_val: "../images/images/water_spot/img_02_3436813700_00788.jpg"
            string_val: "../images/images/silk_spot/img_01_425243200_00439.jpg"
            string_val: "../images/images/crease/img_08_427199900_01134.jpg"
            string_val: "../images/images/welding_line/img_01_425507000_00018.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00420.jpg"
            string_val: "../images/images/inclusion/img_02_3402617100_00366.jpg"
            string_val: "../images/images/silk_spot/img_02_SIS001533_00311.jpg"
            string_val: "../images/images/oil_spot/img_06_425502300_01408.jpg"
            string_val: "../images/images/welding_line/img_03_436068600_00001.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00546.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00655.jpg"
            string_val: "../images/images/crescent_gap/img_04_424799200_00001.jpg"
            string_val: "../images/images/inclusion/img_05_425504900_00057.jpg"
            string_val: "../images/images/punching_hole/img_02_425644200_00681.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00183.jpg"
            string_val: "../images/images/punching_hole/img_02_425613600_00582.jpg"
            string_val: "../images/images/welding_line/img_03_425506300_00018.jpg"
            string_val: "../images/images/crease/img_05_4405381400_00774.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00913.jpg"
            string_val: "../images/images/oil_spot/img_04_436163100_00021.jpg"
            string_val: "../images/images/crescent_gap/img_04_424825700_00001.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00688.jpg"
            string_val: "../images/images/punching_hole/img_03_425613700_00782.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00277.jpg"
            string_val: "../images/images/crescent_gap/img_01_425008500_00874.jpg"
            string_val: "../images/images/waist_folding/img_06_3436814000_00683.jpg"
            string_val: "../images/images/water_spot/img_02_424799300_00146.jpg"
            string_val: "../images/images/waist_folding/img_06_436164700_01537.jpg"
            string_val: "../images/images/welding_line/img_03_436184600_00002.jpg"
            string_val: "../images/images/oil_spot/img_01_425614600_00428.jpg"
            string_val: "../images/images/welding_line/img_06_4403068400_01288.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00063.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00074.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00576.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00518.jpg"
            string_val: "../images/images/water_spot/img_03_424992300_00520.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00320.jpg"
            string_val: "../images/images/inclusion/img_06_425392500_00834.jpg"
            string_val: "../images/images/silk_spot/img_04_SIS001577_00052.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00325.jpg"
            string_val: "../images/images/crescent_gap/img_01_425609500_00001.jpg"
            string_val: "../images/images/inclusion/img_03_425501800_01220.jpg"
            string_val: "../images/images/silk_spot/img_02_SIS001564_01335.jpg"
            string_val: "../images/images/inclusion/img_07_425504800_00992.jpg"
            string_val: "../images/images/oil_spot/img_06_425502300_01397.jpg"
            string_val: "../images/images/punching_hole/img_06_425614700_00694.jpg"
            string_val: "../images/images/silk_spot/img_03_436150300_00330.jpg"
            string_val: "../images/images/crease/img_03_SIS001559_00006.jpg"
            string_val: "../images/images/water_spot/img_02_4403466700_00014.jpg"
            string_val: "../images/images/inclusion/img_06_425237000_00834.jpg"
            string_val: "../images/images/crescent_gap/img_05_425613500_00596.jpg"
            string_val: "../images/images/silk_spot/img_06_4406645900_00492.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00463.jpg"
            string_val: "../images/images/rolled_pit/img_03_4402724500_01238.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00676.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00071.jpg"
            string_val: "../images/images/crescent_gap/img_04_425503000_00017.jpg"
            string_val: "../images/images/silk_spot/img_01_4406743300_00461.jpg"
            string_val: "../images/images/welding_line/img_05_4405356600_00896.jpg"
            string_val: "../images/images/crescent_gap/img_08_425008500_00873.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00771.jpg"
            string_val: "../images/images/punching_hole/img_03_425502600_00017.jpg"
            string_val: "../images/images/crescent_gap/img_01_425007500_01452.jpg"
            string_val: "../images/images/crescent_gap/img_08_425608200_00006.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00267.jpg"
            string_val: "../images/images/waist_folding/img_07_436164700_01538.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00273.jpg"
            string_val: "../images/images/silk_spot/img_02_3436786500_00143.jpg"
            string_val: "../images/images/crescent_gap/img_03_SIS001561_01569.jpg"
            string_val: "../images/images/water_spot/img_01_425006600_00499.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00467.jpg"
            string_val: "../images/images/oil_spot/img_04_436163100_00008.jpg"
            string_val: "../images/images/silk_spot/img_02_425243200_00536.jpg"
            string_val: "../images/images/crescent_gap/img_01_425503100_00018.jpg"
            string_val: "../images/images/punching_hole/img_03_3403397500_01395.jpg"
            string_val: "../images/images/oil_spot/img_02_425613800_00218.jpg"
            string_val: "../images/images/waist_folding/img_06_3436814000_00688.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00045.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00313.jpg"
            string_val: "../images/images/punching_hole/img_03_425503400_00017.jpg"
            string_val: "../images/images/inclusion/img_08_425508300_00656.jpg"
            string_val: "../images/images/punching_hole/img_06_3403399600_00739.jpg"
            string_val: "../images/images/oil_spot/img_07_435974600_00223.jpg"
            string_val: "../images/images/water_spot/img_01_425007600_00126.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00179.jpg"
            string_val: "../images/images/inclusion/img_02_3436816100_00153.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00039.jpg"
            string_val: "../images/images/oil_spot/img_02_425507000_00913.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00704.jpg"
            string_val: "../images/images/silk_spot/img_02_4406562900_00755.jpg"
            string_val: "../images/images/water_spot/img_01_425241600_00041.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00335.jpg"
            string_val: "../images/images/welding_line/img_06_425505500_00052.jpg"
            string_val: "../images/images/crescent_gap/img_08_425638500_00713.jpg"
            string_val: "../images/images/waist_folding/img_06_436164700_01556.jpg"
            string_val: "../images/images/oil_spot/img_08_425508100_01398.jpg"
            string_val: "../images/images/silk_spot/img_06_425243200_00116.jpg"
            string_val: "../images/images/silk_spot/img_04_SIS001577_00046.jpg"
            string_val: "../images/images/water_spot/img_01_425244100_00682.jpg"
            string_val: "../images/images/oil_spot/img_01_433354400_00040.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00659.jpg"
            string_val: "../images/images/welding_line/img_07_3403334800_00898.jpg"
            string_val: "../images/images/silk_spot/img_03_436152900_00543.jpg"
            string_val: "../images/images/silk_spot/img_04_4406743300_00004.jpg"
            string_val: "../images/images/water_spot/img_02_436183700_00098.jpg"
            string_val: "../images/images/welding_line/img_03_436185500_00005.jpg"
            string_val: "../images/images/welding_line/img_02_436164700_00001.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00156.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00555.jpg"
            string_val: "../images/images/crescent_gap/img_04_425501800_00018.jpg"
            string_val: "../images/images/waist_folding/img_07_3437006500_00761.jpg"
            string_val: "../images/images/water_spot/img_02_4406772100_00305.jpg"
            string_val: "../images/images/silk_spot/img_03_436152900_00535.jpg"
            string_val: "../images/images/waist_folding/img_07_424826800_00493.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00056.jpg"
            string_val: "../images/images/welding_line/img_03_3402616100_00002.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00692.jpg"
            string_val: "../images/images/water_spot/img_03_424992300_00514.jpg"
            string_val: "../images/images/crescent_gap/img_05_425502600_00052.jpg"
            string_val: "../images/images/water_spot/img_02_4406772100_00404.jpg"
            string_val: "../images/images/inclusion/img_06_4405000800_01031.jpg"
            string_val: "../images/images/silk_spot/img_03_4406645900_00009.jpg"
            string_val: "../images/images/welding_line/img_06_SIS002344_00834.jpg"
            string_val: "../images/images/welding_line/img_07_425613800_00786.jpg"
            string_val: "../images/images/punching_hole/img_03_4406424600_00002.jpg"
            string_val: "../images/images/inclusion/img_03_425503100_00068.jpg"
            string_val: "../images/images/inclusion/img_03_3402617500_00138.jpg"
            string_val: "../images/images/water_spot/img_02_4406446700_00001.jpg"
            string_val: "../images/images/crescent_gap/img_01_425503400_00018.jpg"
            string_val: "../images/images/rolled_pit/img_02_4402116500_00005.jpg"
            string_val: "../images/images/water_spot/img_02_3436813700_00307.jpg"
            string_val: "../images/images/crescent_gap/img_01_424826100_00001.jpg"
            string_val: "../images/images/inclusion/img_03_425501800_01160.jpg"
            string_val: "../images/images/crease/img_02_4406783500_00004.jpg"
            string_val: "../images/images/inclusion/img_08_425608200_00504.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00523.jpg"
            string_val: "../images/images/silk_spot/img_04_436068100_00089.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00691.jpg"
            string_val: "../images/images/crescent_gap/img_08_425503800_00053.jpg"
            string_val: "../images/images/inclusion/img_07_4406645900_00339.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00266.jpg"
            string_val: "../images/images/punching_hole/img_06_3403399900_01007.jpg"
            string_val: "../images/images/crescent_gap/img_04_425505000_00018.jpg"
            string_val: "../images/images/welding_line/img_02_436149500_00939.jpg"
            string_val: "../images/images/inclusion/img_08_425508100_01624.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00381.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00111.jpg"
            string_val: "../images/images/crescent_gap/img_04_425608200_00001.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00424.jpg"
            string_val: "../images/images/oil_spot/img_08_425391700_00095.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00042.jpg"
            string_val: "../images/images/crescent_gap/img_01_3402617700_00001.jpg"
            string_val: "../images/images/inclusion/img_08_425639900_00613.jpg"
            string_val: "../images/images/punching_hole/img_03_3403404300_01219.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00312.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00041.jpg"
            string_val: "../images/images/silk_spot/img_01_SIS001577_00020.jpg"
            string_val: "../images/images/water_spot/img_02_424799200_00450.jpg"
            string_val: "../images/images/punching_hole/img_06_425506100_00051.jpg"
            string_val: "../images/images/water_spot/img_03_424825900_00211.jpg"
            string_val: "../images/images/inclusion/img_02_4402623300_00026.jpg"
            string_val: "../images/images/inclusion/img_06_4402625300_00109.jpg"
            string_val: "../images/images/welding_line/img_02_436185000_00016.jpg"
            string_val: "../images/images/inclusion/img_06_4402625300_00104.jpg"
            string_val: "../images/images/water_spot/img_02_3436813700_00298.jpg"
            string_val: "../images/images/silk_spot/img_04_425005700_00169.jpg"
            string_val: "../images/images/silk_spot/img_02_4406645900_00894.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00343.jpg"
            string_val: "../images/images/punching_hole/img_03_436153600_01213.jpg"
            string_val: "../images/images/crease/img_07_4405965200_00151.jpg"
            string_val: "../images/images/inclusion/img_03_3402617400_00898.jpg"
            string_val: "../images/images/silk_spot/img_03_436184600_00793.jpg"
            string_val: "../images/images/crease/img_03_4405964400_00010.jpg"
            string_val: "../images/images/welding_line/img_07_436164700_01555.jpg"
            string_val: "../images/images/silk_spot/img_04_4406645900_00678.jpg"
            string_val: "../images/images/punching_hole/img_06_3403333900_00758.jpg"
            string_val: "../images/images/punching_hole/img_03_3403392000_01070.jpg"
            string_val: "../images/images/water_spot/img_01_425007600_00599.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00570.jpg"
            string_val: "../images/images/oil_spot/img_02_425507000_00931.jpg"
            string_val: "../images/images/waist_folding/img_07_3436814000_00006.jpg"
            string_val: "../images/images/inclusion/img_08_425506100_00400.jpg"
            string_val: "../images/images/oil_spot/img_03_4403465900_00023.jpg"
            string_val: "../images/images/welding_line/img_01_425506400_00018.jpg"
            string_val: "../images/images/water_spot/img_03_4403466500_00029.jpg"
            string_val: "../images/images/crescent_gap/img_05_425502600_00053.jpg"
            string_val: "../images/images/welding_line/img_04_425508100_00018.jpg"
            string_val: "../images/images/inclusion/img_01_4406743300_00935.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00420.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00519.jpg"
            string_val: "../images/images/water_spot/img_01_425000300_00630.jpg"
            string_val: "../images/images/oil_spot/img_08_425507600_00361.jpg"
            string_val: "../images/images/oil_spot/img_08_425391700_00187.jpg"
            string_val: "../images/images/crescent_gap/img_01_425616200_00001.jpg"
            string_val: "../images/images/oil_spot/img_06_425502300_01399.jpg"
          }
        }
      }
    }
    node_def {
      name: "GatherV2_2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "GatherV2_2"
      op: "GatherV2"
      input: "GatherV2_2/params:output:0"
      input: "Cast:y:0"
      input: "GatherV2_2/axis:output:0"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "batch_dims"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "ReadFile"
      op: "ReadFile"
      input: "GatherV2:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "DecodeJpeg"
      op: "DecodeJpeg"
      input: "ReadFile:contents:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "acceptable_fraction"
        value {
          f: 1.0
        }
      }
      attr {
        key: "channels"
        value {
          i: 3
        }
      }
      attr {
        key: "dct_method"
        value {
          s: ""
        }
      }
      attr {
        key: "fancy_upscaling"
        value {
          b: true
        }
      }
      attr {
        key: "ratio"
        value {
          i: 1
        }
      }
      attr {
        key: "try_recover_truncated"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Cast_2"
      op: "Cast"
      input: "DecodeJpeg:image:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 255.0
          }
        }
      }
    }
    node_def {
      name: "truediv"
      op: "RealDiv"
      input: "Cast_2:y:0"
      input: "Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "sub/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "sub"
      op: "Sub"
      input: "truediv:z:0"
      input: "sub/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "resize/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "resize/ExpandDims"
      op: "ExpandDims"
      input: "sub:z:0"
      input: "resize/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "resize/size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\200\001\000\000\200\002\000\000"
          }
        }
      }
    }
    node_def {
      name: "resize/ResizeBilinear"
      op: "ResizeBilinear"
      input: "resize/ExpandDims:output:0"
      input: "resize/size:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "align_corners"
        value {
          b: false
        }
      }
      attr {
        key: "half_pixel_centers"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "resize/Squeeze"
      op: "Squeeze"
      input: "resize/ResizeBilinear:resized_images:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "ReadFile_1"
      op: "ReadFile"
      input: "GatherV2_1:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "DecodeJpeg_1"
      op: "DecodeJpeg"
      input: "ReadFile_1:contents:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "acceptable_fraction"
        value {
          f: 1.0
        }
      }
      attr {
        key: "channels"
        value {
          i: 3
        }
      }
      attr {
        key: "dct_method"
        value {
          s: ""
        }
      }
      attr {
        key: "fancy_upscaling"
        value {
          b: true
        }
      }
      attr {
        key: "ratio"
        value {
          i: 1
        }
      }
      attr {
        key: "try_recover_truncated"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Cast_3"
      op: "Cast"
      input: "DecodeJpeg_1:image:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 255.0
          }
        }
      }
    }
    node_def {
      name: "truediv_1"
      op: "RealDiv"
      input: "Cast_3:y:0"
      input: "Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "sub_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "sub_1"
      op: "Sub"
      input: "truediv_1:z:0"
      input: "sub_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "resize_1/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "resize_1/ExpandDims"
      op: "ExpandDims"
      input: "sub_1:z:0"
      input: "resize_1/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "resize_1/size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\200\001\000\000\200\002\000\000"
          }
        }
      }
    }
    node_def {
      name: "resize_1/ResizeBilinear"
      op: "ResizeBilinear"
      input: "resize_1/ExpandDims:output:0"
      input: "resize_1/size:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "align_corners"
        value {
          b: false
        }
      }
      attr {
        key: "half_pixel_centers"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "resize_1/Squeeze"
      op: "Squeeze"
      input: "resize_1/ResizeBilinear:resized_images:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "ReadFile_2"
      op: "ReadFile"
      input: "GatherV2_2:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "DecodeJpeg_2"
      op: "DecodeJpeg"
      input: "ReadFile_2:contents:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "acceptable_fraction"
        value {
          f: 1.0
        }
      }
      attr {
        key: "channels"
        value {
          i: 1
        }
      }
      attr {
        key: "dct_method"
        value {
          s: ""
        }
      }
      attr {
        key: "fancy_upscaling"
        value {
          b: true
        }
      }
      attr {
        key: "ratio"
        value {
          i: 1
        }
      }
      attr {
        key: "try_recover_truncated"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Cast_4"
      op: "Cast"
      input: "DecodeJpeg_2:image:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 255.0
          }
        }
      }
    }
    node_def {
      name: "truediv_2"
      op: "RealDiv"
      input: "Cast_4:y:0"
      input: "Const_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "resize_2/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "resize_2/ExpandDims"
      op: "ExpandDims"
      input: "truediv_2:z:0"
      input: "resize_2/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "resize_2/size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\200\001\000\000\200\002\000\000"
          }
        }
      }
    }
    node_def {
      name: "resize_2/ResizeNearestNeighbor"
      op: "ResizeNearestNeighbor"
      input: "resize_2/ExpandDims:output:0"
      input: "resize_2/size:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "align_corners"
        value {
          b: false
        }
      }
      attr {
        key: "half_pixel_centers"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "resize_2/Squeeze"
      op: "Squeeze"
      input: "resize_2/ResizeNearestNeighbor:resized_images:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "central_crop/control_dependency"
      op: "Identity"
      input: "resize/Squeeze:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@resize/Squeeze"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "central_crop/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\023\000\000\000 \000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "central_crop/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "Z\001\000\000@\002\000\000\377\377\377\377"
          }
        }
      }
    }
    node_def {
      name: "central_crop/Slice"
      op: "Slice"
      input: "resize/Squeeze:output:0"
      input: "central_crop/stack:output:0"
      input: "central_crop/stack_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 346
              }
              dim {
                size: 576
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "resize_3/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "resize_3/ExpandDims"
      op: "ExpandDims"
      input: "central_crop/Slice:output:0"
      input: "resize_3/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 346
              }
              dim {
                size: 576
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "resize_3/size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\200\001\000\000\200\002\000\000"
          }
        }
      }
    }
    node_def {
      name: "resize_3/ResizeBilinear"
      op: "ResizeBilinear"
      input: "resize_3/ExpandDims:output:0"
      input: "resize_3/size:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "align_corners"
        value {
          b: false
        }
      }
      attr {
        key: "half_pixel_centers"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "resize_3/Squeeze"
      op: "Squeeze"
      input: "resize_3/ResizeBilinear:resized_images:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "central_crop_1/control_dependency"
      op: "Identity"
      input: "resize_1/Squeeze:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@resize_1/Squeeze"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "central_crop_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\023\000\000\000 \000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "central_crop_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "Z\001\000\000@\002\000\000\377\377\377\377"
          }
        }
      }
    }
    node_def {
      name: "central_crop_1/Slice"
      op: "Slice"
      input: "resize_1/Squeeze:output:0"
      input: "central_crop_1/stack:output:0"
      input: "central_crop_1/stack_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 346
              }
              dim {
                size: 576
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "resize_4/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "resize_4/ExpandDims"
      op: "ExpandDims"
      input: "central_crop_1/Slice:output:0"
      input: "resize_4/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 346
              }
              dim {
                size: 576
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "resize_4/size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\200\001\000\000\200\002\000\000"
          }
        }
      }
    }
    node_def {
      name: "resize_4/ResizeBilinear"
      op: "ResizeBilinear"
      input: "resize_4/ExpandDims:output:0"
      input: "resize_4/size:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "align_corners"
        value {
          b: false
        }
      }
      attr {
        key: "half_pixel_centers"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "resize_4/Squeeze"
      op: "Squeeze"
      input: "resize_4/ResizeBilinear:resized_images:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "central_crop_2/control_dependency"
      op: "Identity"
      input: "resize_2/Squeeze:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@resize_2/Squeeze"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "central_crop_2/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\023\000\000\000 \000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "central_crop_2/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "Z\001\000\000@\002\000\000\377\377\377\377"
          }
        }
      }
    }
    node_def {
      name: "central_crop_2/Slice"
      op: "Slice"
      input: "resize_2/Squeeze:output:0"
      input: "central_crop_2/stack:output:0"
      input: "central_crop_2/stack_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 346
              }
              dim {
                size: 576
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "resize_5/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "resize_5/ExpandDims"
      op: "ExpandDims"
      input: "central_crop_2/Slice:output:0"
      input: "resize_5/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 346
              }
              dim {
                size: 576
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "resize_5/size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\200\001\000\000\200\002\000\000"
          }
        }
      }
    }
    node_def {
      name: "resize_5/ResizeBilinear"
      op: "ResizeBilinear"
      input: "resize_5/ExpandDims:output:0"
      input: "resize_5/size:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "align_corners"
        value {
          b: false
        }
      }
      attr {
        key: "half_pixel_centers"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "resize_5/Squeeze"
      op: "Squeeze"
      input: "resize_5/ResizeBilinear:resized_images:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "resize_3/Squeeze:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "resize_4/Squeeze:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_2"
      op: "Identity"
      input: "resize_5/Squeeze:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_3"
      op: "Identity"
      input: "GatherV2:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    ret {
      key: "identity_2"
      value: "Identity_2:output:0"
    }
    ret {
      key: "identity_3"
      value: "Identity_3:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 2
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "cond_false_82"
      input_arg {
        name: "strided_slice_resize_squeeze"
        type: DT_FLOAT
      }
      input_arg {
        name: "strided_slice_2_resize_1_squeeze"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\377\377\377\377\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "strided_slice_resize_squeeze"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 7
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 7
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "strided_slice:output:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 7
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 7
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\377\377\377\377\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "strided_slice_2_resize_1_squeeze"
      input: "strided_slice_2/stack:output:0"
      input: "strided_slice_2/stack_1:output:0"
      input: "strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 7
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 7
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\377\377\377\377\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3"
      op: "StridedSlice"
      input: "strided_slice_2:output:0"
      input: "strided_slice_3/stack:output:0"
      input: "strided_slice_3/stack_1:output:0"
      input: "strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 7
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 7
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "strided_slice_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 384
            }
            dim {
              size: 640
            }
            dim {
              size: 3
            }
          }
          shape {
            dim {
              size: 384
            }
            dim {
              size: 640
            }
            dim {
              size: 3
            }
          }
        }
      }
    }
    arg_attr {
      value {
      }
    }
    arg_attr {
      key: 1
      value {
      }
    }
  }
  function {
    signature {
      name: "cond_false_73"
      input_arg {
        name: "cond_resize_squeeze"
        type: DT_FLOAT
      }
      input_arg {
        name: "cond_resize_1_squeeze"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "cond"
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node_def {
      name: "random_uniform/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "random_uniform/min"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "random_uniform"
      op: "RandomUniformInt"
      input: "random_uniform/shape:output:0"
      input: "random_uniform/min:output:0"
      input: "Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tout"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "seed"
        value {
          i: 8964
        }
      }
      attr {
        key: "seed2"
        value {
          i: 3
        }
      }
    }
    node_def {
      name: "Equal/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "Equal"
      op: "Equal"
      input: "random_uniform:output:0"
      input: "Equal/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "cond"
      op: "If"
      input: "Equal:z:0"
      input: "cond_resize_squeeze"
      input: "cond_resize_1_squeeze"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "cond_false_125"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "cond_true_124"
          }
        }
      }
    }
    node_def {
      name: "cond/Identity"
      op: "Identity"
      input: "cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "cond/Identity_1"
      op: "Identity"
      input: "cond:output:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "cond/Identity:output:0"
      input: "^cond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "cond/Identity_1:output:0"
      input: "^cond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 384
            }
            dim {
              size: 640
            }
            dim {
              size: 3
            }
          }
          shape {
            dim {
              size: 384
            }
            dim {
              size: 640
            }
            dim {
              size: 3
            }
          }
        }
      }
    }
    control_ret {
      key: "cond"
      value: "cond"
    }
    arg_attr {
      value {
      }
    }
    arg_attr {
      key: 1
      value {
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_map_Davis2016Reader.dataset_map_216"
      input_arg {
        name: "args_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
      is_stateful: true
      control_output: "random_crop/Assert/Assert"
      control_output: "cond"
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "args_0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "args_0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "random_uniform/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "random_uniform/min"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "random_uniform/max"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node_def {
      name: "random_uniform"
      op: "RandomUniformInt"
      input: "random_uniform/shape:output:0"
      input: "random_uniform/min:output:0"
      input: "random_uniform/max:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tout"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "seed"
        value {
          i: 8964
        }
      }
      attr {
        key: "seed2"
        value {
          i: 12
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "random_uniform:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "mul"
      op: "Mul"
      input: "Cast:y:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "add"
      op: "Add"
      input: "mul:z:0"
      input: "strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Cast_1"
      op: "Cast"
      input: "strided_slice:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Cast_2"
      op: "Cast"
      input: "add:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "GatherV2/params"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 462
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 462
              }
            }
            string_val: "../images/images/silk_spot/img_04_4406743300_00595.jpg"
            string_val: "../images/images/punching_hole/img_06_424799300_01133.jpg"
            string_val: "../images/images/silk_spot/img_04_SIS001577_00040.jpg"
            string_val: "../images/images/oil_spot/img_04_436163100_00010.jpg"
            string_val: "../images/images/crescent_gap/img_04_425502300_00018.jpg"
            string_val: "../images/images/welding_line/img_08_425382400_00001.jpg"
            string_val: "../images/images/water_spot/img_01_4403565100_00012.jpg"
            string_val: "../images/images/water_spot/img_01_425006200_00175.jpg"
            string_val: "../images/images/inclusion/img_06_425237000_00664.jpg"
            string_val: "../images/images/inclusion/img_02_425503000_00020.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00436.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00223.jpg"
            string_val: "../images/images/welding_line/img_03_425613500_00597.jpg"
            string_val: "../images/images/welding_line/img_04_4402787600_00001.jpg"
            string_val: "../images/images/oil_spot/img_07_4405168700_00711.jpg"
            string_val: "../images/images/crescent_gap/img_05_425640000_00634.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00547.jpg"
            string_val: "../images/images/water_spot/img_08_4403744200_01175.jpg"
            string_val: "../images/images/oil_spot/img_07_3437011100_00683.jpg"
            string_val: "../images/images/waist_folding/img_06_424826800_00500.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00145.jpg"
            string_val: "../images/images/crescent_gap/img_08_424826300_00950.jpg"
            string_val: "../images/images/waist_folding/img_06_3436814000_00679.jpg"
            string_val: "../images/images/punching_hole/img_03_425616500_00769.jpg"
            string_val: "../images/images/punching_hole/img_03_425501700_00018.jpg"
            string_val: "../images/images/crescent_gap/img_08_424799600_00001.jpg"
            string_val: "../images/images/inclusion/img_02_425503800_00019.jpg"
            string_val: "../images/images/silk_spot/img_01_SIS001522_00045.jpg"
            string_val: "../images/images/silk_spot/img_05_4406645900_00038.jpg"
            string_val: "../images/images/silk_spot/img_03_436152900_00585.jpg"
            string_val: "../images/images/welding_line/img_02_425614400_00001.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00065.jpg"
            string_val: "../images/images/water_spot/img_02_425237600_00302.jpg"
            string_val: "../images/images/welding_line/img_07_425390100_00053.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00317.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00503.jpg"
            string_val: "../images/images/silk_spot/img_06_4406645900_00475.jpg"
            string_val: "../images/images/silk_spot/img_03_425505400_01033.jpg"
            string_val: "../images/images/punching_hole/img_06_3403399100_01155.jpg"
            string_val: "../images/images/crease/img_02_425613700_00758.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00246.jpg"
            string_val: "../images/images/water_spot/img_01_425000300_00103.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00481.jpg"
            string_val: "../images/images/punching_hole/img_03_425613500_00001.jpg"
            string_val: "../images/images/silk_spot/img_04_4406645900_00824.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00774.jpg"
            string_val: "../images/images/crescent_gap/img_01_425505100_00017.jpg"
            string_val: "../images/images/inclusion/img_03_425501800_01148.jpg"
            string_val: "../images/images/waist_folding/img_07_4405376800_00038.jpg"
            string_val: "../images/images/water_spot/img_02_4403466900_00011.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00664.jpg"
            string_val: "../images/images/crescent_gap/img_05_425503600_00053.jpg"
            string_val: "../images/images/water_spot/img_02_3436813700_00798.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00730.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00539.jpg"
            string_val: "../images/images/welding_line/img_01_425382400_00001.jpg"
            string_val: "../images/images/silk_spot/img_06_4406645900_00490.jpg"
            string_val: "../images/images/inclusion/img_03_4401440300_00347.jpg"
            string_val: "../images/images/inclusion/img_07_425008500_00314.jpg"
            string_val: "../images/images/crescent_gap/img_04_425003700_00002.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00801.jpg"
            string_val: "../images/images/punching_hole/img_06_3403402100_00857.jpg"
            string_val: "../images/images/oil_spot/img_07_3437011100_00684.jpg"
            string_val: "../images/images/waist_folding/img_06_4402830700_01162.jpg"
            string_val: "../images/images/silk_spot/img_03_425508400_00380.jpg"
            string_val: "../images/images/water_spot/img_02_4403466100_00013.jpg"
            string_val: "../images/images/oil_spot/img_03_3402617700_00456.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00558.jpg"
            string_val: "../images/images/crease/img_04_4402117000_00004.jpg"
            string_val: "../images/images/water_spot/img_07_425508300_00927.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00669.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00054.jpg"
            string_val: "../images/images/silk_spot/img_03_436150300_00328.jpg"
            string_val: "../images/images/punching_hole/img_03_425637500_00653.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00809.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00285.jpg"
            string_val: "../images/images/crescent_gap/img_04_425501700_00018.jpg"
            string_val: "../images/images/silk_spot/img_05_4406645900_00040.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00614.jpg"
            string_val: "../images/images/water_spot/img_01_425008000_00002.jpg"
            string_val: "../images/images/silk_spot/img_03_SIS001577_00019.jpg"
            string_val: "../images/images/oil_spot/img_03_3402617400_00941.jpg"
            string_val: "../images/images/silk_spot/img_03_436184600_00799.jpg"
            string_val: "../images/images/punching_hole/img_06_425639800_00873.jpg"
            string_val: "../images/images/silk_spot/img_04_4406645900_00543.jpg"
            string_val: "../images/images/inclusion/img_06_425237000_00660.jpg"
            string_val: "../images/images/punching_hole/img_06_425616500_00769.jpg"
            string_val: "../images/images/inclusion/img_02_425392000_00996.jpg"
            string_val: "../images/images/crescent_gap/img_07_4406645900_00002.jpg"
            string_val: "../images/images/welding_line/img_04_425382400_00001.jpg"
            string_val: "../images/images/silk_spot/img_03_436184600_00797.jpg"
            string_val: "../images/images/oil_spot/img_06_425502300_01409.jpg"
            string_val: "../images/images/silk_spot/img_01_SIS001577_00049.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00194.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00716.jpg"
            string_val: "../images/images/punching_hole/img_03_3403331900_01545.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00810.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00531.jpg"
            string_val: "../images/images/water_spot/img_02_3436813700_00270.jpg"
            string_val: "../images/images/silk_spot/img_06_4406743300_00033.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00411.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00786.jpg"
            string_val: "../images/images/silk_spot/img_03_436184600_00779.jpg"
            string_val: "../images/images/punching_hole/img_03_3403403300_00700.jpg"
            string_val: "../images/images/punching_hole/img_06_425644300_00598.jpg"
            string_val: "../images/images/silk_spot/img_04_4406645900_00808.jpg"
            string_val: "../images/images/crescent_gap/img_01_425503000_00017.jpg"
            string_val: "../images/images/silk_spot/img_02_4404580600_00661.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00080.jpg"
            string_val: "../images/images/welding_line/img_07_425613700_00782.jpg"
            string_val: "../images/images/water_spot/img_03_424826800_00420.jpg"
            string_val: "../images/images/oil_spot/img_03_3437006100_00013.jpg"
            string_val: "../images/images/welding_line/img_07_3402617400_01102.jpg"
            string_val: "../images/images/water_spot/img_02_4404580000_00041.jpg"
            string_val: "../images/images/crescent_gap/img_01_425006200_01173.jpg"
            string_val: "../images/images/crescent_gap/img_08_425503400_00053.jpg"
            string_val: "../images/images/inclusion/img_04_4402622500_00364.jpg"
            string_val: "../images/images/water_spot/img_04_425237600_00360.jpg"
            string_val: "../images/images/inclusion/img_06_425237000_00661.jpg"
            string_val: "../images/images/inclusion/img_03_3402617100_00120.jpg"
            string_val: "../images/images/punching_hole/img_03_425507200_00018.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00855.jpg"
            string_val: "../images/images/welding_line/img_02_425507000_00018.jpg"
            string_val: "../images/images/silk_spot/img_02_425243400_00057.jpg"
            string_val: "../images/images/silk_spot/img_01_3436815300_00473.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00056.jpg"
            string_val: "../images/images/oil_spot/img_07_435974600_00213.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00476.jpg"
            string_val: "../images/images/waist_folding/img_06_436185800_00735.jpg"
            string_val: "../images/images/oil_spot/img_03_425507000_00925.jpg"
            string_val: "../images/images/punching_hole/img_03_425614700_00712.jpg"
            string_val: "../images/images/inclusion/img_02_425613800_00034.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00434.jpg"
            string_val: "../images/images/water_spot/img_02_4403465900_00043.jpg"
            string_val: "../images/images/oil_spot/img_02_425507200_01515.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00817.jpg"
            string_val: "../images/images/punching_hole/img_03_424826300_00949.jpg"
            string_val: "../images/images/waist_folding/img_03_4404374100_01295.jpg"
            string_val: "../images/images/inclusion/img_02_425502300_00338.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00211.jpg"
            string_val: "../images/images/water_spot/img_01_424995500_00255.jpg"
            string_val: "../images/images/silk_spot/img_01_4406743300_00804.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00339.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00053.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00441.jpg"
            string_val: "../images/images/water_spot/img_03_424798500_00466.jpg"
            string_val: "../images/images/oil_spot/img_08_425391700_00188.jpg"
            string_val: "../images/images/silk_spot/img_07_424714400_00011.jpg"
            string_val: "../images/images/waist_folding/img_07_436164700_01536.jpg"
            string_val: "../images/images/punching_hole/img_03_425638500_00716.jpg"
            string_val: "../images/images/punching_hole/img_03_4406562900_00002.jpg"
            string_val: "../images/images/water_spot/img_01_425007600_00674.jpg"
            string_val: "../images/images/punching_hole/img_03_3403400200_00567.jpg"
            string_val: "../images/images/water_spot/img_01_4403565100_00007.jpg"
            string_val: "../images/images/welding_line/img_06_3403337800_00766.jpg"
            string_val: "../images/images/inclusion/img_04_425503200_00019.jpg"
            string_val: "../images/images/punching_hole/img_06_425503800_00052.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00159.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00046.jpg"
            string_val: "../images/images/waist_folding/img_07_424826800_00492.jpg"
            string_val: "../images/images/oil_spot/img_01_435974400_00005.jpg"
            string_val: "../images/images/oil_spot/img_06_425503400_00049.jpg"
            string_val: "../images/images/crescent_gap/img_08_425502700_00052.jpg"
            string_val: "../images/images/waist_folding/img_07_3436814000_00684.jpg"
            string_val: "../images/images/punching_hole/img_03_3403399500_00888.jpg"
            string_val: "../images/images/silk_spot/img_02_SIS001522_00031.jpg"
            string_val: "../images/images/inclusion/img_06_425507200_00976.jpg"
            string_val: "../images/images/water_spot/img_05_4402766800_00515.jpg"
            string_val: "../images/images/inclusion/img_03_3402617700_00653.jpg"
            string_val: "../images/images/crescent_gap/img_05_425502200_00054.jpg"
            string_val: "../images/images/water_spot/img_04_424826100_00528.jpg"
            string_val: "../images/images/rolled_pit/img_02_4402117200_00004.jpg"
            string_val: "../images/images/welding_line/img_02_425616500_00770.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00771.jpg"
            string_val: "../images/images/silk_spot/img_05_4406645900_00585.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00819.jpg"
            string_val: "../images/images/welding_line/img_07_425637500_00653.jpg"
            string_val: "../images/images/silk_spot/img_04_425243100_00677.jpg"
            string_val: "../images/images/crescent_gap/img_08_425006600_00930.jpg"
            string_val: "../images/images/inclusion/img_05_425502300_00026.jpg"
            string_val: "../images/images/water_spot/img_01_425241500_00995.jpg"
            string_val: "../images/images/silk_spot/img_06_4406743300_00036.jpg"
            string_val: "../images/images/silk_spot/img_03_436152900_00557.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00527.jpg"
            string_val: "../images/images/punching_hole/img_03_425504800_00018.jpg"
            string_val: "../images/images/welding_line/img_02_4402852500_01045.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00391.jpg"
            string_val: "../images/images/crescent_gap/img_08_425505100_00052.jpg"
            string_val: "../images/images/waist_folding/img_07_436164700_01551.jpg"
            string_val: "../images/images/crease/img_02_4406783500_00010.jpg"
            string_val: "../images/images/silk_spot/img_03_436150300_00317.jpg"
            string_val: "../images/images/inclusion/img_07_425508700_00362.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00328.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00435.jpg"
            string_val: "../images/images/welding_line/img_01_4402818600_00001.jpg"
            string_val: "../images/images/punching_hole/img_03_425616200_00001.jpg"
            string_val: "../images/images/crescent_gap/img_08_425007500_01452.jpg"
            string_val: "../images/images/oil_spot/img_06_425502300_01406.jpg"
            string_val: "../images/images/punching_hole/img_06_425615200_00639.jpg"
            string_val: "../images/images/inclusion/img_02_3436816100_00148.jpg"
            string_val: "../images/images/crescent_gap/img_01_425006100_00947.jpg"
            string_val: "../images/images/oil_spot/img_02_424799200_00250.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00410.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00322.jpg"
            string_val: "../images/images/water_spot/img_01_425000300_00520.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00321.jpg"
            string_val: "../images/images/rolled_pit/img_07_427199900_00007.jpg"
            string_val: "../images/images/water_spot/img_01_425243600_00848.jpg"
            string_val: "../images/images/crescent_gap/img_01_425637900_00899.jpg"
            string_val: "../images/images/rolled_pit/img_03_3437006900_00002.jpg"
            string_val: "../images/images/punching_hole/img_03_425644200_00680.jpg"
            string_val: "../images/images/water_spot/img_02_4403466100_00011.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00661.jpg"
            string_val: "../images/images/oil_spot/img_03_3437006500_00033.jpg"
            string_val: "../images/images/waist_folding/img_07_4402719200_00026.jpg"
            string_val: "../images/images/crescent_gap/img_01_425007500_01453.jpg"
            string_val: "../images/images/crescent_gap/img_05_425608200_00814.jpg"
            string_val: "../images/images/crescent_gap/img_05_425504800_00052.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00661.jpg"
            string_val: "../images/images/crescent_gap/img_08_4406772100_00002.jpg"
            string_val: "../images/images/water_spot/img_02_4406772100_00673.jpg"
            string_val: "../images/images/oil_spot/img_07_3437011100_00685.jpg"
            string_val: "../images/images/silk_spot/img_06_4406645900_00451.jpg"
            string_val: "../images/images/oil_spot/img_02_425507200_01514.jpg"
            string_val: "../images/images/punching_hole/img_06_425644200_00680.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00772.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00693.jpg"
            string_val: "../images/images/welding_line/img_07_3403335700_01048.jpg"
            string_val: "../images/images/punching_hole/img_03_424992300_00001.jpg"
            string_val: "../images/images/crescent_gap/img_01_425503100_00017.jpg"
            string_val: "../images/images/punching_hole/img_02_425640000_00634.jpg"
            string_val: "../images/images/oil_spot/img_04_436163100_00039.jpg"
            string_val: "../images/images/welding_line/img_07_3403403900_00809.jpg"
            string_val: "../images/images/punching_hole/img_06_425508700_00053.jpg"
            string_val: "../images/images/crescent_gap/img_01_436067700_00689.jpg"
            string_val: "../images/images/waist_folding/img_06_3436814000_00007.jpg"
            string_val: "../images/images/welding_line/img_04_425380900_00001.jpg"
            string_val: "../images/images/waist_folding/img_07_4404374100_01349.jpg"
            string_val: "../images/images/welding_line/img_07_4404710300_00877.jpg"
            string_val: "../images/images/crescent_gap/img_06_425390700_00051.jpg"
            string_val: "../images/images/waist_folding/img_07_4405133600_00039.jpg"
            string_val: "../images/images/punching_hole/img_06_425506800_00054.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00793.jpg"
            string_val: "../images/images/silk_spot/img_06_3436814300_00056.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00660.jpg"
            string_val: "../images/images/punching_hole/img_03_425609500_00001.jpg"
            string_val: "../images/images/waist_folding/img_06_425614600_00414.jpg"
            string_val: "../images/images/inclusion/img_02_425501100_00688.jpg"
            string_val: "../images/images/rolled_pit/img_02_427146700_00002.jpg"
            string_val: "../images/images/crescent_gap/img_08_425391800_00054.jpg"
            string_val: "../images/images/crescent_gap/img_04_424799600_00001.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00197.jpg"
            string_val: "../images/images/silk_spot/img_04_SIS001577_00045.jpg"
            string_val: "../images/images/inclusion/img_03_3402617100_00119.jpg"
            string_val: "../images/images/waist_folding/img_07_3436814000_00010.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00425.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00458.jpg"
            string_val: "../images/images/crescent_gap/img_01_425006400_00001.jpg"
            string_val: "../images/images/waist_folding/img_06_424826800_00502.jpg"
            string_val: "../images/images/welding_line/img_03_425501100_00018.jpg"
            string_val: "../images/images/water_spot/img_01_425241600_00283.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00092.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00433.jpg"
            string_val: "../images/images/welding_line/img_07_4404893900_00568.jpg"
            string_val: "../images/images/crease/img_07_425004200_00982.jpg"
            string_val: "../images/images/welding_line/img_01_425638500_00001.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00191.jpg"
            string_val: "../images/images/water_spot/img_02_3436813700_00788.jpg"
            string_val: "../images/images/silk_spot/img_01_425243200_00439.jpg"
            string_val: "../images/images/crease/img_08_427199900_01134.jpg"
            string_val: "../images/images/welding_line/img_01_425507000_00018.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00420.jpg"
            string_val: "../images/images/inclusion/img_02_3402617100_00366.jpg"
            string_val: "../images/images/silk_spot/img_02_SIS001533_00311.jpg"
            string_val: "../images/images/oil_spot/img_06_425502300_01408.jpg"
            string_val: "../images/images/welding_line/img_03_436068600_00001.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00546.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00655.jpg"
            string_val: "../images/images/crescent_gap/img_04_424799200_00001.jpg"
            string_val: "../images/images/inclusion/img_05_425504900_00057.jpg"
            string_val: "../images/images/punching_hole/img_02_425644200_00681.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00183.jpg"
            string_val: "../images/images/punching_hole/img_02_425613600_00582.jpg"
            string_val: "../images/images/welding_line/img_03_425506300_00018.jpg"
            string_val: "../images/images/crease/img_05_4405381400_00774.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00913.jpg"
            string_val: "../images/images/oil_spot/img_04_436163100_00021.jpg"
            string_val: "../images/images/crescent_gap/img_04_424825700_00001.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00688.jpg"
            string_val: "../images/images/punching_hole/img_03_425613700_00782.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00277.jpg"
            string_val: "../images/images/crescent_gap/img_01_425008500_00874.jpg"
            string_val: "../images/images/waist_folding/img_06_3436814000_00683.jpg"
            string_val: "../images/images/water_spot/img_02_424799300_00146.jpg"
            string_val: "../images/images/waist_folding/img_06_436164700_01537.jpg"
            string_val: "../images/images/welding_line/img_03_436184600_00002.jpg"
            string_val: "../images/images/oil_spot/img_01_425614600_00428.jpg"
            string_val: "../images/images/welding_line/img_06_4403068400_01288.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00063.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00074.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00576.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00518.jpg"
            string_val: "../images/images/water_spot/img_03_424992300_00520.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00320.jpg"
            string_val: "../images/images/inclusion/img_06_425392500_00834.jpg"
            string_val: "../images/images/silk_spot/img_04_SIS001577_00052.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00325.jpg"
            string_val: "../images/images/crescent_gap/img_01_425609500_00001.jpg"
            string_val: "../images/images/inclusion/img_03_425501800_01220.jpg"
            string_val: "../images/images/silk_spot/img_02_SIS001564_01335.jpg"
            string_val: "../images/images/inclusion/img_07_425504800_00992.jpg"
            string_val: "../images/images/oil_spot/img_06_425502300_01397.jpg"
            string_val: "../images/images/punching_hole/img_06_425614700_00694.jpg"
            string_val: "../images/images/silk_spot/img_03_436150300_00330.jpg"
            string_val: "../images/images/crease/img_03_SIS001559_00006.jpg"
            string_val: "../images/images/water_spot/img_02_4403466700_00014.jpg"
            string_val: "../images/images/inclusion/img_06_425237000_00834.jpg"
            string_val: "../images/images/crescent_gap/img_05_425613500_00596.jpg"
            string_val: "../images/images/silk_spot/img_06_4406645900_00492.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00463.jpg"
            string_val: "../images/images/rolled_pit/img_03_4402724500_01238.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00676.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00071.jpg"
            string_val: "../images/images/crescent_gap/img_04_425503000_00017.jpg"
            string_val: "../images/images/silk_spot/img_01_4406743300_00461.jpg"
            string_val: "../images/images/welding_line/img_05_4405356600_00896.jpg"
            string_val: "../images/images/crescent_gap/img_08_425008500_00873.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00771.jpg"
            string_val: "../images/images/punching_hole/img_03_425502600_00017.jpg"
            string_val: "../images/images/crescent_gap/img_01_425007500_01452.jpg"
            string_val: "../images/images/crescent_gap/img_08_425608200_00006.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00267.jpg"
            string_val: "../images/images/waist_folding/img_07_436164700_01538.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00273.jpg"
            string_val: "../images/images/silk_spot/img_02_3436786500_00143.jpg"
            string_val: "../images/images/crescent_gap/img_03_SIS001561_01569.jpg"
            string_val: "../images/images/water_spot/img_01_425006600_00499.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00467.jpg"
            string_val: "../images/images/oil_spot/img_04_436163100_00008.jpg"
            string_val: "../images/images/silk_spot/img_02_425243200_00536.jpg"
            string_val: "../images/images/crescent_gap/img_01_425503100_00018.jpg"
            string_val: "../images/images/punching_hole/img_03_3403397500_01395.jpg"
            string_val: "../images/images/oil_spot/img_02_425613800_00218.jpg"
            string_val: "../images/images/waist_folding/img_06_3436814000_00688.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00045.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00313.jpg"
            string_val: "../images/images/punching_hole/img_03_425503400_00017.jpg"
            string_val: "../images/images/inclusion/img_08_425508300_00656.jpg"
            string_val: "../images/images/punching_hole/img_06_3403399600_00739.jpg"
            string_val: "../images/images/oil_spot/img_07_435974600_00223.jpg"
            string_val: "../images/images/water_spot/img_01_425007600_00126.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00179.jpg"
            string_val: "../images/images/inclusion/img_02_3436816100_00153.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00039.jpg"
            string_val: "../images/images/oil_spot/img_02_425507000_00913.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00704.jpg"
            string_val: "../images/images/silk_spot/img_02_4406562900_00755.jpg"
            string_val: "../images/images/water_spot/img_01_425241600_00041.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00335.jpg"
            string_val: "../images/images/welding_line/img_06_425505500_00052.jpg"
            string_val: "../images/images/crescent_gap/img_08_425638500_00713.jpg"
            string_val: "../images/images/waist_folding/img_06_436164700_01556.jpg"
            string_val: "../images/images/oil_spot/img_08_425508100_01398.jpg"
            string_val: "../images/images/silk_spot/img_06_425243200_00116.jpg"
            string_val: "../images/images/silk_spot/img_04_SIS001577_00046.jpg"
            string_val: "../images/images/water_spot/img_01_425244100_00682.jpg"
            string_val: "../images/images/oil_spot/img_01_433354400_00040.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00659.jpg"
            string_val: "../images/images/welding_line/img_07_3403334800_00898.jpg"
            string_val: "../images/images/silk_spot/img_03_436152900_00543.jpg"
            string_val: "../images/images/silk_spot/img_04_4406743300_00004.jpg"
            string_val: "../images/images/water_spot/img_02_436183700_00098.jpg"
            string_val: "../images/images/welding_line/img_03_436185500_00005.jpg"
            string_val: "../images/images/welding_line/img_02_436164700_00001.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00156.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00555.jpg"
            string_val: "../images/images/crescent_gap/img_04_425501800_00018.jpg"
            string_val: "../images/images/waist_folding/img_07_3437006500_00761.jpg"
            string_val: "../images/images/water_spot/img_02_4406772100_00305.jpg"
            string_val: "../images/images/silk_spot/img_03_436152900_00535.jpg"
            string_val: "../images/images/waist_folding/img_07_424826800_00493.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00056.jpg"
            string_val: "../images/images/welding_line/img_03_3402616100_00002.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00692.jpg"
            string_val: "../images/images/water_spot/img_03_424992300_00514.jpg"
            string_val: "../images/images/crescent_gap/img_05_425502600_00052.jpg"
            string_val: "../images/images/water_spot/img_02_4406772100_00404.jpg"
            string_val: "../images/images/inclusion/img_06_4405000800_01031.jpg"
            string_val: "../images/images/silk_spot/img_03_4406645900_00009.jpg"
            string_val: "../images/images/welding_line/img_06_SIS002344_00834.jpg"
            string_val: "../images/images/welding_line/img_07_425613800_00786.jpg"
            string_val: "../images/images/punching_hole/img_03_4406424600_00002.jpg"
            string_val: "../images/images/inclusion/img_03_425503100_00068.jpg"
            string_val: "../images/images/inclusion/img_03_3402617500_00138.jpg"
            string_val: "../images/images/water_spot/img_02_4406446700_00001.jpg"
            string_val: "../images/images/crescent_gap/img_01_425503400_00018.jpg"
            string_val: "../images/images/rolled_pit/img_02_4402116500_00005.jpg"
            string_val: "../images/images/water_spot/img_02_3436813700_00307.jpg"
            string_val: "../images/images/crescent_gap/img_01_424826100_00001.jpg"
            string_val: "../images/images/inclusion/img_03_425501800_01160.jpg"
            string_val: "../images/images/crease/img_02_4406783500_00004.jpg"
            string_val: "../images/images/inclusion/img_08_425608200_00504.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00523.jpg"
            string_val: "../images/images/silk_spot/img_04_436068100_00089.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00691.jpg"
            string_val: "../images/images/crescent_gap/img_08_425503800_00053.jpg"
            string_val: "../images/images/inclusion/img_07_4406645900_00339.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00266.jpg"
            string_val: "../images/images/punching_hole/img_06_3403399900_01007.jpg"
            string_val: "../images/images/crescent_gap/img_04_425505000_00018.jpg"
            string_val: "../images/images/welding_line/img_02_436149500_00939.jpg"
            string_val: "../images/images/inclusion/img_08_425508100_01624.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00381.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00111.jpg"
            string_val: "../images/images/crescent_gap/img_04_425608200_00001.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00424.jpg"
            string_val: "../images/images/oil_spot/img_08_425391700_00095.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00042.jpg"
            string_val: "../images/images/crescent_gap/img_01_3402617700_00001.jpg"
            string_val: "../images/images/inclusion/img_08_425639900_00613.jpg"
            string_val: "../images/images/punching_hole/img_03_3403404300_01219.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00312.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00041.jpg"
            string_val: "../images/images/silk_spot/img_01_SIS001577_00020.jpg"
            string_val: "../images/images/water_spot/img_02_424799200_00450.jpg"
            string_val: "../images/images/punching_hole/img_06_425506100_00051.jpg"
            string_val: "../images/images/water_spot/img_03_424825900_00211.jpg"
            string_val: "../images/images/inclusion/img_02_4402623300_00026.jpg"
            string_val: "../images/images/inclusion/img_06_4402625300_00109.jpg"
            string_val: "../images/images/welding_line/img_02_436185000_00016.jpg"
            string_val: "../images/images/inclusion/img_06_4402625300_00104.jpg"
            string_val: "../images/images/water_spot/img_02_3436813700_00298.jpg"
            string_val: "../images/images/silk_spot/img_04_425005700_00169.jpg"
            string_val: "../images/images/silk_spot/img_02_4406645900_00894.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00343.jpg"
            string_val: "../images/images/punching_hole/img_03_436153600_01213.jpg"
            string_val: "../images/images/crease/img_07_4405965200_00151.jpg"
            string_val: "../images/images/inclusion/img_03_3402617400_00898.jpg"
            string_val: "../images/images/silk_spot/img_03_436184600_00793.jpg"
            string_val: "../images/images/crease/img_03_4405964400_00010.jpg"
            string_val: "../images/images/welding_line/img_07_436164700_01555.jpg"
            string_val: "../images/images/silk_spot/img_04_4406645900_00678.jpg"
            string_val: "../images/images/punching_hole/img_06_3403333900_00758.jpg"
            string_val: "../images/images/punching_hole/img_03_3403392000_01070.jpg"
            string_val: "../images/images/water_spot/img_01_425007600_00599.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00570.jpg"
            string_val: "../images/images/oil_spot/img_02_425507000_00931.jpg"
            string_val: "../images/images/waist_folding/img_07_3436814000_00006.jpg"
            string_val: "../images/images/inclusion/img_08_425506100_00400.jpg"
            string_val: "../images/images/oil_spot/img_03_4403465900_00023.jpg"
            string_val: "../images/images/welding_line/img_01_425506400_00018.jpg"
            string_val: "../images/images/water_spot/img_03_4403466500_00029.jpg"
            string_val: "../images/images/crescent_gap/img_05_425502600_00053.jpg"
            string_val: "../images/images/welding_line/img_04_425508100_00018.jpg"
            string_val: "../images/images/inclusion/img_01_4406743300_00935.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00420.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00519.jpg"
            string_val: "../images/images/water_spot/img_01_425000300_00630.jpg"
            string_val: "../images/images/oil_spot/img_08_425507600_00361.jpg"
            string_val: "../images/images/oil_spot/img_08_425391700_00187.jpg"
            string_val: "../images/images/crescent_gap/img_01_425616200_00001.jpg"
            string_val: "../images/images/oil_spot/img_06_425502300_01399.jpg"
          }
        }
      }
    }
    node_def {
      name: "GatherV2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "GatherV2"
      op: "GatherV2"
      input: "GatherV2/params:output:0"
      input: "Cast_1:y:0"
      input: "GatherV2/axis:output:0"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "batch_dims"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "GatherV2_1/params"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 462
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 462
              }
            }
            string_val: "../images/images/silk_spot/img_04_4406743300_00595.jpg"
            string_val: "../images/images/punching_hole/img_06_424799300_01133.jpg"
            string_val: "../images/images/silk_spot/img_04_SIS001577_00040.jpg"
            string_val: "../images/images/oil_spot/img_04_436163100_00010.jpg"
            string_val: "../images/images/crescent_gap/img_04_425502300_00018.jpg"
            string_val: "../images/images/welding_line/img_08_425382400_00001.jpg"
            string_val: "../images/images/water_spot/img_01_4403565100_00012.jpg"
            string_val: "../images/images/water_spot/img_01_425006200_00175.jpg"
            string_val: "../images/images/inclusion/img_06_425237000_00664.jpg"
            string_val: "../images/images/inclusion/img_02_425503000_00020.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00436.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00223.jpg"
            string_val: "../images/images/welding_line/img_03_425613500_00597.jpg"
            string_val: "../images/images/welding_line/img_04_4402787600_00001.jpg"
            string_val: "../images/images/oil_spot/img_07_4405168700_00711.jpg"
            string_val: "../images/images/crescent_gap/img_05_425640000_00634.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00547.jpg"
            string_val: "../images/images/water_spot/img_08_4403744200_01175.jpg"
            string_val: "../images/images/oil_spot/img_07_3437011100_00683.jpg"
            string_val: "../images/images/waist_folding/img_06_424826800_00500.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00145.jpg"
            string_val: "../images/images/crescent_gap/img_08_424826300_00950.jpg"
            string_val: "../images/images/waist_folding/img_06_3436814000_00679.jpg"
            string_val: "../images/images/punching_hole/img_03_425616500_00769.jpg"
            string_val: "../images/images/punching_hole/img_03_425501700_00018.jpg"
            string_val: "../images/images/crescent_gap/img_08_424799600_00001.jpg"
            string_val: "../images/images/inclusion/img_02_425503800_00019.jpg"
            string_val: "../images/images/silk_spot/img_01_SIS001522_00045.jpg"
            string_val: "../images/images/silk_spot/img_05_4406645900_00038.jpg"
            string_val: "../images/images/silk_spot/img_03_436152900_00585.jpg"
            string_val: "../images/images/welding_line/img_02_425614400_00001.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00065.jpg"
            string_val: "../images/images/water_spot/img_02_425237600_00302.jpg"
            string_val: "../images/images/welding_line/img_07_425390100_00053.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00317.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00503.jpg"
            string_val: "../images/images/silk_spot/img_06_4406645900_00475.jpg"
            string_val: "../images/images/silk_spot/img_03_425505400_01033.jpg"
            string_val: "../images/images/punching_hole/img_06_3403399100_01155.jpg"
            string_val: "../images/images/crease/img_02_425613700_00758.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00246.jpg"
            string_val: "../images/images/water_spot/img_01_425000300_00103.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00481.jpg"
            string_val: "../images/images/punching_hole/img_03_425613500_00001.jpg"
            string_val: "../images/images/silk_spot/img_04_4406645900_00824.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00774.jpg"
            string_val: "../images/images/crescent_gap/img_01_425505100_00017.jpg"
            string_val: "../images/images/inclusion/img_03_425501800_01148.jpg"
            string_val: "../images/images/waist_folding/img_07_4405376800_00038.jpg"
            string_val: "../images/images/water_spot/img_02_4403466900_00011.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00664.jpg"
            string_val: "../images/images/crescent_gap/img_05_425503600_00053.jpg"
            string_val: "../images/images/water_spot/img_02_3436813700_00798.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00730.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00539.jpg"
            string_val: "../images/images/welding_line/img_01_425382400_00001.jpg"
            string_val: "../images/images/silk_spot/img_06_4406645900_00490.jpg"
            string_val: "../images/images/inclusion/img_03_4401440300_00347.jpg"
            string_val: "../images/images/inclusion/img_07_425008500_00314.jpg"
            string_val: "../images/images/crescent_gap/img_04_425003700_00002.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00801.jpg"
            string_val: "../images/images/punching_hole/img_06_3403402100_00857.jpg"
            string_val: "../images/images/oil_spot/img_07_3437011100_00684.jpg"
            string_val: "../images/images/waist_folding/img_06_4402830700_01162.jpg"
            string_val: "../images/images/silk_spot/img_03_425508400_00380.jpg"
            string_val: "../images/images/water_spot/img_02_4403466100_00013.jpg"
            string_val: "../images/images/oil_spot/img_03_3402617700_00456.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00558.jpg"
            string_val: "../images/images/crease/img_04_4402117000_00004.jpg"
            string_val: "../images/images/water_spot/img_07_425508300_00927.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00669.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00054.jpg"
            string_val: "../images/images/silk_spot/img_03_436150300_00328.jpg"
            string_val: "../images/images/punching_hole/img_03_425637500_00653.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00809.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00285.jpg"
            string_val: "../images/images/crescent_gap/img_04_425501700_00018.jpg"
            string_val: "../images/images/silk_spot/img_05_4406645900_00040.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00614.jpg"
            string_val: "../images/images/water_spot/img_01_425008000_00002.jpg"
            string_val: "../images/images/silk_spot/img_03_SIS001577_00019.jpg"
            string_val: "../images/images/oil_spot/img_03_3402617400_00941.jpg"
            string_val: "../images/images/silk_spot/img_03_436184600_00799.jpg"
            string_val: "../images/images/punching_hole/img_06_425639800_00873.jpg"
            string_val: "../images/images/silk_spot/img_04_4406645900_00543.jpg"
            string_val: "../images/images/inclusion/img_06_425237000_00660.jpg"
            string_val: "../images/images/punching_hole/img_06_425616500_00769.jpg"
            string_val: "../images/images/inclusion/img_02_425392000_00996.jpg"
            string_val: "../images/images/crescent_gap/img_07_4406645900_00002.jpg"
            string_val: "../images/images/welding_line/img_04_425382400_00001.jpg"
            string_val: "../images/images/silk_spot/img_03_436184600_00797.jpg"
            string_val: "../images/images/oil_spot/img_06_425502300_01409.jpg"
            string_val: "../images/images/silk_spot/img_01_SIS001577_00049.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00194.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00716.jpg"
            string_val: "../images/images/punching_hole/img_03_3403331900_01545.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00810.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00531.jpg"
            string_val: "../images/images/water_spot/img_02_3436813700_00270.jpg"
            string_val: "../images/images/silk_spot/img_06_4406743300_00033.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00411.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00786.jpg"
            string_val: "../images/images/silk_spot/img_03_436184600_00779.jpg"
            string_val: "../images/images/punching_hole/img_03_3403403300_00700.jpg"
            string_val: "../images/images/punching_hole/img_06_425644300_00598.jpg"
            string_val: "../images/images/silk_spot/img_04_4406645900_00808.jpg"
            string_val: "../images/images/crescent_gap/img_01_425503000_00017.jpg"
            string_val: "../images/images/silk_spot/img_02_4404580600_00661.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00080.jpg"
            string_val: "../images/images/welding_line/img_07_425613700_00782.jpg"
            string_val: "../images/images/water_spot/img_03_424826800_00420.jpg"
            string_val: "../images/images/oil_spot/img_03_3437006100_00013.jpg"
            string_val: "../images/images/welding_line/img_07_3402617400_01102.jpg"
            string_val: "../images/images/water_spot/img_02_4404580000_00041.jpg"
            string_val: "../images/images/crescent_gap/img_01_425006200_01173.jpg"
            string_val: "../images/images/crescent_gap/img_08_425503400_00053.jpg"
            string_val: "../images/images/inclusion/img_04_4402622500_00364.jpg"
            string_val: "../images/images/water_spot/img_04_425237600_00360.jpg"
            string_val: "../images/images/inclusion/img_06_425237000_00661.jpg"
            string_val: "../images/images/inclusion/img_03_3402617100_00120.jpg"
            string_val: "../images/images/punching_hole/img_03_425507200_00018.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00855.jpg"
            string_val: "../images/images/welding_line/img_02_425507000_00018.jpg"
            string_val: "../images/images/silk_spot/img_02_425243400_00057.jpg"
            string_val: "../images/images/silk_spot/img_01_3436815300_00473.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00056.jpg"
            string_val: "../images/images/oil_spot/img_07_435974600_00213.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00476.jpg"
            string_val: "../images/images/waist_folding/img_06_436185800_00735.jpg"
            string_val: "../images/images/oil_spot/img_03_425507000_00925.jpg"
            string_val: "../images/images/punching_hole/img_03_425614700_00712.jpg"
            string_val: "../images/images/inclusion/img_02_425613800_00034.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00434.jpg"
            string_val: "../images/images/water_spot/img_02_4403465900_00043.jpg"
            string_val: "../images/images/oil_spot/img_02_425507200_01515.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00817.jpg"
            string_val: "../images/images/punching_hole/img_03_424826300_00949.jpg"
            string_val: "../images/images/waist_folding/img_03_4404374100_01295.jpg"
            string_val: "../images/images/inclusion/img_02_425502300_00338.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00211.jpg"
            string_val: "../images/images/water_spot/img_01_424995500_00255.jpg"
            string_val: "../images/images/silk_spot/img_01_4406743300_00804.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00339.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00053.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00441.jpg"
            string_val: "../images/images/water_spot/img_03_424798500_00466.jpg"
            string_val: "../images/images/oil_spot/img_08_425391700_00188.jpg"
            string_val: "../images/images/silk_spot/img_07_424714400_00011.jpg"
            string_val: "../images/images/waist_folding/img_07_436164700_01536.jpg"
            string_val: "../images/images/punching_hole/img_03_425638500_00716.jpg"
            string_val: "../images/images/punching_hole/img_03_4406562900_00002.jpg"
            string_val: "../images/images/water_spot/img_01_425007600_00674.jpg"
            string_val: "../images/images/punching_hole/img_03_3403400200_00567.jpg"
            string_val: "../images/images/water_spot/img_01_4403565100_00007.jpg"
            string_val: "../images/images/welding_line/img_06_3403337800_00766.jpg"
            string_val: "../images/images/inclusion/img_04_425503200_00019.jpg"
            string_val: "../images/images/punching_hole/img_06_425503800_00052.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00159.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00046.jpg"
            string_val: "../images/images/waist_folding/img_07_424826800_00492.jpg"
            string_val: "../images/images/oil_spot/img_01_435974400_00005.jpg"
            string_val: "../images/images/oil_spot/img_06_425503400_00049.jpg"
            string_val: "../images/images/crescent_gap/img_08_425502700_00052.jpg"
            string_val: "../images/images/waist_folding/img_07_3436814000_00684.jpg"
            string_val: "../images/images/punching_hole/img_03_3403399500_00888.jpg"
            string_val: "../images/images/silk_spot/img_02_SIS001522_00031.jpg"
            string_val: "../images/images/inclusion/img_06_425507200_00976.jpg"
            string_val: "../images/images/water_spot/img_05_4402766800_00515.jpg"
            string_val: "../images/images/inclusion/img_03_3402617700_00653.jpg"
            string_val: "../images/images/crescent_gap/img_05_425502200_00054.jpg"
            string_val: "../images/images/water_spot/img_04_424826100_00528.jpg"
            string_val: "../images/images/rolled_pit/img_02_4402117200_00004.jpg"
            string_val: "../images/images/welding_line/img_02_425616500_00770.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00771.jpg"
            string_val: "../images/images/silk_spot/img_05_4406645900_00585.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00819.jpg"
            string_val: "../images/images/welding_line/img_07_425637500_00653.jpg"
            string_val: "../images/images/silk_spot/img_04_425243100_00677.jpg"
            string_val: "../images/images/crescent_gap/img_08_425006600_00930.jpg"
            string_val: "../images/images/inclusion/img_05_425502300_00026.jpg"
            string_val: "../images/images/water_spot/img_01_425241500_00995.jpg"
            string_val: "../images/images/silk_spot/img_06_4406743300_00036.jpg"
            string_val: "../images/images/silk_spot/img_03_436152900_00557.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00527.jpg"
            string_val: "../images/images/punching_hole/img_03_425504800_00018.jpg"
            string_val: "../images/images/welding_line/img_02_4402852500_01045.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00391.jpg"
            string_val: "../images/images/crescent_gap/img_08_425505100_00052.jpg"
            string_val: "../images/images/waist_folding/img_07_436164700_01551.jpg"
            string_val: "../images/images/crease/img_02_4406783500_00010.jpg"
            string_val: "../images/images/silk_spot/img_03_436150300_00317.jpg"
            string_val: "../images/images/inclusion/img_07_425508700_00362.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00328.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00435.jpg"
            string_val: "../images/images/welding_line/img_01_4402818600_00001.jpg"
            string_val: "../images/images/punching_hole/img_03_425616200_00001.jpg"
            string_val: "../images/images/crescent_gap/img_08_425007500_01452.jpg"
            string_val: "../images/images/oil_spot/img_06_425502300_01406.jpg"
            string_val: "../images/images/punching_hole/img_06_425615200_00639.jpg"
            string_val: "../images/images/inclusion/img_02_3436816100_00148.jpg"
            string_val: "../images/images/crescent_gap/img_01_425006100_00947.jpg"
            string_val: "../images/images/oil_spot/img_02_424799200_00250.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00410.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00322.jpg"
            string_val: "../images/images/water_spot/img_01_425000300_00520.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00321.jpg"
            string_val: "../images/images/rolled_pit/img_07_427199900_00007.jpg"
            string_val: "../images/images/water_spot/img_01_425243600_00848.jpg"
            string_val: "../images/images/crescent_gap/img_01_425637900_00899.jpg"
            string_val: "../images/images/rolled_pit/img_03_3437006900_00002.jpg"
            string_val: "../images/images/punching_hole/img_03_425644200_00680.jpg"
            string_val: "../images/images/water_spot/img_02_4403466100_00011.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00661.jpg"
            string_val: "../images/images/oil_spot/img_03_3437006500_00033.jpg"
            string_val: "../images/images/waist_folding/img_07_4402719200_00026.jpg"
            string_val: "../images/images/crescent_gap/img_01_425007500_01453.jpg"
            string_val: "../images/images/crescent_gap/img_05_425608200_00814.jpg"
            string_val: "../images/images/crescent_gap/img_05_425504800_00052.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00661.jpg"
            string_val: "../images/images/crescent_gap/img_08_4406772100_00002.jpg"
            string_val: "../images/images/water_spot/img_02_4406772100_00673.jpg"
            string_val: "../images/images/oil_spot/img_07_3437011100_00685.jpg"
            string_val: "../images/images/silk_spot/img_06_4406645900_00451.jpg"
            string_val: "../images/images/oil_spot/img_02_425507200_01514.jpg"
            string_val: "../images/images/punching_hole/img_06_425644200_00680.jpg"
            string_val: "../images/images/water_spot/img_03_SIS001540_00772.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00693.jpg"
            string_val: "../images/images/welding_line/img_07_3403335700_01048.jpg"
            string_val: "../images/images/punching_hole/img_03_424992300_00001.jpg"
            string_val: "../images/images/crescent_gap/img_01_425503100_00017.jpg"
            string_val: "../images/images/punching_hole/img_02_425640000_00634.jpg"
            string_val: "../images/images/oil_spot/img_04_436163100_00039.jpg"
            string_val: "../images/images/welding_line/img_07_3403403900_00809.jpg"
            string_val: "../images/images/punching_hole/img_06_425508700_00053.jpg"
            string_val: "../images/images/crescent_gap/img_01_436067700_00689.jpg"
            string_val: "../images/images/waist_folding/img_06_3436814000_00007.jpg"
            string_val: "../images/images/welding_line/img_04_425380900_00001.jpg"
            string_val: "../images/images/waist_folding/img_07_4404374100_01349.jpg"
            string_val: "../images/images/welding_line/img_07_4404710300_00877.jpg"
            string_val: "../images/images/crescent_gap/img_06_425390700_00051.jpg"
            string_val: "../images/images/waist_folding/img_07_4405133600_00039.jpg"
            string_val: "../images/images/punching_hole/img_06_425506800_00054.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00793.jpg"
            string_val: "../images/images/silk_spot/img_06_3436814300_00056.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00660.jpg"
            string_val: "../images/images/punching_hole/img_03_425609500_00001.jpg"
            string_val: "../images/images/waist_folding/img_06_425614600_00414.jpg"
            string_val: "../images/images/inclusion/img_02_425501100_00688.jpg"
            string_val: "../images/images/rolled_pit/img_02_427146700_00002.jpg"
            string_val: "../images/images/crescent_gap/img_08_425391800_00054.jpg"
            string_val: "../images/images/crescent_gap/img_04_424799600_00001.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00197.jpg"
            string_val: "../images/images/silk_spot/img_04_SIS001577_00045.jpg"
            string_val: "../images/images/inclusion/img_03_3402617100_00119.jpg"
            string_val: "../images/images/waist_folding/img_07_3436814000_00010.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00425.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00458.jpg"
            string_val: "../images/images/crescent_gap/img_01_425006400_00001.jpg"
            string_val: "../images/images/waist_folding/img_06_424826800_00502.jpg"
            string_val: "../images/images/welding_line/img_03_425501100_00018.jpg"
            string_val: "../images/images/water_spot/img_01_425241600_00283.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00092.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00433.jpg"
            string_val: "../images/images/welding_line/img_07_4404893900_00568.jpg"
            string_val: "../images/images/crease/img_07_425004200_00982.jpg"
            string_val: "../images/images/welding_line/img_01_425638500_00001.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00191.jpg"
            string_val: "../images/images/water_spot/img_02_3436813700_00788.jpg"
            string_val: "../images/images/silk_spot/img_01_425243200_00439.jpg"
            string_val: "../images/images/crease/img_08_427199900_01134.jpg"
            string_val: "../images/images/welding_line/img_01_425507000_00018.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00420.jpg"
            string_val: "../images/images/inclusion/img_02_3402617100_00366.jpg"
            string_val: "../images/images/silk_spot/img_02_SIS001533_00311.jpg"
            string_val: "../images/images/oil_spot/img_06_425502300_01408.jpg"
            string_val: "../images/images/welding_line/img_03_436068600_00001.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00546.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00655.jpg"
            string_val: "../images/images/crescent_gap/img_04_424799200_00001.jpg"
            string_val: "../images/images/inclusion/img_05_425504900_00057.jpg"
            string_val: "../images/images/punching_hole/img_02_425644200_00681.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00183.jpg"
            string_val: "../images/images/punching_hole/img_02_425613600_00582.jpg"
            string_val: "../images/images/welding_line/img_03_425506300_00018.jpg"
            string_val: "../images/images/crease/img_05_4405381400_00774.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00913.jpg"
            string_val: "../images/images/oil_spot/img_04_436163100_00021.jpg"
            string_val: "../images/images/crescent_gap/img_04_424825700_00001.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00688.jpg"
            string_val: "../images/images/punching_hole/img_03_425613700_00782.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00277.jpg"
            string_val: "../images/images/crescent_gap/img_01_425008500_00874.jpg"
            string_val: "../images/images/waist_folding/img_06_3436814000_00683.jpg"
            string_val: "../images/images/water_spot/img_02_424799300_00146.jpg"
            string_val: "../images/images/waist_folding/img_06_436164700_01537.jpg"
            string_val: "../images/images/welding_line/img_03_436184600_00002.jpg"
            string_val: "../images/images/oil_spot/img_01_425614600_00428.jpg"
            string_val: "../images/images/welding_line/img_06_4403068400_01288.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00063.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00074.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00576.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00518.jpg"
            string_val: "../images/images/water_spot/img_03_424992300_00520.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00320.jpg"
            string_val: "../images/images/inclusion/img_06_425392500_00834.jpg"
            string_val: "../images/images/silk_spot/img_04_SIS001577_00052.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00325.jpg"
            string_val: "../images/images/crescent_gap/img_01_425609500_00001.jpg"
            string_val: "../images/images/inclusion/img_03_425501800_01220.jpg"
            string_val: "../images/images/silk_spot/img_02_SIS001564_01335.jpg"
            string_val: "../images/images/inclusion/img_07_425504800_00992.jpg"
            string_val: "../images/images/oil_spot/img_06_425502300_01397.jpg"
            string_val: "../images/images/punching_hole/img_06_425614700_00694.jpg"
            string_val: "../images/images/silk_spot/img_03_436150300_00330.jpg"
            string_val: "../images/images/crease/img_03_SIS001559_00006.jpg"
            string_val: "../images/images/water_spot/img_02_4403466700_00014.jpg"
            string_val: "../images/images/inclusion/img_06_425237000_00834.jpg"
            string_val: "../images/images/crescent_gap/img_05_425613500_00596.jpg"
            string_val: "../images/images/silk_spot/img_06_4406645900_00492.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00463.jpg"
            string_val: "../images/images/rolled_pit/img_03_4402724500_01238.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00676.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00071.jpg"
            string_val: "../images/images/crescent_gap/img_04_425503000_00017.jpg"
            string_val: "../images/images/silk_spot/img_01_4406743300_00461.jpg"
            string_val: "../images/images/welding_line/img_05_4405356600_00896.jpg"
            string_val: "../images/images/crescent_gap/img_08_425008500_00873.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00771.jpg"
            string_val: "../images/images/punching_hole/img_03_425502600_00017.jpg"
            string_val: "../images/images/crescent_gap/img_01_425007500_01452.jpg"
            string_val: "../images/images/crescent_gap/img_08_425608200_00006.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00267.jpg"
            string_val: "../images/images/waist_folding/img_07_436164700_01538.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00273.jpg"
            string_val: "../images/images/silk_spot/img_02_3436786500_00143.jpg"
            string_val: "../images/images/crescent_gap/img_03_SIS001561_01569.jpg"
            string_val: "../images/images/water_spot/img_01_425006600_00499.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00467.jpg"
            string_val: "../images/images/oil_spot/img_04_436163100_00008.jpg"
            string_val: "../images/images/silk_spot/img_02_425243200_00536.jpg"
            string_val: "../images/images/crescent_gap/img_01_425503100_00018.jpg"
            string_val: "../images/images/punching_hole/img_03_3403397500_01395.jpg"
            string_val: "../images/images/oil_spot/img_02_425613800_00218.jpg"
            string_val: "../images/images/waist_folding/img_06_3436814000_00688.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00045.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00313.jpg"
            string_val: "../images/images/punching_hole/img_03_425503400_00017.jpg"
            string_val: "../images/images/inclusion/img_08_425508300_00656.jpg"
            string_val: "../images/images/punching_hole/img_06_3403399600_00739.jpg"
            string_val: "../images/images/oil_spot/img_07_435974600_00223.jpg"
            string_val: "../images/images/water_spot/img_01_425007600_00126.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00179.jpg"
            string_val: "../images/images/inclusion/img_02_3436816100_00153.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00039.jpg"
            string_val: "../images/images/oil_spot/img_02_425507000_00913.jpg"
            string_val: "../images/images/water_spot/img_01_425008500_00704.jpg"
            string_val: "../images/images/silk_spot/img_02_4406562900_00755.jpg"
            string_val: "../images/images/water_spot/img_01_425241600_00041.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00335.jpg"
            string_val: "../images/images/welding_line/img_06_425505500_00052.jpg"
            string_val: "../images/images/crescent_gap/img_08_425638500_00713.jpg"
            string_val: "../images/images/waist_folding/img_06_436164700_01556.jpg"
            string_val: "../images/images/oil_spot/img_08_425508100_01398.jpg"
            string_val: "../images/images/silk_spot/img_06_425243200_00116.jpg"
            string_val: "../images/images/silk_spot/img_04_SIS001577_00046.jpg"
            string_val: "../images/images/water_spot/img_01_425244100_00682.jpg"
            string_val: "../images/images/oil_spot/img_01_433354400_00040.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00659.jpg"
            string_val: "../images/images/welding_line/img_07_3403334800_00898.jpg"
            string_val: "../images/images/silk_spot/img_03_436152900_00543.jpg"
            string_val: "../images/images/silk_spot/img_04_4406743300_00004.jpg"
            string_val: "../images/images/water_spot/img_02_436183700_00098.jpg"
            string_val: "../images/images/welding_line/img_03_436185500_00005.jpg"
            string_val: "../images/images/welding_line/img_02_436164700_00001.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00156.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00555.jpg"
            string_val: "../images/images/crescent_gap/img_04_425501800_00018.jpg"
            string_val: "../images/images/waist_folding/img_07_3437006500_00761.jpg"
            string_val: "../images/images/water_spot/img_02_4406772100_00305.jpg"
            string_val: "../images/images/silk_spot/img_03_436152900_00535.jpg"
            string_val: "../images/images/waist_folding/img_07_424826800_00493.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00056.jpg"
            string_val: "../images/images/welding_line/img_03_3402616100_00002.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00692.jpg"
            string_val: "../images/images/water_spot/img_03_424992300_00514.jpg"
            string_val: "../images/images/crescent_gap/img_05_425502600_00052.jpg"
            string_val: "../images/images/water_spot/img_02_4406772100_00404.jpg"
            string_val: "../images/images/inclusion/img_06_4405000800_01031.jpg"
            string_val: "../images/images/silk_spot/img_03_4406645900_00009.jpg"
            string_val: "../images/images/welding_line/img_06_SIS002344_00834.jpg"
            string_val: "../images/images/welding_line/img_07_425613800_00786.jpg"
            string_val: "../images/images/punching_hole/img_03_4406424600_00002.jpg"
            string_val: "../images/images/inclusion/img_03_425503100_00068.jpg"
            string_val: "../images/images/inclusion/img_03_3402617500_00138.jpg"
            string_val: "../images/images/water_spot/img_02_4406446700_00001.jpg"
            string_val: "../images/images/crescent_gap/img_01_425503400_00018.jpg"
            string_val: "../images/images/rolled_pit/img_02_4402116500_00005.jpg"
            string_val: "../images/images/water_spot/img_02_3436813700_00307.jpg"
            string_val: "../images/images/crescent_gap/img_01_424826100_00001.jpg"
            string_val: "../images/images/inclusion/img_03_425501800_01160.jpg"
            string_val: "../images/images/crease/img_02_4406783500_00004.jpg"
            string_val: "../images/images/inclusion/img_08_425608200_00504.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00523.jpg"
            string_val: "../images/images/silk_spot/img_04_436068100_00089.jpg"
            string_val: "../images/images/silk_spot/img_02_436153600_00691.jpg"
            string_val: "../images/images/crescent_gap/img_08_425503800_00053.jpg"
            string_val: "../images/images/inclusion/img_07_4406645900_00339.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00266.jpg"
            string_val: "../images/images/punching_hole/img_06_3403399900_01007.jpg"
            string_val: "../images/images/crescent_gap/img_04_425505000_00018.jpg"
            string_val: "../images/images/welding_line/img_02_436149500_00939.jpg"
            string_val: "../images/images/inclusion/img_08_425508100_01624.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00381.jpg"
            string_val: "../images/images/oil_spot/img_07_425390900_00111.jpg"
            string_val: "../images/images/crescent_gap/img_04_425608200_00001.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00424.jpg"
            string_val: "../images/images/oil_spot/img_08_425391700_00095.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00042.jpg"
            string_val: "../images/images/crescent_gap/img_01_3402617700_00001.jpg"
            string_val: "../images/images/inclusion/img_08_425639900_00613.jpg"
            string_val: "../images/images/punching_hole/img_03_3403404300_01219.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00312.jpg"
            string_val: "../images/images/silk_spot/img_07_4406743300_00041.jpg"
            string_val: "../images/images/silk_spot/img_01_SIS001577_00020.jpg"
            string_val: "../images/images/water_spot/img_02_424799200_00450.jpg"
            string_val: "../images/images/punching_hole/img_06_425506100_00051.jpg"
            string_val: "../images/images/water_spot/img_03_424825900_00211.jpg"
            string_val: "../images/images/inclusion/img_02_4402623300_00026.jpg"
            string_val: "../images/images/inclusion/img_06_4402625300_00109.jpg"
            string_val: "../images/images/welding_line/img_02_436185000_00016.jpg"
            string_val: "../images/images/inclusion/img_06_4402625300_00104.jpg"
            string_val: "../images/images/water_spot/img_02_3436813700_00298.jpg"
            string_val: "../images/images/silk_spot/img_04_425005700_00169.jpg"
            string_val: "../images/images/silk_spot/img_02_4406645900_00894.jpg"
            string_val: "../images/images/silk_spot/img_01_425005700_00343.jpg"
            string_val: "../images/images/punching_hole/img_03_436153600_01213.jpg"
            string_val: "../images/images/crease/img_07_4405965200_00151.jpg"
            string_val: "../images/images/inclusion/img_03_3402617400_00898.jpg"
            string_val: "../images/images/silk_spot/img_03_436184600_00793.jpg"
            string_val: "../images/images/crease/img_03_4405964400_00010.jpg"
            string_val: "../images/images/welding_line/img_07_436164700_01555.jpg"
            string_val: "../images/images/silk_spot/img_04_4406645900_00678.jpg"
            string_val: "../images/images/punching_hole/img_06_3403333900_00758.jpg"
            string_val: "../images/images/punching_hole/img_03_3403392000_01070.jpg"
            string_val: "../images/images/water_spot/img_01_425007600_00599.jpg"
            string_val: "../images/images/silk_spot/img_07_4406645900_00570.jpg"
            string_val: "../images/images/oil_spot/img_02_425507000_00931.jpg"
            string_val: "../images/images/waist_folding/img_07_3436814000_00006.jpg"
            string_val: "../images/images/inclusion/img_08_425506100_00400.jpg"
            string_val: "../images/images/oil_spot/img_03_4403465900_00023.jpg"
            string_val: "../images/images/welding_line/img_01_425506400_00018.jpg"
            string_val: "../images/images/water_spot/img_03_4403466500_00029.jpg"
            string_val: "../images/images/crescent_gap/img_05_425502600_00053.jpg"
            string_val: "../images/images/welding_line/img_04_425508100_00018.jpg"
            string_val: "../images/images/inclusion/img_01_4406743300_00935.jpg"
            string_val: "../images/images/silk_spot/img_08_4406743300_00420.jpg"
            string_val: "../images/images/silk_spot/img_05_4406743300_00519.jpg"
            string_val: "../images/images/water_spot/img_01_425000300_00630.jpg"
            string_val: "../images/images/oil_spot/img_08_425507600_00361.jpg"
            string_val: "../images/images/oil_spot/img_08_425391700_00187.jpg"
            string_val: "../images/images/crescent_gap/img_01_425616200_00001.jpg"
            string_val: "../images/images/oil_spot/img_06_425502300_01399.jpg"
          }
        }
      }
    }
    node_def {
      name: "GatherV2_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "GatherV2_1"
      op: "GatherV2"
      input: "GatherV2_1/params:output:0"
      input: "Cast_1:y:0"
      input: "GatherV2_1/axis:output:0"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "batch_dims"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "ReadFile"
      op: "ReadFile"
      input: "GatherV2:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "DecodeJpeg"
      op: "DecodeJpeg"
      input: "ReadFile:contents:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "acceptable_fraction"
        value {
          f: 1.0
        }
      }
      attr {
        key: "channels"
        value {
          i: 3
        }
      }
      attr {
        key: "dct_method"
        value {
          s: ""
        }
      }
      attr {
        key: "fancy_upscaling"
        value {
          b: true
        }
      }
      attr {
        key: "ratio"
        value {
          i: 1
        }
      }
      attr {
        key: "try_recover_truncated"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Cast_3"
      op: "Cast"
      input: "DecodeJpeg:image:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 255.0
          }
        }
      }
    }
    node_def {
      name: "truediv"
      op: "RealDiv"
      input: "Cast_3:y:0"
      input: "Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "sub/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "sub"
      op: "Sub"
      input: "truediv:z:0"
      input: "sub/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "resize/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "resize/ExpandDims"
      op: "ExpandDims"
      input: "sub:z:0"
      input: "resize/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "resize/size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\200\001\000\000\200\002\000\000"
          }
        }
      }
    }
    node_def {
      name: "resize/ResizeBilinear"
      op: "ResizeBilinear"
      input: "resize/ExpandDims:output:0"
      input: "resize/size:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "align_corners"
        value {
          b: false
        }
      }
      attr {
        key: "half_pixel_centers"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "resize/Squeeze"
      op: "Squeeze"
      input: "resize/ResizeBilinear:resized_images:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "ReadFile_1"
      op: "ReadFile"
      input: "GatherV2_1:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "DecodeJpeg_1"
      op: "DecodeJpeg"
      input: "ReadFile_1:contents:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "acceptable_fraction"
        value {
          f: 1.0
        }
      }
      attr {
        key: "channels"
        value {
          i: 3
        }
      }
      attr {
        key: "dct_method"
        value {
          s: ""
        }
      }
      attr {
        key: "fancy_upscaling"
        value {
          b: true
        }
      }
      attr {
        key: "ratio"
        value {
          i: 1
        }
      }
      attr {
        key: "try_recover_truncated"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Cast_4"
      op: "Cast"
      input: "DecodeJpeg_1:image:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 255.0
          }
        }
      }
    }
    node_def {
      name: "truediv_1"
      op: "RealDiv"
      input: "Cast_4:y:0"
      input: "Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "sub_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "sub_1"
      op: "Sub"
      input: "truediv_1:z:0"
      input: "sub_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "resize_1/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "resize_1/ExpandDims"
      op: "ExpandDims"
      input: "sub_1:z:0"
      input: "resize_1/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "resize_1/size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\200\001\000\000\200\002\000\000"
          }
        }
      }
    }
    node_def {
      name: "resize_1/ResizeBilinear"
      op: "ResizeBilinear"
      input: "resize_1/ExpandDims:output:0"
      input: "resize_1/size:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "align_corners"
        value {
          b: false
        }
      }
      attr {
        key: "half_pixel_centers"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "resize_1/Squeeze"
      op: "Squeeze"
      input: "resize_1/ResizeBilinear:resized_images:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node_def {
      name: "random_uniform_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "random_uniform_1/min"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "random_uniform_1"
      op: "RandomUniformInt"
      input: "random_uniform_1/shape:output:0"
      input: "random_uniform_1/min:output:0"
      input: "Const_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tout"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "seed"
        value {
          i: 8964
        }
      }
      attr {
        key: "seed2"
        value {
          i: 51
        }
      }
    }
    node_def {
      name: "Equal/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "Equal"
      op: "Equal"
      input: "random_uniform_1:output:0"
      input: "Equal/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "cond"
      op: "If"
      input: "Equal:z:0"
      input: "resize/Squeeze:output:0"
      input: "resize_1/Squeeze:output:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "cond_false_73"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "cond_true_72"
          }
        }
      }
    }
    node_def {
      name: "cond/Identity"
      op: "Identity"
      input: "cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "cond/Identity_1"
      op: "Identity"
      input: "cond:output:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "random_uniform_2/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "random_uniform_2/min"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "random_uniform_2/max"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "random_uniform_2/RandomUniform"
      op: "RandomUniform"
      input: "random_uniform_2/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 8964
        }
      }
      attr {
        key: "seed2"
        value {
          i: 60
        }
      }
    }
    node_def {
      name: "random_uniform_2/sub"
      op: "Sub"
      input: "random_uniform_2/max:output:0"
      input: "random_uniform_2/min:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "random_uniform_2/mul"
      op: "Mul"
      input: "random_uniform_2/RandomUniform:output:0"
      input: "random_uniform_2/sub:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "random_uniform_2"
      op: "Add"
      input: "random_uniform_2/mul:z:0"
      input: "random_uniform_2/min:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "mul_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
    }
    node_def {
      name: "mul_1"
      op: "Mul"
      input: "random_uniform_2:z:0"
      input: "mul_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "add_1/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.8999999761581421
          }
        }
      }
    }
    node_def {
      name: "add_1"
      op: "Add"
      input: "add_1/x:output:0"
      input: "mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "mul_2/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 640.0
          }
        }
      }
    }
    node_def {
      name: "mul_2"
      op: "Mul"
      input: "mul_2/x:output:0"
      input: "add_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Cast_5"
      op: "Cast"
      input: "mul_2:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "mul_3/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 384.0
          }
        }
      }
    }
    node_def {
      name: "mul_3"
      op: "Mul"
      input: "mul_3/x:output:0"
      input: "add_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "Cast_6"
      op: "Cast"
      input: "mul_3:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node_def {
      name: "concat"
      op: "ConcatV2"
      input: "cond/Identity:output:0"
      input: "cond/Identity_1:output:0"
      input: "concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 6
              }
            }
          }
        }
      }
    }
    node_def {
      name: "random_crop/size/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 6
          }
        }
      }
    }
    node_def {
      name: "random_crop/size"
      op: "Pack"
      input: "Cast_6:y:0"
      input: "Cast_5:y:0"
      input: "random_crop/size/2:output:0"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "random_crop/Shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\200\001\000\000\200\002\000\000\006\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "random_crop/GreaterEqual"
      op: "GreaterEqual"
      input: "random_crop/Shape:output:0"
      input: "random_crop/size:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "random_crop/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "random_crop/All"
      op: "All"
      input: "random_crop/GreaterEqual:z:0"
      input: "random_crop/Const:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "random_crop/Assert/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Need value.shape >= size, got "
          }
        }
      }
    }
    node_def {
      name: "random_crop/Assert/Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Need value.shape >= size, got "
          }
        }
      }
    }
    node_def {
      name: "random_crop/Assert/Assert"
      op: "Assert"
      input: "random_crop/All:output:0"
      input: "random_crop/Assert/Assert/data_0:output:0"
      input: "random_crop/Shape:output:0"
      input: "random_crop/size:output:0"
      input: "^cond"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_INT32
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 1000
        }
      }
    }
    node_def {
      name: "random_crop/control_dependency"
      op: "Identity"
      input: "random_crop/Shape:output:0"
      input: "^random_crop/Assert/Assert"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@random_crop/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "random_crop/sub"
      op: "Sub"
      input: "random_crop/control_dependency:output:0"
      input: "random_crop/size:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "random_crop/add/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "random_crop/add"
      op: "Add"
      input: "random_crop/sub:z:0"
      input: "random_crop/add/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "random_crop/Shape_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node_def {
      name: "random_crop/random_uniform/min"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "random_crop/random_uniform/max"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2147483647
          }
        }
      }
    }
    node_def {
      name: "random_crop/random_uniform"
      op: "RandomUniformInt"
      input: "random_crop/Shape_1:output:0"
      input: "random_crop/random_uniform/min:output:0"
      input: "random_crop/random_uniform/max:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tout"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "seed"
        value {
          i: 8964
        }
      }
      attr {
        key: "seed2"
        value {
          i: 92
        }
      }
    }
    node_def {
      name: "random_crop/mod"
      op: "FloorMod"
      input: "random_crop/random_uniform:output:0"
      input: "random_crop/add:z:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "random_crop"
      op: "Slice"
      input: "concat:output:0"
      input: "random_crop/mod:z:0"
      input: "random_crop/size:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 6
              }
            }
          }
        }
      }
    }
    node_def {
      name: "resize_2/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "resize_2/ExpandDims"
      op: "ExpandDims"
      input: "random_crop:output:0"
      input: "resize_2/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 6
              }
            }
          }
        }
      }
    }
    node_def {
      name: "resize_2/size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\200\001\000\000\200\002\000\000"
          }
        }
      }
    }
    node_def {
      name: "resize_2/ResizeBilinear"
      op: "ResizeBilinear"
      input: "resize_2/ExpandDims:output:0"
      input: "resize_2/size:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 6
              }
            }
          }
        }
      }
      attr {
        key: "align_corners"
        value {
          b: false
        }
      }
      attr {
        key: "half_pixel_centers"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "resize_2/Squeeze"
      op: "Squeeze"
      input: "resize_2/ResizeBilinear:resized_images:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 6
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "resize_2/Squeeze:output:0"
      input: "strided_slice_2/stack:output:0"
      input: "strided_slice_2/stack_1:output:0"
      input: "strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 7
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\006\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3"
      op: "StridedSlice"
      input: "resize_2/Squeeze:output:0"
      input: "strided_slice_3/stack:output:0"
      input: "strided_slice_3/stack_1:output:0"
      input: "strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice_2:output:0"
      input: "^random_crop/Assert/Assert"
      input: "^cond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "strided_slice_3:output:0"
      input: "^random_crop/Assert/Assert"
      input: "^cond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 2
            }
          }
        }
      }
    }
    control_ret {
      key: "cond"
      value: "cond"
    }
    control_ret {
      key: "random_crop/Assert/Assert"
      value: "random_crop/Assert/Assert"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "cond_true_81"
      input_arg {
        name: "identity_resize_squeeze"
        type: DT_FLOAT
      }
      input_arg {
        name: "identity_1_resize_1_squeeze"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_resize_squeeze"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "identity_1_resize_1_squeeze"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 384
            }
            dim {
              size: 640
            }
            dim {
              size: 3
            }
          }
          shape {
            dim {
              size: 384
            }
            dim {
              size: 640
            }
            dim {
              size: 3
            }
          }
        }
      }
    }
    arg_attr {
      value {
      }
    }
    arg_attr {
      key: 1
      value {
      }
    }
  }
  function {
    signature {
      name: "cond_true_124"
      input_arg {
        name: "strided_slice_resize_squeeze"
        type: DT_FLOAT
      }
      input_arg {
        name: "strided_slice_1_resize_1_squeeze"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\377\377\377\377\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "strided_slice_resize_squeeze"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 7
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 7
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\377\377\377\377\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "strided_slice_1_resize_1_squeeze"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 7
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 7
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 384
              }
              dim {
                size: 640
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 384
            }
            dim {
              size: 640
            }
            dim {
              size: 3
            }
          }
          shape {
            dim {
              size: 384
            }
            dim {
              size: 640
            }
            dim {
              size: 3
            }
          }
        }
      }
    }
    arg_attr {
      value {
      }
    }
    arg_attr {
      key: 1
      value {
      }
    }
  }
}
versions {
  producer: 38
  min_consumer: 12
}
